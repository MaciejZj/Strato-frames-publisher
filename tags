!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ALIGN_CENTER	include/spdlog/fmt/bundled/format.h	/^  ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:alignment
ALIGN_DEFAULT	include/spdlog/fmt/bundled/format.h	/^  ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:alignment
ALIGN_LEFT	include/spdlog/fmt/bundled/format.h	/^  ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:alignment
ALIGN_NUMERIC	include/spdlog/fmt/bundled/format.h	/^  ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:alignment
ALIGN_RIGHT	include/spdlog/fmt/bundled/format.h	/^  ALIGN_DEFAULT, ALIGN_LEFT, ALIGN_RIGHT, ALIGN_CENTER, ALIGN_NUMERIC$/;"	e	enum:alignment
A_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit A_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::A_formatter
A_formatter	include/spdlog/details/pattern_formatter.h	/^class A_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
Application	include/application.hpp	/^class Application {$/;"	c
BACKGROUND_COLOR	include/spdlog/fmt/bundled/format-inl.h	/^template <typename T> const char basic_data<T>::BACKGROUND_COLOR[] = "\\x1b[48;2;";$/;"	m	class:internal::basic_data
BIN	makefile	/^BIN	:= bin$/;"	m
BOLD	include/spdlog/sinks/wincolor_sink.h	/^    const WORD BOLD = FOREGROUND_INTENSITY;$/;"	m	class:spdlog::sinks::wincolor_sink
BUFFER_SIZE	include/spdlog/fmt/bundled/format.h	/^  enum {BUFFER_SIZE = std::numeric_limits<unsigned long long>::digits10 + 3};$/;"	e	enum:format_int::__anon15
B_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit B_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::B_formatter
B_formatter	include/spdlog/details/pattern_formatter.h	/^class B_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
CXX	makefile	/^CXX	:= g++-9.1$/;"	m
CXX_FLAGS	makefile	/^CXX_FLAGS := -Wall -Wextra -std=c++17 -ggdb$/;"	m
CYAN	include/spdlog/sinks/wincolor_sink.h	/^    const WORD CYAN = FOREGROUND_GREEN | FOREGROUND_BLUE;$/;"	m	class:spdlog::sinks::wincolor_sink
C_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit C_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
Char	include/spdlog/fmt/bundled/printf.h	/^  typedef typename Context::char_type Char;$/;"	t	class:internal::arg_converter
Cpu_temp_reader	include/cpu_temp_reader.hpp	/^class Cpu_temp_reader {$/;"	c
Cpu_temp_reader	src/cpu_temp_reader.cpp	/^Cpu_temp_reader::Cpu_temp_reader(std::string file_path) {$/;"	f	class:Cpu_temp_reader
DIGITS	include/spdlog/fmt/bundled/format-inl.h	/^const char basic_data<T>::DIGITS[] =$/;"	m	class:internal::basic_data
D_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit D_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
EXECUTABLE	makefile	/^EXECUTABLE := main$/;"	m
E_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit E_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
FMT_ALWAYS_INLINE	include/spdlog/fmt/bundled/format.h	/^# define FMT_ALWAYS_INLINE /;"	d
FMT_ALWAYS_INLINE	include/spdlog/fmt/bundled/format.h	/^# define FMT_ALWAYS_INLINE$/;"	d
FMT_ALWAYS_INLINE	include/spdlog/fmt/bundled/format.h	/^inline char *lg(uint32_t n, Handler h) FMT_ALWAYS_INLINE;$/;"	m	namespace:internal
FMT_API	include/spdlog/fmt/bundled/core.h	/^#  define FMT_API /;"	d
FMT_API	include/spdlog/fmt/bundled/core.h	/^# define FMT_API$/;"	d
FMT_ASSERT	include/spdlog/fmt/bundled/core.h	/^# define FMT_ASSERT(/;"	d
FMT_BEGIN_NAMESPACE	include/spdlog/fmt/bundled/core.h	/^# define FMT_BEGIN_NAMESPACE /;"	d
FMT_BUILTIN_CLZ	include/spdlog/fmt/bundled/format.h	/^#  define FMT_BUILTIN_CLZ(/;"	d
FMT_BUILTIN_CLZ	include/spdlog/fmt/bundled/format.h	/^# define FMT_BUILTIN_CLZ(/;"	d
FMT_BUILTIN_CLZLL	include/spdlog/fmt/bundled/format.h	/^#  define FMT_BUILTIN_CLZLL(/;"	d
FMT_BUILTIN_CLZLL	include/spdlog/fmt/bundled/format.h	/^# define FMT_BUILTIN_CLZLL(/;"	d
FMT_CATCH	include/spdlog/fmt/bundled/format-inl.h	/^# define FMT_CATCH(/;"	d
FMT_CHAR	include/spdlog/fmt/bundled/core.h	/^#define FMT_CHAR(/;"	d
FMT_CHRONO_H_	include/spdlog/fmt/bundled/chrono.h	/^#define FMT_CHRONO_H_$/;"	d
FMT_CLANG_VERSION	include/spdlog/fmt/bundled/format.h	/^# define FMT_CLANG_VERSION /;"	d
FMT_COLOR_H_	include/spdlog/fmt/bundled/color.h	/^#define FMT_COLOR_H_$/;"	d
FMT_CONSTEXPR	include/spdlog/fmt/bundled/core.h	/^# define FMT_CONSTEXPR /;"	d
FMT_CONSTEXPR11	include/spdlog/fmt/bundled/core.h	/^# define FMT_CONSTEXPR11 /;"	d
FMT_CONSTEXPR11	include/spdlog/fmt/bundled/core.h	/^# define FMT_CONSTEXPR11$/;"	d
FMT_CONSTEXPR_DECL	include/spdlog/fmt/bundled/core.h	/^# define FMT_CONSTEXPR_DECL /;"	d
FMT_CONSTEXPR_DECL	include/spdlog/fmt/bundled/core.h	/^# define FMT_CONSTEXPR_DECL$/;"	d
FMT_CORE_H_	include/spdlog/fmt/bundled/core.h	/^#define FMT_CORE_H_$/;"	d
FMT_CUDA_VERSION	include/spdlog/fmt/bundled/format.h	/^# define FMT_CUDA_VERSION /;"	d
FMT_DETECTED_NOEXCEPT	include/spdlog/fmt/bundled/core.h	/^# define FMT_DETECTED_NOEXCEPT /;"	d
FMT_ENABLE_IF_T	include/spdlog/fmt/bundled/core.h	/^#define FMT_ENABLE_IF_T(/;"	d
FMT_END_NAMESPACE	include/spdlog/fmt/bundled/core.h	/^#  define FMT_END_NAMESPACE /;"	d
FMT_EXCEPTIONS	include/spdlog/fmt/bundled/core.h	/^#  define FMT_EXCEPTIONS /;"	d
FMT_EXPLICIT	include/spdlog/fmt/bundled/core.h	/^# define FMT_EXPLICIT /;"	d
FMT_EXPLICIT	include/spdlog/fmt/bundled/core.h	/^# define FMT_EXPLICIT$/;"	d
FMT_FALLTHROUGH	include/spdlog/fmt/bundled/format-inl.h	/^# define FMT_FALLTHROUGH /;"	d
FMT_FALLTHROUGH	include/spdlog/fmt/bundled/format-inl.h	/^# define FMT_FALLTHROUGH$/;"	d
FMT_FORMAT_H_	include/spdlog/fmt/bundled/format.h	/^#define FMT_FORMAT_H_$/;"	d
FMT_FORMAT_INL_H_	include/spdlog/fmt/bundled/format-inl.h	/^#define FMT_FORMAT_INL_H_$/;"	d
FMT_FUNC	include/spdlog/fmt/bundled/format.h	/^# define FMT_FUNC /;"	d
FMT_GCC_VERSION	include/spdlog/fmt/bundled/core.h	/^# define FMT_GCC_VERSION /;"	d
FMT_GNUC_LIBSTD_VERSION	include/spdlog/fmt/bundled/format.h	/^# define FMT_GNUC_LIBSTD_VERSION /;"	d
FMT_HAS_BUILTIN	include/spdlog/fmt/bundled/format.h	/^# define FMT_HAS_BUILTIN(/;"	d
FMT_HAS_CPP_ATTRIBUTE	include/spdlog/fmt/bundled/core.h	/^# define FMT_HAS_CPP_ATTRIBUTE(/;"	d
FMT_HAS_CXX11_NOEXCEPT	include/spdlog/fmt/bundled/core.h	/^# define FMT_HAS_CXX11_NOEXCEPT /;"	d
FMT_HAS_FEATURE	include/spdlog/fmt/bundled/core.h	/^# define FMT_HAS_FEATURE(/;"	d
FMT_HAS_GXX_CXX11	include/spdlog/fmt/bundled/core.h	/^# define FMT_HAS_GXX_CXX11 /;"	d
FMT_HAS_INCLUDE	include/spdlog/fmt/bundled/core.h	/^# define FMT_HAS_INCLUDE(/;"	d
FMT_HEADER_ONLY	include/spdlog/fmt/fmt.h	/^#define FMT_HEADER_ONLY$/;"	d
FMT_HEADER_ONLY	include/spdlog/fmt/ostr.h	/^#define FMT_HEADER_ONLY$/;"	d
FMT_ICC_VERSION	include/spdlog/fmt/bundled/format.h	/^# define FMT_ICC_VERSION /;"	d
FMT_INLINE_NAMESPACE	include/spdlog/fmt/bundled/core.h	/^#  define FMT_INLINE_NAMESPACE /;"	d
FMT_LOCALE	include/spdlog/fmt/bundled/posix.h	/^# define FMT_LOCALE$/;"	d
FMT_LOCALE_H_	include/spdlog/fmt/bundled/locale.h	/^#define FMT_LOCALE_H_$/;"	d
FMT_MAKE_VALUE	include/spdlog/fmt/bundled/core.h	/^#define FMT_MAKE_VALUE(/;"	d
FMT_MAKE_VALUE_SAME	include/spdlog/fmt/bundled/core.h	/^#define FMT_MAKE_VALUE_SAME(/;"	d
FMT_MSC_VER	include/spdlog/fmt/bundled/core.h	/^# define FMT_MSC_VER /;"	d
FMT_NOEXCEPT	include/spdlog/fmt/bundled/core.h	/^#  define FMT_NOEXCEPT /;"	d
FMT_NOEXCEPT	include/spdlog/fmt/bundled/core.h	/^#  define FMT_NOEXCEPT$/;"	d
FMT_NOEXCEPT	include/spdlog/fmt/bundled/core.h	/^typename std::add_rvalue_reference<T>::type declval() FMT_NOEXCEPT;$/;"	m	namespace:internal
FMT_NOEXCEPT	include/spdlog/fmt/bundled/format.h	/^                                  fmt::string_view message) FMT_NOEXCEPT;$/;"	m	namespace:internal
FMT_NOEXCEPT	include/spdlog/fmt/bundled/posix.h	/^  FMT_API void dup2(int fd, error_code &ec) FMT_NOEXCEPT;$/;"	m	class:file
FMT_NOEXCEPT	include/spdlog/fmt/bundled/posix.h	/^  FMT_API ~buffered_file() FMT_NOEXCEPT;$/;"	m	class:buffered_file
FMT_NOEXCEPT	include/spdlog/fmt/bundled/posix.h	/^  FMT_API ~file() FMT_NOEXCEPT;$/;"	m	class:file
FMT_NOMACRO	include/spdlog/fmt/bundled/time.h	/^#define FMT_NOMACRO$/;"	d
FMT_NOMACRO	include/spdlog/fmt/bundled/time.h	/^inline null<> localtime_r FMT_NOMACRO(...) { return null<>(); }$/;"	f	namespace:internal
FMT_NULL	include/spdlog/fmt/bundled/core.h	/^#  define FMT_NULL /;"	d
FMT_OSTREAM_H_	include/spdlog/fmt/bundled/ostream.h	/^#define FMT_OSTREAM_H_$/;"	d
FMT_OVERRIDE	include/spdlog/fmt/bundled/core.h	/^#  define FMT_OVERRIDE /;"	d
FMT_OVERRIDE	include/spdlog/fmt/bundled/core.h	/^#  define FMT_OVERRIDE$/;"	d
FMT_OVERRIDE	include/spdlog/fmt/bundled/format.h	/^  void grow(std::size_t size) FMT_OVERRIDE;$/;"	m	class:basic_memory_buffer
FMT_POSIX	include/spdlog/fmt/bundled/posix.h	/^#  define FMT_POSIX(/;"	d
FMT_POSIX_CALL	include/spdlog/fmt/bundled/posix.h	/^#  define FMT_POSIX_CALL(/;"	d
FMT_POSIX_CALL	include/spdlog/fmt/bundled/posix.h	/^# define FMT_POSIX_CALL(/;"	d
FMT_POSIX_H_	include/spdlog/fmt/bundled/posix.h	/^#define FMT_POSIX_H_$/;"	d
FMT_POWERS_OF_10	include/spdlog/fmt/bundled/format-inl.h	/^#define FMT_POWERS_OF_10(/;"	d
FMT_PRINTF_H_	include/spdlog/fmt/bundled/printf.h	/^#define FMT_PRINTF_H_$/;"	d
FMT_RANGES_H_	include/spdlog/fmt/bundled/ranges.h	/^#define FMT_RANGES_H_$/;"	d
FMT_RANGE_OUTPUT_LENGTH_LIMIT	include/spdlog/fmt/bundled/ranges.h	/^# define FMT_RANGE_OUTPUT_LENGTH_LIMIT /;"	d
FMT_RETRY	include/spdlog/fmt/bundled/posix.h	/^#define FMT_RETRY(/;"	d
FMT_RETRY_VAL	include/spdlog/fmt/bundled/posix.h	/^# define FMT_RETRY_VAL(/;"	d
FMT_SECURE_SCL	include/spdlog/fmt/bundled/format.h	/^# define FMT_SECURE_SCL /;"	d
FMT_SNPRINTF	include/spdlog/fmt/bundled/format-inl.h	/^# define FMT_SNPRINTF /;"	d
FMT_STRING	include/spdlog/fmt/bundled/format.h	/^#define FMT_STRING(/;"	d
FMT_STRING_VIEW	include/spdlog/fmt/bundled/core.h	/^# define FMT_STRING_VIEW /;"	d
FMT_SWPRINTF	include/spdlog/fmt/bundled/format-inl.h	/^# define FMT_SWPRINTF /;"	d
FMT_SYSTEM	include/spdlog/fmt/bundled/posix.h	/^# define FMT_SYSTEM(/;"	d
FMT_THROW	include/spdlog/fmt/bundled/format.h	/^#   define FMT_THROW(/;"	d
FMT_TIME_H_	include/spdlog/fmt/bundled/time.h	/^#define FMT_TIME_H_$/;"	d
FMT_TRY	include/spdlog/fmt/bundled/format-inl.h	/^# define FMT_TRY /;"	d
FMT_UDL_TEMPLATE	include/spdlog/fmt/bundled/format.h	/^# define FMT_UDL_TEMPLATE /;"	d
FMT_USE_ALIAS_TEMPLATES	include/spdlog/fmt/bundled/core.h	/^# define FMT_USE_ALIAS_TEMPLATES /;"	d
FMT_USE_CONSTEXPR	include/spdlog/fmt/bundled/core.h	/^# define FMT_USE_CONSTEXPR /;"	d
FMT_USE_CONSTEXPR11	include/spdlog/fmt/bundled/core.h	/^# define FMT_USE_CONSTEXPR11 /;"	d
FMT_USE_EXPLICIT	include/spdlog/fmt/bundled/core.h	/^# define FMT_USE_EXPLICIT /;"	d
FMT_USE_EXTERN_TEMPLATES	include/spdlog/fmt/bundled/format.h	/^#  define FMT_USE_EXTERN_TEMPLATES /;"	d
FMT_USE_GRISU	include/spdlog/fmt/bundled/format.h	/^# define FMT_USE_GRISU /;"	d
FMT_USE_NOEXCEPT	include/spdlog/fmt/bundled/core.h	/^# define FMT_USE_NOEXCEPT /;"	d
FMT_USE_NULLPTR	include/spdlog/fmt/bundled/core.h	/^#  define FMT_USE_NULLPTR /;"	d
FMT_USE_NULLPTR	include/spdlog/fmt/bundled/core.h	/^# define FMT_USE_NULLPTR /;"	d
FMT_USE_TRAILING_RETURN	include/spdlog/fmt/bundled/format.h	/^# define FMT_USE_TRAILING_RETURN /;"	d
FMT_USE_USER_DEFINED_LITERALS	include/spdlog/fmt/bundled/format.h	/^#  define FMT_USE_USER_DEFINED_LITERALS /;"	d
FMT_USE_WINDOWS_H	include/spdlog/fmt/bundled/format.h	/^# define FMT_USE_WINDOWS_H /;"	d
FMT_USE_WINDOWS_H	include/spdlog/fmt/fmt.h	/^#define FMT_USE_WINDOWS_H /;"	d
FMT_VERSION	include/spdlog/fmt/bundled/core.h	/^#define FMT_VERSION /;"	d
FOREGROUND_COLOR	include/spdlog/fmt/bundled/format-inl.h	/^template <typename T> const char basic_data<T>::FOREGROUND_COLOR[] = "\\x1b[38;2;";$/;"	m	class:internal::basic_data
F_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit F_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
FormatFunc	include/spdlog/fmt/bundled/format-inl.h	/^typedef void (*FormatFunc)(internal::buffer &, int, string_view);$/;"	t	namespace:__anon1
GREEN	include/spdlog/sinks/wincolor_sink.h	/^    const WORD GREEN = FOREGROUND_GREEN;$/;"	m	class:spdlog::sinks::wincolor_sink
HASH_FLAG	include/spdlog/fmt/bundled/format.h	/^enum { SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8 };$/;"	e	enum:__anon9
H_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit H_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
INCLUDE	makefile	/^INCLUDE := include$/;"	m
INDEX	include/spdlog/fmt/bundled/format.h	/^  enum Kind { NONE, INDEX, NAME };$/;"	e	enum:internal::arg_ref::Kind
INF_SIZE	include/spdlog/fmt/bundled/format.h	/^  enum {INF_SIZE = 3}; \/\/ This is an enum to workaround a bug in MSVC.$/;"	e	enum:basic_writer::__anon14
I_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit I_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
Kind	include/spdlog/fmt/bundled/format.h	/^  enum Kind { NONE, INDEX, NAME };$/;"	g	struct:internal::arg_ref
LC_NUMERIC_MASK	include/spdlog/fmt/bundled/posix.h	/^  enum { LC_NUMERIC_MASK = LC_NUMERIC };$/;"	e	enum:Locale::__anon5
LIB	makefile	/^LIB := lib$/;"	m
LIBRARIES	makefile	/^LIBRARIES := -lconfig++ -lzmq$/;"	m
Locale	include/spdlog/fmt/bundled/posix.h	/^  Locale() : locale_(newlocale(LC_NUMERIC_MASK, "C", FMT_NULL)) {$/;"	f	class:Locale
Locale	include/spdlog/fmt/bundled/posix.h	/^class Locale {$/;"	c
MINUS_FLAG	include/spdlog/fmt/bundled/format.h	/^enum { SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8 };$/;"	e	enum:__anon9
M_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit M_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
NAME	include/spdlog/fmt/bundled/format.h	/^  enum Kind { NONE, INDEX, NAME };$/;"	e	enum:internal::arg_ref::Kind
NOMINMAX	include/spdlog/details/console_globals.h	/^#define NOMINMAX /;"	d
NOMINMAX	include/spdlog/details/os.h	/^#define NOMINMAX /;"	d
NOMINMAX	include/spdlog/fmt/bundled/format-inl.h	/^#  define NOMINMAX$/;"	d
NOMINMAX	include/spdlog/fmt/bundled/format-inl.h	/^#  undef NOMINMAX$/;"	d
NONE	include/spdlog/fmt/bundled/format.h	/^  enum Kind { NONE, INDEX, NAME };$/;"	e	enum:internal::arg_ref::Kind
NUM_ARGS	include/spdlog/fmt/bundled/core.h	/^  static const size_t NUM_ARGS = sizeof...(Args);$/;"	m	class:format_arg_store
NUM_ARGS	include/spdlog/fmt/bundled/format.h	/^  enum { NUM_ARGS = sizeof...(Args) };$/;"	e	enum:internal::format_string_checker::__anon12
PLUS_FLAG	include/spdlog/fmt/bundled/format.h	/^enum { SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8 };$/;"	e	enum:__anon9
POW10_EXPONENTS	include/spdlog/fmt/bundled/format-inl.h	/^const int16_t basic_data<T>::POW10_EXPONENTS[] = {$/;"	m	class:internal::basic_data
POW10_SIGNIFICANDS	include/spdlog/fmt/bundled/format-inl.h	/^const uint64_t basic_data<T>::POW10_SIGNIFICANDS[] = {$/;"	m	class:internal::basic_data
POWERS_OF_10_32	include/spdlog/fmt/bundled/format-inl.h	/^const uint32_t basic_data<T>::POWERS_OF_10_32[] = {$/;"	m	class:internal::basic_data
RDONLY	include/spdlog/fmt/bundled/posix.h	/^    RDONLY = FMT_POSIX(O_RDONLY), \/\/ Open for reading only.$/;"	e	enum:file::__anon4
RDWR	include/spdlog/fmt/bundled/posix.h	/^    RDWR   = FMT_POSIX(O_RDWR)    \/\/ Open for reading and writing.$/;"	e	enum:file::__anon4
RED	include/spdlog/sinks/wincolor_sink.h	/^    const WORD RED = FOREGROUND_RED;$/;"	m	class:spdlog::sinks::wincolor_sink
RESET_COLOR	include/spdlog/fmt/bundled/format-inl.h	/^template <typename T> const char basic_data<T>::RESET_COLOR[] = "\\x1b[0m";$/;"	m	class:internal::basic_data
R_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit R_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
SEP_SIZE	include/spdlog/fmt/bundled/format.h	/^    enum { SEP_SIZE = 1 };$/;"	e	enum:basic_writer::int_writer::__anon13
SIGN_FLAG	include/spdlog/fmt/bundled/format.h	/^enum { SIGN_FLAG = 1, PLUS_FLAG = 2, MINUS_FLAG = 4, HASH_FLAG = 8 };$/;"	e	enum:__anon9
SPDLOG_ACTIVE_LEVEL	include/spdlog/common.h	/^#define SPDLOG_ACTIVE_LEVEL /;"	d
SPDLOG_ANDROID_RETRIES	include/spdlog/sinks/android_sink.h	/^#define SPDLOG_ANDROID_RETRIES /;"	d
SPDLOG_CATCH_AND_HANDLE	include/spdlog/details/logger_impl.h	/^#define SPDLOG_CATCH_AND_HANDLE /;"	d
SPDLOG_CONSTEXPR	include/spdlog/common.h	/^#define SPDLOG_CONSTEXPR /;"	d
SPDLOG_CONSTEXPR	include/spdlog/common.h	/^#define SPDLOG_CONSTEXPR$/;"	d
SPDLOG_CRITICAL	include/spdlog/spdlog.h	/^#define SPDLOG_CRITICAL(/;"	d
SPDLOG_DEBUG	include/spdlog/spdlog.h	/^#define SPDLOG_DEBUG(/;"	d
SPDLOG_DEPRECATED	include/spdlog/common.h	/^#define SPDLOG_DEPRECATED /;"	d
SPDLOG_DEPRECATED	include/spdlog/common.h	/^#define SPDLOG_DEPRECATED$/;"	d
SPDLOG_EOL	include/spdlog/details/os.h	/^#define SPDLOG_EOL /;"	d
SPDLOG_ERROR	include/spdlog/spdlog.h	/^#define SPDLOG_ERROR(/;"	d
SPDLOG_FILENAME_T	include/spdlog/details/os.h	/^#define SPDLOG_FILENAME_T(/;"	d
SPDLOG_FILE_BASENAME	include/spdlog/common.h	/^#define SPDLOG_FILE_BASENAME(/;"	d
SPDLOG_FUNCTION	include/spdlog/common.h	/^#define SPDLOG_FUNCTION /;"	d
SPDLOG_H	include/spdlog/spdlog.h	/^#define SPDLOG_H$/;"	d
SPDLOG_INFO	include/spdlog/spdlog.h	/^#define SPDLOG_INFO(/;"	d
SPDLOG_LEVEL_CRITICAL	include/spdlog/common.h	/^#define SPDLOG_LEVEL_CRITICAL /;"	d
SPDLOG_LEVEL_DEBUG	include/spdlog/common.h	/^#define SPDLOG_LEVEL_DEBUG /;"	d
SPDLOG_LEVEL_ERROR	include/spdlog/common.h	/^#define SPDLOG_LEVEL_ERROR /;"	d
SPDLOG_LEVEL_INFO	include/spdlog/common.h	/^#define SPDLOG_LEVEL_INFO /;"	d
SPDLOG_LEVEL_NAMES	include/spdlog/common.h	/^#define SPDLOG_LEVEL_NAMES /;"	d
SPDLOG_LEVEL_NAMES	include/spdlog/common.h	/^static string_view_t level_string_views[] SPDLOG_LEVEL_NAMES;$/;"	m	namespace:spdlog::level
SPDLOG_LEVEL_OFF	include/spdlog/common.h	/^#define SPDLOG_LEVEL_OFF /;"	d
SPDLOG_LEVEL_TRACE	include/spdlog/common.h	/^#define SPDLOG_LEVEL_TRACE /;"	d
SPDLOG_LEVEL_WARN	include/spdlog/common.h	/^#define SPDLOG_LEVEL_WARN /;"	d
SPDLOG_LOGGER_CALL	include/spdlog/spdlog.h	/^#define SPDLOG_LOGGER_CALL(/;"	d
SPDLOG_LOGGER_CRITICAL	include/spdlog/spdlog.h	/^#define SPDLOG_LOGGER_CRITICAL(/;"	d
SPDLOG_LOGGER_DEBUG	include/spdlog/spdlog.h	/^#define SPDLOG_LOGGER_DEBUG(/;"	d
SPDLOG_LOGGER_ERROR	include/spdlog/spdlog.h	/^#define SPDLOG_LOGGER_ERROR(/;"	d
SPDLOG_LOGGER_INFO	include/spdlog/spdlog.h	/^#define SPDLOG_LOGGER_INFO(/;"	d
SPDLOG_LOGGER_TRACE	include/spdlog/spdlog.h	/^#define SPDLOG_LOGGER_TRACE(/;"	d
SPDLOG_LOGGER_WARN	include/spdlog/spdlog.h	/^#define SPDLOG_LOGGER_WARN(/;"	d
SPDLOG_NOEXCEPT	include/spdlog/common.h	/^#define SPDLOG_NOEXCEPT /;"	d
SPDLOG_NOEXCEPT	include/spdlog/details/thread_pool.h	/^    async_msg(async_msg &&other) SPDLOG_NOEXCEPT : msg_type(other.msg_type),$/;"	m	struct:spdlog::details::async_msg
SPDLOG_NO_TLS	include/spdlog/common.h	/^#define SPDLOG_NO_TLS /;"	d
SPDLOG_SHORT_LEVEL_NAMES	include/spdlog/common.h	/^#define SPDLOG_SHORT_LEVEL_NAMES /;"	d
SPDLOG_SHORT_LEVEL_NAMES	include/spdlog/common.h	/^static const char *short_level_names[] SPDLOG_SHORT_LEVEL_NAMES;$/;"	m	namespace:spdlog::level
SPDLOG_STRRCHR	include/spdlog/common.h	/^#define SPDLOG_STRRCHR(/;"	d
SPDLOG_TRACE	include/spdlog/spdlog.h	/^#define SPDLOG_TRACE(/;"	d
SPDLOG_VERSION	include/spdlog/version.h	/^#define SPDLOG_VERSION /;"	d
SPDLOG_VER_MAJOR	include/spdlog/version.h	/^#define SPDLOG_VER_MAJOR /;"	d
SPDLOG_VER_MINOR	include/spdlog/version.h	/^#define SPDLOG_VER_MINOR /;"	d
SPDLOG_VER_PATCH	include/spdlog/version.h	/^#define SPDLOG_VER_PATCH /;"	d
SPDLOG_WARN	include/spdlog/spdlog.h	/^#define SPDLOG_WARN(/;"	d
SRC	makefile	/^SRC	:= src$/;"	m
S_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit S_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
Socket_handler	include/socket_handler.hpp	/^class Socket_handler {$/;"	c
Socket_handler	src/socket_handler.cpp	/^Socket_handler::Socket_handler() {$/;"	f	class:Socket_handler
T_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit T_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
Type	include/spdlog/fmt/bundled/posix.h	/^  typedef locale_t Type;$/;"	t	class:Locale
WHITE	include/spdlog/sinks/wincolor_sink.h	/^    const WORD WHITE = FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE;$/;"	m	class:spdlog::sinks::wincolor_sink
WIN32_LEAN_AND_MEAN	include/spdlog/details/console_globals.h	/^#define WIN32_LEAN_AND_MEAN$/;"	d
WIN32_LEAN_AND_MEAN	include/spdlog/details/os.h	/^#define WIN32_LEAN_AND_MEAN$/;"	d
WIN32_LEAN_AND_MEAN	include/spdlog/fmt/bundled/format-inl.h	/^#  define WIN32_LEAN_AND_MEAN$/;"	d
WRESET_COLOR	include/spdlog/fmt/bundled/format-inl.h	/^template <typename T> const wchar_t basic_data<T>::WRESET_COLOR[] = L"\\x1b[0m";$/;"	m	class:internal::basic_data
WRONLY	include/spdlog/fmt/bundled/posix.h	/^    WRONLY = FMT_POSIX(O_WRONLY), \/\/ Open for writing only.$/;"	e	enum:file::__anon4
YELLOW	include/spdlog/sinks/wincolor_sink.h	/^    const WORD YELLOW = FOREGROUND_RED | FOREGROUND_GREEN;$/;"	m	class:spdlog::sinks::wincolor_sink
Y_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit Y_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
ZERO_OR_POWERS_OF_10_32	include/spdlog/fmt/bundled/format-inl.h	/^const uint32_t basic_data<T>::ZERO_OR_POWERS_OF_10_32[] = {$/;"	m	class:internal::basic_data
ZERO_OR_POWERS_OF_10_64	include/spdlog/fmt/bundled/format-inl.h	/^const uint64_t basic_data<T>::ZERO_OR_POWERS_OF_10_64[] = {$/;"	m	class:internal::basic_data
_Unchecked_type	include/spdlog/fmt/bundled/format.h	/^  typedef counting_iterator _Unchecked_type;  \/\/ Mark iterator as checked.$/;"	t	class:internal::counting_iterator
_Unchecked_type	include/spdlog/fmt/bundled/format.h	/^  typedef truncating_iterator_base _Unchecked_type; \/\/ Mark iterator as checked.$/;"	t	class:internal::truncating_iterator_base
__STRICT_ANSI__	include/spdlog/fmt/bundled/posix.h	/^# undef __STRICT_ANSI__$/;"	d
__has_feature	include/spdlog/details/os.h	/^#define __has_feature(/;"	d
_a	include/spdlog/fmt/bundled/format.h	/^operator"" _a(const char *s, std::size_t) { return {s}; }$/;"	f	namespace:literals
_a	include/spdlog/fmt/bundled/format.h	/^operator"" _a(const wchar_t *s, std::size_t) { return {s}; }$/;"	f	namespace:literals
_filename	include/spdlog/details/file_helper.h	/^    filename_t _filename;$/;"	m	class:spdlog::details::file_helper
_finite	include/spdlog/fmt/bundled/format.h	/^inline dummy_int _finite(...) { return dummy_int(); }$/;"	f	namespace:internal
_format	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR internal::udl_formatter<Char, CHARS...> operator""_format() {$/;"	f	namespace:literals
_isnan	include/spdlog/fmt/bundled/format.h	/^inline dummy_int _isnan(...) { return dummy_int(); }$/;"	f	namespace:internal
_u	include/spdlog/fmt/bundled/format.h	/^inline u8string_view operator"" _u(const char *s, std::size_t n) {$/;"	f	namespace:literals
a_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit a_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::a_formatter
a_formatter	include/spdlog/details/pattern_formatter.h	/^class a_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
abs_value	include/spdlog/fmt/bundled/format.h	/^      unsigned_type abs_value;$/;"	m	struct:basic_writer::int_writer::bin_writer
abs_value	include/spdlog/fmt/bundled/format.h	/^      unsigned_type abs_value;$/;"	m	struct:basic_writer::int_writer::dec_writer
abs_value	include/spdlog/fmt/bundled/format.h	/^      unsigned_type abs_value;$/;"	m	struct:basic_writer::int_writer::num_writer
abs_value	include/spdlog/fmt/bundled/format.h	/^    unsigned_type abs_value;$/;"	m	struct:basic_writer::int_writer
active_	include/spdlog/details/periodic_worker.h	/^    bool active_;$/;"	m	class:spdlog::details::periodic_worker
add_ch	include/spdlog/details/pattern_formatter.h	/^    void add_ch(char ch)$/;"	f	class:spdlog::details::final
add_delimiter_spaces	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_delimiter_spaces = true;$/;"	m	struct:formatting_range
add_delimiter_spaces	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_delimiter_spaces = true;$/;"	m	struct:formatting_tuple
add_prepostfix_space	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_prepostfix_space = false;$/;"	m	struct:formatting_range
add_prepostfix_space	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool add_prepostfix_space = false;$/;"	m	struct:formatting_tuple
add_sink	include/spdlog/sinks/dist_sink.h	/^    void add_sink(std::shared_ptr<sink> sink)$/;"	f	class:spdlog::sinks::dist_sink
add_thousands_sep	include/spdlog/fmt/bundled/format.h	/^  explicit add_thousands_sep(basic_string_view<Char> sep)$/;"	f	class:internal::add_thousands_sep
add_thousands_sep	include/spdlog/fmt/bundled/format.h	/^class add_thousands_sep {$/;"	c	namespace:internal
advance_to	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void advance_to(iterator it) {$/;"	f	class:basic_parse_context
advance_to	include/spdlog/fmt/bundled/core.h	/^  void advance_to(iterator it) { out_ = it; }$/;"	f	class:internal::context_base
align	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR alignment align() const { return align_; }$/;"	f	struct:align_spec
align_	include/spdlog/fmt/bundled/format.h	/^  alignment align_;$/;"	m	struct:align_spec
align_spec	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR align_spec() : width_(0), fill_(' '), align_(ALIGN_DEFAULT) {}$/;"	f	struct:align_spec
align_spec	include/spdlog/fmt/bundled/format.h	/^struct align_spec {$/;"	s
alignment	include/spdlog/fmt/bundled/format.h	/^enum alignment {$/;"	g
allocate	include/spdlog/fmt/bundled/format.h	/^typename Allocator::value_type *allocate(Allocator& alloc, std::size_t n) {$/;"	f	namespace:internal
ampm	include/spdlog/details/pattern_formatter.h	/^static const char *ampm(const tm &t)$/;"	f	namespace:spdlog::details
android_logger_mt	include/spdlog/sinks/android_sink.h	/^inline std::shared_ptr<logger> android_logger_mt(const std::string &logger_name, const std::string &tag = "spdlog")$/;"	f	namespace:spdlog
android_logger_st	include/spdlog/sinks/android_sink.h	/^inline std::shared_ptr<logger> android_logger_st(const std::string &logger_name, const std::string &tag = "spdlog")$/;"	f	namespace:spdlog
android_sink	include/spdlog/sinks/android_sink.h	/^    explicit android_sink(std::string tag = "spdlog", bool use_raw_msg = false)$/;"	f	class:spdlog::sinks::final
ansicolor_sink	include/spdlog/sinks/ansicolor_sink.h	/^    ansicolor_sink()$/;"	f	class:spdlog::sinks::final
append	include/spdlog/fmt/bundled/format-inl.h	/^  void append(char c) { data[size++] = c; }$/;"	f	struct:internal::prettify_handler
append	include/spdlog/fmt/bundled/format-inl.h	/^  void append(char) { ++size; }$/;"	f	struct:internal::char_counter
append	include/spdlog/fmt/bundled/format-inl.h	/^  void append(ptrdiff_t n, char c) {$/;"	f	struct:internal::prettify_handler
append	include/spdlog/fmt/bundled/format-inl.h	/^  void append(ptrdiff_t n, char) { size += n; }$/;"	f	struct:internal::char_counter
append	include/spdlog/fmt/bundled/format.h	/^void basic_buffer<T>::append(const U *begin, const U *end) {$/;"	f	class:internal::basic_buffer
append_buf	include/spdlog/details/fmt_helper.h	/^inline void append_buf(const fmt::basic_memory_buffer<char, Buffer_Size1> &buf, fmt::basic_memory_buffer<char, Buffer_Size2> &dest)$/;"	f	namespace:spdlog::details::fmt_helper
append_int	include/spdlog/details/fmt_helper.h	/^inline void append_int(T n, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper
append_string_view	include/spdlog/details/fmt_helper.h	/^inline void append_string_view(spdlog::string_view_t view, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper
apply_all	include/spdlog/details/registry.h	/^    void apply_all(const std::function<void(const std::shared_ptr<logger>)> &fun)$/;"	f	class:spdlog::details::registry
apply_all	include/spdlog/spdlog.h	/^inline void apply_all(const std::function<void(std::shared_ptr<logger>)> &fun)$/;"	f	namespace:spdlog
arg	include/spdlog/fmt/bundled/core.h	/^    basic_format_arg<Context> arg;$/;"	m	struct:internal::arg_map::entry
arg	include/spdlog/fmt/bundled/core.h	/^  basic_format_arg<Context> arg(unsigned id) const { return args_.get(id); }$/;"	f	class:internal::context_base
arg	include/spdlog/fmt/bundled/format.h	/^  basic_format_arg<Context> arg;$/;"	m	struct:format_handler
arg_	include/spdlog/fmt/bundled/printf.h	/^  basic_format_arg<Context> &arg_;$/;"	m	class:internal::arg_converter
arg_	include/spdlog/fmt/bundled/printf.h	/^  basic_format_arg<Context> &arg_;$/;"	m	class:internal::char_converter
arg_converter	include/spdlog/fmt/bundled/printf.h	/^  arg_converter(basic_format_arg<Context> &arg, Char type)$/;"	f	class:internal::arg_converter
arg_converter	include/spdlog/fmt/bundled/printf.h	/^class arg_converter: public function<void> {$/;"	c	namespace:internal
arg_formatter	include/spdlog/fmt/bundled/format.h	/^  arg_formatter(context_type &ctx, format_specs &spec)$/;"	f	class:arg_formatter
arg_formatter	include/spdlog/fmt/bundled/format.h	/^  explicit arg_formatter(context_type &ctx, format_specs *spec = FMT_NULL)$/;"	f	class:arg_formatter
arg_formatter	include/spdlog/fmt/bundled/format.h	/^class arg_formatter:$/;"	c
arg_formatter_base	include/spdlog/fmt/bundled/format.h	/^  arg_formatter_base(Range r, format_specs *s, locale_ref loc)$/;"	f	class:internal::arg_formatter_base
arg_formatter_base	include/spdlog/fmt/bundled/format.h	/^class arg_formatter_base {$/;"	c	namespace:internal
arg_id_	include/spdlog/fmt/bundled/format.h	/^  unsigned arg_id_;$/;"	m	class:internal::format_string_checker
arg_join	include/spdlog/fmt/bundled/format.h	/^  arg_join(It begin, It end, basic_string_view<Char> sep)$/;"	f	struct:arg_join
arg_join	include/spdlog/fmt/bundled/format.h	/^struct arg_join {$/;"	s
arg_map	include/spdlog/fmt/bundled/core.h	/^  arg_map() : map_(FMT_NULL), size_(0) {}$/;"	f	class:internal::arg_map
arg_map	include/spdlog/fmt/bundled/core.h	/^class arg_map {$/;"	c	namespace:internal
arg_ref	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR arg_ref() : kind(NONE), index(0) {}$/;"	f	struct:internal::arg_ref
arg_ref	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR explicit arg_ref(unsigned index) : kind(INDEX), index(index) {}$/;"	f	struct:internal::arg_ref
arg_ref	include/spdlog/fmt/bundled/format.h	/^  explicit arg_ref(basic_string_view<Char> nm) : kind(NAME) {$/;"	f	struct:internal::arg_ref
arg_ref	include/spdlog/fmt/bundled/format.h	/^struct arg_ref {$/;"	s	namespace:internal
arg_ref_type	include/spdlog/fmt/bundled/chrono.h	/^    typedef internal::arg_ref<Char> arg_ref_type;$/;"	t	struct:formatter::spec_handler
arg_ref_type	include/spdlog/fmt/bundled/format.h	/^  typedef arg_ref<char_type> arg_ref_type;$/;"	t	class:internal::dynamic_specs_handler
arg_type_	include/spdlog/fmt/bundled/format.h	/^  internal::type arg_type_;$/;"	m	class:internal::specs_checker
args	include/spdlog/fmt/bundled/core.h	/^  basic_format_args<Context> args() const { return args_; } \/\/ DEPRECATED!$/;"	f	class:internal::context_base
args_	include/spdlog/fmt/bundled/core.h	/^  basic_format_args<Context> args_;$/;"	m	class:internal::context_base
as_named_arg	include/spdlog/fmt/bundled/core.h	/^  const named_arg_base<char_type> &as_named_arg() {$/;"	f	class:internal::value
async_factory_impl	include/spdlog/async.h	/^struct async_factory_impl$/;"	s	namespace:spdlog
async_logger	include/spdlog/details/async_logger_impl.h	/^inline spdlog::async_logger::async_logger($/;"	f	class:spdlog::async_logger
async_msg	include/spdlog/details/thread_pool.h	/^    async_msg(async_logger_ptr &&worker, async_msg_type the_type)$/;"	f	struct:spdlog::details::async_msg
async_msg	include/spdlog/details/thread_pool.h	/^    async_msg(async_logger_ptr &&worker, async_msg_type the_type, details::log_msg &m)$/;"	f	struct:spdlog::details::async_msg
async_msg	include/spdlog/details/thread_pool.h	/^    explicit async_msg(async_msg_type the_type)$/;"	f	struct:spdlog::details::async_msg
async_msg	include/spdlog/details/thread_pool.h	/^struct async_msg$/;"	s	namespace:spdlog::details
async_msg_type	include/spdlog/details/thread_pool.h	/^enum class async_msg_type$/;"	c	namespace:spdlog::details
async_overflow_policy	include/spdlog/async_logger.h	/^enum class async_overflow_policy$/;"	c	namespace:spdlog
auto_id	include/spdlog/fmt/bundled/format.h	/^struct auto_id {};$/;"	s	namespace:internal
automatic_registration_	include/spdlog/details/registry.h	/^    bool automatic_registration_ = true;$/;"	m	class:spdlog::details::registry
b_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit b_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::b_formatter
b_formatter	include/spdlog/details/pattern_formatter.h	/^class b_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
back_insert_range	include/spdlog/fmt/bundled/format.h	/^  back_insert_range(Container &c): base(std::back_inserter(c)) {}$/;"	f	class:back_insert_range
back_insert_range	include/spdlog/fmt/bundled/format.h	/^  back_insert_range(typename base::iterator it): base(it) {}$/;"	f	class:back_insert_range
back_insert_range	include/spdlog/fmt/bundled/format.h	/^class back_insert_range:$/;"	c
backend_flush_	include/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::backend_flush_()$/;"	f	class:spdlog::async_logger
backend_log_	include/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::backend_log_(const details::log_msg &incoming_log_msg)$/;"	f	class:spdlog::async_logger
base	include/spdlog/fmt/bundled/core.h	/^  typedef internal::context_base<OutputIt, basic_format_context, Char> base;$/;"	t	class:basic_format_context
base	include/spdlog/fmt/bundled/format.h	/^  OutputIt base() const { return out_; }$/;"	f	class:internal::truncating_iterator_base
base	include/spdlog/fmt/bundled/format.h	/^  typedef internal::arg_formatter_base<Range> base;$/;"	t	class:arg_formatter
base	include/spdlog/fmt/bundled/format.h	/^  typedef output_range<std::back_insert_iterator<Container>> base;$/;"	t	class:back_insert_range
base	include/spdlog/fmt/bundled/printf.h	/^  typedef internal::arg_formatter_base<Range> base;$/;"	t	class:printf_arg_formatter
base	include/spdlog/fmt/bundled/printf.h	/^  typedef internal::context_base<OutputIt, basic_printf_context, Char> base;$/;"	t	class:basic_printf_context
base_filename_	include/spdlog/sinks/daily_file_sink.h	/^    filename_t base_filename_;$/;"	m	class:spdlog::sinks::final
base_filename_	include/spdlog/sinks/rotating_file_sink.h	/^    filename_t base_filename_;$/;"	m	class:spdlog::sinks::final
base_sink	include/spdlog/sinks/base_sink.h	/^class base_sink : public sink$/;"	c	namespace:spdlog::sinks
basic_buffer	include/spdlog/fmt/bundled/core.h	/^class basic_buffer {$/;"	c	namespace:internal
basic_cstring_view	include/spdlog/fmt/bundled/posix.h	/^  basic_cstring_view(const Char *s) : data_(s) {}$/;"	f	class:basic_cstring_view
basic_cstring_view	include/spdlog/fmt/bundled/posix.h	/^  basic_cstring_view(const std::basic_string<Char> &s) : data_(s.c_str()) {}$/;"	f	class:basic_cstring_view
basic_cstring_view	include/spdlog/fmt/bundled/posix.h	/^class basic_cstring_view {$/;"	c
basic_file_sink	include/spdlog/sinks/basic_file_sink.h	/^    explicit basic_file_sink(const filename_t &filename, bool truncate = false)$/;"	f	class:spdlog::sinks::final
basic_format_arg	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR basic_format_arg() : type_(internal::none_type) {}$/;"	f	class:basic_format_arg
basic_format_arg	include/spdlog/fmt/bundled/core.h	/^class basic_format_arg {$/;"	c
basic_format_context	include/spdlog/fmt/bundled/core.h	/^  basic_format_context(OutputIt out, basic_string_view<char_type> format_str,$/;"	f	class:basic_format_context
basic_format_context	include/spdlog/fmt/bundled/core.h	/^class basic_format_context :$/;"	c
basic_format_specs	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR basic_format_specs() {}$/;"	f	struct:basic_format_specs
basic_format_specs	include/spdlog/fmt/bundled/format.h	/^struct basic_format_specs : align_spec, core_format_specs {$/;"	s
basic_logger_mt	include/spdlog/sinks/basic_file_sink.h	/^inline std::shared_ptr<logger> basic_logger_mt(const std::string &logger_name, const filename_t &filename, bool truncate = false)$/;"	f	namespace:spdlog
basic_logger_st	include/spdlog/sinks/basic_file_sink.h	/^inline std::shared_ptr<logger> basic_logger_st(const std::string &logger_name, const filename_t &filename, bool truncate = false)$/;"	f	namespace:spdlog
basic_memory_buffer	include/spdlog/fmt/bundled/format.h	/^  basic_memory_buffer(basic_memory_buffer &&other) {$/;"	f	class:basic_memory_buffer
basic_memory_buffer	include/spdlog/fmt/bundled/format.h	/^  explicit basic_memory_buffer(const Allocator &alloc = Allocator())$/;"	f	class:basic_memory_buffer
basic_memory_buffer	include/spdlog/fmt/bundled/format.h	/^class basic_memory_buffer: private Allocator, public internal::basic_buffer<T> {$/;"	c
basic_parse_context	include/spdlog/fmt/bundled/core.h	/^  explicit FMT_CONSTEXPR basic_parse_context($/;"	f	class:basic_parse_context
basic_parse_context	include/spdlog/fmt/bundled/core.h	/^class basic_parse_context : private ErrorHandler {$/;"	c
basic_printf_context	include/spdlog/fmt/bundled/printf.h	/^  basic_printf_context(OutputIt out, basic_string_view<char_type> format_str,$/;"	f	class:basic_printf_context
basic_printf_context	include/spdlog/fmt/bundled/printf.h	/^class basic_printf_context :$/;"	c
basic_printf_context_t	include/spdlog/fmt/bundled/printf.h	/^struct basic_printf_context_t {$/;"	s
basic_string_view	include/spdlog/fmt/bundled/core.h	/^  basic_string_view(const Char *s)$/;"	f	class:basic_string_view
basic_string_view	include/spdlog/fmt/bundled/core.h	/^class basic_string_view {$/;"	c
basic_writer	include/spdlog/fmt/bundled/format.h	/^  explicit basic_writer($/;"	f	class:basic_writer
basic_writer	include/spdlog/fmt/bundled/format.h	/^class basic_writer {$/;"	c
begin	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR iterator begin() const { return data_; }$/;"	f	class:basic_string_view
begin	include/spdlog/fmt/bundled/core.h	/^  iterator begin() { return out_; }  \/\/ deprecated$/;"	f	class:internal::context_base
begin	include/spdlog/fmt/bundled/format.h	/^  It begin;$/;"	m	struct:arg_join
begin	include/spdlog/fmt/bundled/format.h	/^  OutputIt begin() const { return it_; }$/;"	f	class:output_range
bin_writer	include/spdlog/fmt/bundled/format.h	/^    struct bin_writer {$/;"	s	struct:basic_writer::int_writer
bit_cast	include/spdlog/fmt/bundled/format.h	/^inline Dest bit_cast(const Source& source) {$/;"	f	namespace:internal
black	include/spdlog/fmt/bundled/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	e	enum:color
black	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string black = "\\033[30m";$/;"	m	class:spdlog::sinks::final
blackhole_	include/spdlog/fmt/bundled/format.h	/^  mutable T blackhole_;$/;"	m	class:internal::counting_iterator
blackhole_	include/spdlog/fmt/bundled/format.h	/^  mutable typename traits::value_type blackhole_;$/;"	m	class:internal::truncating_iterator
blink	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string blink = "\\033[5m";$/;"	m	class:spdlog::sinks::final
block	include/spdlog/async_logger.h	/^    block,         \/\/ Block until message can be enqueued$/;"	m	class:spdlog::async_overflow_policy
blue	include/spdlog/fmt/bundled/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	e	enum:color
blue	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string blue = "\\033[34m";$/;"	m	class:spdlog::sinks::final
bold	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string bold = "\\033[1m";$/;"	m	class:spdlog::sinks::final
bool_type	include/spdlog/fmt/bundled/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
buf	include/spdlog/fmt/bundled/format-inl.h	/^  buffer &buf;$/;"	m	struct:internal::prettify_handler
buffer	include/spdlog/fmt/bundled/core.h	/^typedef basic_buffer<char> buffer;$/;"	t	namespace:internal
buffer	include/spdlog/fmt/bundled/format.h	/^    internal::buffer &buffer;$/;"	m	struct:basic_writer::double_writer
buffer_	include/spdlog/fmt/bundled/format.h	/^  char *buffer_;$/;"	m	class:internal::decimal_formatter
buffer_	include/spdlog/fmt/bundled/format.h	/^  memory_buffer buffer_;$/;"	m	class:internal::utf16_to_utf8
buffer_	include/spdlog/fmt/bundled/format.h	/^  mutable char buffer_[BUFFER_SIZE];$/;"	m	class:format_int
buffer_	include/spdlog/fmt/bundled/format.h	/^  wmemory_buffer buffer_;$/;"	m	class:internal::utf8_to_utf16
buffer_	include/spdlog/fmt/bundled/ostream.h	/^  basic_buffer<Char> &buffer_;$/;"	m	class:internal::formatbuf
buffer_context	include/spdlog/fmt/bundled/core.h	/^struct buffer_context {$/;"	s
buffered_file	include/spdlog/fmt/bundled/posix.h	/^  explicit buffered_file(FILE *f) : file_(f) {}$/;"	f	class:buffered_file
buffered_file	include/spdlog/fmt/bundled/posix.h	/^class buffered_file {$/;"	c
build_frame	src/cpu_temp_reader.cpp	/^cpu_temp_frame_t Cpu_temp_reader::build_frame(std::string data) {$/;"	f	class:Cpu_temp_reader
c_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit c_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
c_str	include/spdlog/fmt/bundled/format.h	/^  const char *c_str() const { return &buffer_[0]; }$/;"	f	class:internal::utf16_to_utf8
c_str	include/spdlog/fmt/bundled/format.h	/^  const char *c_str() const {$/;"	f	class:format_int
c_str	include/spdlog/fmt/bundled/format.h	/^  const wchar_t *c_str() const { return &buffer_[0]; }$/;"	f	class:internal::utf8_to_utf16
c_str	include/spdlog/fmt/bundled/posix.h	/^  const Char *c_str() const { return data_; }$/;"	f	class:basic_cstring_view
cache_refresh	include/spdlog/details/pattern_formatter.h	/^    const std::chrono::seconds cache_refresh = std::chrono::seconds(5);$/;"	m	class:spdlog::details::final
cached_datetime_	include/spdlog/details/pattern_formatter.h	/^    fmt::basic_memory_buffer<char, 128> cached_datetime_;$/;"	m	class:spdlog::details::final
cached_tm_	include/spdlog/details/pattern_formatter.h	/^    std::tm cached_tm_;$/;"	m	class:spdlog::final
calc_filename	include/spdlog/sinks/daily_file_sink.h	/^    static filename_t calc_filename(const filename_t &filename, const tm &now_tm)$/;"	f	struct:spdlog::sinks::daily_filename_calculator
calc_filename	include/spdlog/sinks/rotating_file_sink.h	/^    static filename_t calc_filename(const filename_t &filename, std::size_t index)$/;"	f	class:spdlog::sinks::final
capacity_	include/spdlog/fmt/bundled/core.h	/^    FMT_NOEXCEPT: ptr_(p), size_(sz), capacity_(cap) {}$/;"	f	class:internal::basic_buffer
capacity_	include/spdlog/fmt/bundled/core.h	/^  basic_buffer(std::size_t sz) FMT_NOEXCEPT: size_(sz), capacity_(sz) {}$/;"	f	class:internal::basic_buffer
capacity_	include/spdlog/fmt/bundled/core.h	/^  std::size_t capacity_;$/;"	m	class:internal::basic_buffer
center	include/spdlog/details/pattern_formatter.h	/^        center$/;"	e	enum:spdlog::details::padding_info::pad_side
ch_	include/spdlog/details/pattern_formatter.h	/^    char ch_;$/;"	m	class:spdlog::details::final
ch_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit ch_formatter(char ch)$/;"	f	class:spdlog::details::final
char_converter	include/spdlog/fmt/bundled/printf.h	/^  explicit char_converter(basic_format_arg<Context> &arg) : arg_(arg) {}$/;"	f	class:internal::char_converter
char_converter	include/spdlog/fmt/bundled/printf.h	/^class char_converter: public function<void> {$/;"	c	namespace:internal
char_counter	include/spdlog/fmt/bundled/format-inl.h	/^struct char_counter {$/;"	s	namespace:internal
char_size	include/spdlog/fmt/bundled/format-inl.h	/^  static FMT_CONSTEXPR_DECL const int char_size =$/;"	m	class:internal::fp
char_spec_handler	include/spdlog/fmt/bundled/format.h	/^    char_spec_handler(arg_formatter_base& f, char_type val)$/;"	f	struct:internal::arg_formatter_base::char_spec_handler
char_spec_handler	include/spdlog/fmt/bundled/format.h	/^  struct char_spec_handler : internal::error_handler {$/;"	s	class:internal::arg_formatter_base
char_specs_checker	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR char_specs_checker(char type, ErrorHandler eh)$/;"	f	class:internal::char_specs_checker
char_specs_checker	include/spdlog/fmt/bundled/format.h	/^class char_specs_checker : public ErrorHandler {$/;"	c	namespace:internal
char_t	include/spdlog/fmt/bundled/core.h	/^struct char_t {$/;"	s	namespace:internal
char_traits	include/spdlog/fmt/bundled/format.h	/^struct char_traits<char> {$/;"	s	namespace:internal
char_traits	include/spdlog/fmt/bundled/format.h	/^struct char_traits<wchar_t> {$/;"	s	namespace:internal
char_type	include/spdlog/fmt/bundled/chrono.h	/^  typedef typename FormatContext::char_type char_type;$/;"	t	struct:internal::chrono_formatter
char_type	include/spdlog/fmt/bundled/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
char_type	include/spdlog/fmt/bundled/core.h	/^  typedef Char char_type;$/;"	t	class:basic_format_context
char_type	include/spdlog/fmt/bundled/core.h	/^  typedef Char char_type;$/;"	t	class:basic_parse_context
char_type	include/spdlog/fmt/bundled/core.h	/^  typedef Char char_type;$/;"	t	class:basic_string_view
char_type	include/spdlog/fmt/bundled/core.h	/^  typedef Char char_type;$/;"	t	class:internal::context_base
char_type	include/spdlog/fmt/bundled/core.h	/^  typedef typename Context::char_type char_type;$/;"	t	class:basic_format_arg
char_type	include/spdlog/fmt/bundled/core.h	/^  typedef typename Context::char_type char_type;$/;"	t	class:internal::arg_map
char_type	include/spdlog/fmt/bundled/core.h	/^  typedef typename Context::char_type char_type;$/;"	t	class:internal::value
char_type	include/spdlog/fmt/bundled/core.h	/^struct dummy_string_view { typedef void char_type; };$/;"	t	struct:internal::dummy_string_view
char_type	include/spdlog/fmt/bundled/format.h	/^  typedef Char char_type;$/;"	t	class:internal::add_thousands_sep
char_type	include/spdlog/fmt/bundled/format.h	/^  typedef char char_type;$/;"	t	struct:internal::no_thousands_sep
char_type	include/spdlog/fmt/bundled/format.h	/^  typedef char8_t char_type;$/;"	t	class:u8string_view
char_type	include/spdlog/fmt/bundled/format.h	/^  typedef typename Context::char_type char_type;$/;"	t	class:internal::specs_handler
char_type	include/spdlog/fmt/bundled/format.h	/^  typedef typename ParseContext::char_type char_type;$/;"	t	class:internal::dynamic_specs_handler
char_type	include/spdlog/fmt/bundled/format.h	/^  typedef typename Range::value_type char_type;$/;"	t	class:arg_formatter
char_type	include/spdlog/fmt/bundled/format.h	/^  typedef typename Range::value_type char_type;$/;"	t	class:basic_writer
char_type	include/spdlog/fmt/bundled/format.h	/^  typedef typename Range::value_type char_type;$/;"	t	class:internal::arg_formatter_base
char_type	include/spdlog/fmt/bundled/printf.h	/^  typedef Char char_type;$/;"	t	class:basic_printf_context
char_type	include/spdlog/fmt/bundled/printf.h	/^  typedef typename Range::value_type char_type;$/;"	t	class:printf_arg_formatter
char_writer	include/spdlog/fmt/bundled/format.h	/^  struct char_writer {$/;"	s	class:internal::arg_formatter_base
check_arg_id	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR bool check_arg_id(unsigned) {$/;"	f	class:basic_parse_context
check_arg_id	include/spdlog/fmt/bundled/core.h	/^  void check_arg_id(basic_string_view<Char>) {}$/;"	f	class:basic_parse_context
check_arg_id	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void check_arg_id() {$/;"	f	class:internal::format_string_checker
check_format_string	include/spdlog/fmt/bundled/format.h	/^    check_format_string(S format_str) {$/;"	f	namespace:internal
check_pointer_type_spec	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void check_pointer_type_spec(Char spec, ErrorHandler &&eh) {$/;"	f	namespace:internal
check_sign	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void check_sign() {$/;"	f	class:internal::specs_checker
check_string_type_spec	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void check_string_type_spec(Char spec, ErrorHandler &&eh) {$/;"	f	namespace:internal
checked	include/spdlog/fmt/bundled/format.h	/^struct checked { typedef stdext::checked_array_iterator<T*> type; };$/;"	s	namespace:internal
chrono_format_checker	include/spdlog/fmt/bundled/chrono.h	/^struct chrono_format_checker {$/;"	s	namespace:internal
chrono_formatter	include/spdlog/fmt/bundled/chrono.h	/^  explicit chrono_formatter(FormatContext &ctx, OutputIt o)$/;"	f	struct:internal::chrono_formatter
chrono_formatter	include/spdlog/fmt/bundled/chrono.h	/^struct chrono_formatter {$/;"	s	namespace:internal
circular_q	include/spdlog/details/circular_q.h	/^    explicit circular_q(size_t max_items)$/;"	f	class:spdlog::details::circular_q
circular_q	include/spdlog/details/circular_q.h	/^class circular_q$/;"	c	namespace:spdlog::details
clear	include/spdlog/fmt/bundled/core.h	/^  void clear() { size_ = 0; }$/;"	f	class:internal::basic_buffer
clear_line	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string clear_line = "\\033[K";$/;"	m	class:spdlog::sinks::final
clone	include/spdlog/details/async_logger_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::async_logger::clone(std::string new_name)$/;"	f	class:spdlog::async_logger
clone	include/spdlog/details/logger_impl.h	/^inline std::shared_ptr<spdlog::logger> spdlog::logger::clone(std::string logger_name)$/;"	f	class:spdlog::logger
close	include/spdlog/details/file_helper.h	/^    void close()$/;"	f	class:spdlog::details::file_helper
clz	include/spdlog/fmt/bundled/format.h	/^inline uint32_t clz(uint32_t x) {$/;"	f	namespace:internal
clzll	include/spdlog/fmt/bundled/format.h	/^inline uint32_t clzll(uint64_t x) {$/;"	f	namespace:internal
color	include/spdlog/fmt/bundled/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	g
color_start_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit color_start_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
color_stop_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit color_stop_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
colors_	include/spdlog/sinks/ansicolor_sink.h	/^    std::unordered_map<level::level_enum, std::string, level::level_hasher> colors_;$/;"	m	class:spdlog::sinks::final
colors_	include/spdlog/sinks/wincolor_sink.h	/^    std::unordered_map<level::level_enum, WORD, level::level_hasher> colors_;$/;"	m	class:spdlog::sinks::wincolor_sink
compare	include/spdlog/fmt/bundled/core.h	/^  int compare(basic_string_view other) const {$/;"	f	class:basic_string_view
compile_pattern_	include/spdlog/details/pattern_formatter.h	/^    void compile_pattern_(const std::string &pattern)$/;"	f	class:spdlog::final
compile_string	include/spdlog/fmt/bundled/core.h	/^struct compile_string {};$/;"	s
compute_boundaries	include/spdlog/fmt/bundled/format-inl.h	/^  void compute_boundaries(fp &lower, fp &upper) const {$/;"	f	class:internal::fp
concealed	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string concealed = "\\033[8m";$/;"	m	class:spdlog::sinks::final
conditional	include/spdlog/fmt/bundled/format.h	/^  typedef typename std::conditional<$/;"	t	class:internal::int_traits::std
conditional_helper	include/spdlog/fmt/bundled/ranges.h	/^struct conditional_helper {};$/;"	s	namespace:internal
config_error	include/socket_handler.hpp	/^		config_error(const char* what_arg) : std::runtime_error(what_arg) {}$/;"	f	class:config_error
config_error	include/socket_handler.hpp	/^class config_error : public std::runtime_error {$/;"	c
console_mutex	include/spdlog/details/console_globals.h	/^struct console_mutex$/;"	s	namespace:spdlog::details
console_nullmutex	include/spdlog/details/console_globals.h	/^struct console_nullmutex$/;"	s	namespace:spdlog::details
console_stderr	include/spdlog/details/console_globals.h	/^struct console_stderr$/;"	s	namespace:spdlog::details
console_stdout	include/spdlog/details/console_globals.h	/^struct console_stdout$/;"	s	namespace:spdlog::details
const_check	include/spdlog/fmt/bundled/format.h	/^inline T const_check(T value) { return value; }$/;"	f	namespace:internal
const_reference	include/spdlog/fmt/bundled/core.h	/^  typedef const T &const_reference;$/;"	t	class:internal::basic_buffer
const_reference	include/spdlog/fmt/bundled/format.h	/^  typedef const T &const_reference;$/;"	t	class:basic_memory_buffer
container_	include/spdlog/fmt/bundled/core.h	/^  Container &container_;$/;"	m	class:internal::container_buffer
container_buffer	include/spdlog/fmt/bundled/core.h	/^  explicit container_buffer(Container &c)$/;"	f	class:internal::container_buffer
container_buffer	include/spdlog/fmt/bundled/core.h	/^class container_buffer : public basic_buffer<typename Container::value_type> {$/;"	c	namespace:internal
context	include/socket_handler.hpp	/^		zmq::context_t context;$/;"	m	class:Socket_handler
context	include/spdlog/fmt/bundled/chrono.h	/^    basic_parse_context<Char> &context;$/;"	m	struct:formatter::spec_handler
context	include/spdlog/fmt/bundled/chrono.h	/^  FormatContext &context;$/;"	m	struct:internal::chrono_formatter
context	include/spdlog/fmt/bundled/format.h	/^  Context context;$/;"	m	struct:format_handler
context_	include/spdlog/fmt/bundled/format.h	/^  Context &context_;$/;"	m	class:internal::specs_handler
context_	include/spdlog/fmt/bundled/format.h	/^  ParseContext &context_;$/;"	m	class:internal::dynamic_specs_handler
context_	include/spdlog/fmt/bundled/format.h	/^  parse_context_type context_;$/;"	m	class:internal::format_string_checker
context_	include/spdlog/fmt/bundled/printf.h	/^  context_type &context_;$/;"	m	class:printf_arg_formatter
context_base	include/spdlog/fmt/bundled/core.h	/^  context_base(OutputIt out, basic_string_view<char_type> format_str,$/;"	f	class:internal::context_base
context_base	include/spdlog/fmt/bundled/core.h	/^class context_base {$/;"	c	namespace:internal
context_type	include/spdlog/fmt/bundled/format.h	/^  typedef basic_format_context<typename base::iterator, char_type> context_type;$/;"	t	class:arg_formatter
context_type	include/spdlog/fmt/bundled/printf.h	/^  typedef basic_printf_context<iterator, char_type> context_type;$/;"	t	class:printf_arg_formatter
convert	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC int internal::utf16_to_utf8::convert(wstring_view s) {$/;"	f	class:internal::utf16_to_utf8
convert_arg	include/spdlog/fmt/bundled/printf.h	/^void convert_arg(basic_format_arg<Context> &arg, Char type) {$/;"	f	namespace:internal
convert_to_android_	include/spdlog/sinks/android_sink.h	/^    static android_LogPriority convert_to_android_(spdlog::level::level_enum level)$/;"	f	class:spdlog::sinks::final
convert_to_int	include/spdlog/fmt/bundled/core.h	/^struct convert_to_int: std::integral_constant<$/;"	s
convert_to_int	include/spdlog/fmt/bundled/ostream.h	/^struct convert_to_int<T, Char, void> {$/;"	s
copy	include/spdlog/fmt/bundled/ranges.h	/^void copy(char ch, OutputIterator out) {$/;"	f	namespace:internal
copy	include/spdlog/fmt/bundled/ranges.h	/^void copy(const RangeT &range, OutputIterator out) {$/;"	f	namespace:internal
copy	include/spdlog/fmt/bundled/ranges.h	/^void copy(const char *str, OutputIterator out) {$/;"	f	namespace:internal
copy_str	include/spdlog/fmt/bundled/format.h	/^    copy_str(InputIt begin, InputIt end, OutputIt it) {$/;"	f	namespace:internal
core_format_specs	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR core_format_specs() : precision(-1), flags(0), type(0) {}$/;"	f	struct:core_format_specs
core_format_specs	include/spdlog/fmt/bundled/format.h	/^struct core_format_specs {$/;"	s
count	include/spdlog/fmt/bundled/format.h	/^  std::size_t count() const { return count_; }$/;"	f	class:internal::counting_iterator
count	include/spdlog/fmt/bundled/format.h	/^  std::size_t count() const { return count_; }$/;"	f	class:internal::truncating_iterator_base
count_	include/spdlog/fmt/bundled/format.h	/^  std::size_t count_;$/;"	m	class:internal::counting_iterator
count_	include/spdlog/fmt/bundled/format.h	/^  std::size_t count_;$/;"	m	class:internal::truncating_iterator_base
count_code_points	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC size_t internal::count_code_points(basic_string_view<char8_t> s) {$/;"	f	class:internal
count_code_points	include/spdlog/fmt/bundled/format.h	/^inline size_t count_code_points(basic_string_view<Char> s) { return s.size(); }$/;"	f	namespace:internal
count_digits	include/spdlog/details/fmt_helper.h	/^inline unsigned count_digits(T n)$/;"	f	namespace:spdlog::details::fmt_helper
count_digits	include/spdlog/fmt/bundled/format.h	/^    int count_digits() const {$/;"	f	struct:basic_writer::int_writer
count_digits	include/spdlog/fmt/bundled/format.h	/^inline int count_digits(uint32_t n) {$/;"	f	namespace:internal
counting_iterator	include/spdlog/fmt/bundled/format.h	/^  counting_iterator(): count_(0) {}$/;"	f	class:internal::counting_iterator
counting_iterator	include/spdlog/fmt/bundled/format.h	/^class counting_iterator {$/;"	c	namespace:internal
cpu_temp	include/cpu_temp_frame.hpp	/^  static const std::string cpu_temp = "cpu_temp";$/;"	m	namespace:frame_topic
cpu_temp_file	include/cpu_temp_reader.hpp	/^		std::ifstream cpu_temp_file;$/;"	m	class:Cpu_temp_reader
cpu_temp_frame_t	include/cpu_temp_frame.hpp	/^  cpu_temp_frame_t($/;"	f	struct:cpu_temp_frame_t
cpu_temp_frame_t	include/cpu_temp_frame.hpp	/^  cpu_temp_frame_t() {}$/;"	f	struct:cpu_temp_frame_t
cpu_temp_frame_t	include/cpu_temp_frame.hpp	/^struct cpu_temp_frame_t {$/;"	s
cpu_temp_reader	include/application.hpp	/^	Cpu_temp_reader* cpu_temp_reader;$/;"	m	class:Application
create	include/spdlog/async.h	/^    static std::shared_ptr<async_logger> create(std::string logger_name, SinkArgs &&... args)$/;"	f	struct:spdlog::async_factory_impl
create	include/spdlog/spdlog.h	/^    static std::shared_ptr<spdlog::logger> create(std::string logger_name, SinkArgs &&... args)$/;"	f	struct:spdlog::synchronous_factory
create	include/spdlog/spdlog.h	/^inline std::shared_ptr<spdlog::logger> create(std::string logger_name, SinkArgs &&... sink_args)$/;"	f	namespace:spdlog
create_async	include/spdlog/async.h	/^inline std::shared_ptr<spdlog::logger> create_async(std::string logger_name, SinkArgs &&... sink_args)$/;"	f	namespace:spdlog
create_async_nb	include/spdlog/async.h	/^inline std::shared_ptr<spdlog::logger> create_async_nb(std::string logger_name, SinkArgs &&... sink_args)$/;"	f	namespace:spdlog
critical	include/spdlog/common.h	/^    critical = SPDLOG_LEVEL_CRITICAL,$/;"	e	enum:spdlog::level::level_enum
critical	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical(const T &msg)$/;"	f	class:spdlog::logger
critical	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical(const char *fmt, const Args &... args)$/;"	f	class:spdlog::logger
critical	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::critical(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger
critical	include/spdlog/spdlog.h	/^inline void critical(const T &msg)$/;"	f	namespace:spdlog
critical	include/spdlog/spdlog.h	/^inline void critical(const char *fmt, const Args &... args)$/;"	f	namespace:spdlog
critical	include/spdlog/spdlog.h	/^inline void critical(const wchar_t *fmt, const Args &... args)$/;"	f	namespace:spdlog
cstring_spec_handler	include/spdlog/fmt/bundled/format.h	/^    cstring_spec_handler(arg_formatter_base &f, const char_type *val)$/;"	f	struct:internal::arg_formatter_base::cstring_spec_handler
cstring_spec_handler	include/spdlog/fmt/bundled/format.h	/^  struct cstring_spec_handler : internal::error_handler {$/;"	s	class:internal::arg_formatter_base
cstring_type	include/spdlog/fmt/bundled/core.h	/^  cstring_type, string_type, pointer_type, custom_type$/;"	e	enum:internal::type
cstring_type_checker	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR explicit cstring_type_checker(ErrorHandler eh)$/;"	f	class:internal::cstring_type_checker
cstring_type_checker	include/spdlog/fmt/bundled/format.h	/^class cstring_type_checker : public ErrorHandler {$/;"	c	namespace:internal
cstring_view	include/spdlog/fmt/bundled/posix.h	/^typedef basic_cstring_view<char> cstring_view;$/;"	t
ctx_	include/spdlog/fmt/bundled/format.h	/^  Context &ctx_;$/;"	m	class:internal::custom_formatter
ctx_	include/spdlog/fmt/bundled/format.h	/^  context_type &ctx_;$/;"	m	class:arg_formatter
current_size_	include/spdlog/sinks/rotating_file_sink.h	/^    std::size_t current_size_;$/;"	m	class:spdlog::sinks::final
custom	include/spdlog/fmt/bundled/core.h	/^    custom_value<Context> custom;$/;"	m	union:internal::value::__anon2
custom_	include/spdlog/fmt/bundled/core.h	/^    internal::custom_value<Context> custom_;$/;"	m	class:basic_format_arg::handle
custom_formatter	include/spdlog/fmt/bundled/format.h	/^  explicit custom_formatter(Context &ctx): ctx_(ctx) {}$/;"	f	class:internal::custom_formatter
custom_formatter	include/spdlog/fmt/bundled/format.h	/^class custom_formatter: public function<bool> {$/;"	c	namespace:internal
custom_type	include/spdlog/fmt/bundled/core.h	/^  cstring_type, string_type, pointer_type, custom_type$/;"	e	enum:internal::type
custom_value	include/spdlog/fmt/bundled/core.h	/^struct custom_value {$/;"	s	namespace:internal
cv_	include/spdlog/details/periodic_worker.h	/^    std::condition_variable cv_;$/;"	m	class:spdlog::details::periodic_worker
cyan	include/spdlog/fmt/bundled/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	e	enum:color
cyan	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string cyan = "\\033[36m";$/;"	m	class:spdlog::sinks::final
d_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit d_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
daily_file_sink	include/spdlog/sinks/daily_file_sink.h	/^    daily_file_sink(filename_t base_filename, int rotation_hour, int rotation_minute, bool truncate = false)$/;"	f	class:spdlog::sinks::final
daily_filename_calculator	include/spdlog/sinks/daily_file_sink.h	/^struct daily_filename_calculator$/;"	s	namespace:spdlog::sinks
daily_logger_mt	include/spdlog/sinks/daily_file_sink.h	/^inline std::shared_ptr<logger> daily_logger_mt($/;"	f	namespace:spdlog
daily_logger_st	include/spdlog/sinks/daily_file_sink.h	/^inline std::shared_ptr<logger> daily_logger_st($/;"	f	namespace:spdlog
dark	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string dark = "\\033[2m";$/;"	m	class:spdlog::sinks::final
data	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR const Char *data() const { return data_; }$/;"	f	class:basic_string_view
data	include/spdlog/fmt/bundled/format-inl.h	/^  char *data;$/;"	m	struct:internal::prettify_handler
data	include/spdlog/fmt/bundled/format.h	/^  const char *data() const { return str_; }$/;"	f	class:format_int
data	include/spdlog/fmt/bundled/format.h	/^  int data[2];$/;"	m	struct:internal::dummy_int
data_	include/spdlog/fmt/bundled/core.h	/^  const Char *data_;$/;"	m	class:basic_string_view
data_	include/spdlog/fmt/bundled/posix.h	/^  const Char *data_;$/;"	m	class:basic_cstring_view
deallocate	include/spdlog/fmt/bundled/format.h	/^  void deallocate() {$/;"	f	class:basic_memory_buffer
debug	include/spdlog/common.h	/^    debug = SPDLOG_LEVEL_DEBUG,$/;"	e	enum:spdlog::level::level_enum
debug	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug(const T &msg)$/;"	f	class:spdlog::logger
debug	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug(const char *fmt, const Args &... args)$/;"	f	class:spdlog::logger
debug	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::debug(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger
debug	include/spdlog/spdlog.h	/^inline void debug(const T &msg)$/;"	f	namespace:spdlog
debug	include/spdlog/spdlog.h	/^inline void debug(const char *fmt, const Args &... args)$/;"	f	namespace:spdlog
debug	include/spdlog/spdlog.h	/^inline void debug(const wchar_t *fmt, const Args &... args)$/;"	f	namespace:spdlog
dec_writer	include/spdlog/fmt/bundled/format.h	/^    struct dec_writer {$/;"	s	struct:basic_writer::int_writer
decimal_formatter	include/spdlog/fmt/bundled/format.h	/^  explicit decimal_formatter(char *buf) : buffer_(buf) {}$/;"	f	class:internal::decimal_formatter
decimal_formatter	include/spdlog/fmt/bundled/format.h	/^class decimal_formatter {$/;"	c	namespace:internal
decimal_formatter_null	include/spdlog/fmt/bundled/format.h	/^  explicit decimal_formatter_null(char *buf) : decimal_formatter(buf) {}$/;"	f	class:internal::decimal_formatter_null
decimal_formatter_null	include/spdlog/fmt/bundled/format.h	/^class decimal_formatter_null : public decimal_formatter {$/;"	c	namespace:internal
decltype	include/spdlog/fmt/bundled/chrono.h	/^      -> decltype(ctx.begin()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/chrono.h	/^      -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/format.h	/^      -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/format.h	/^  auto format(const T &val, FormatContext &ctx) -> decltype(ctx.out()) {$/;"	f	class:dynamic_formatter
decltype	include/spdlog/fmt/bundled/format.h	/^  auto format(const T &val, FormatContext &ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/format.h	/^  auto parse(ParseContext &ctx) -> decltype(ctx.begin()) {$/;"	f	class:dynamic_formatter
decltype	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto begin(const C &c) -> decltype(c.begin()) {$/;"	f	namespace:internal
decltype	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR auto end(const C &c) -> decltype(c.end()) { return c.end(); }$/;"	f	namespace:internal
decltype	include/spdlog/fmt/bundled/ostream.h	/^  auto format(const T &value, Context &ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/printf.h	/^  auto format(const T &value, FormatContext &ctx) -> decltype(ctx.out()) {$/;"	f	struct:printf_formatter
decltype	include/spdlog/fmt/bundled/printf.h	/^  auto parse(ParseContext &ctx) -> decltype(ctx.begin()) { return ctx.begin(); }$/;"	f	struct:printf_formatter
decltype	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR auto parse(ParseContext &ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/ranges.h	/^  FMT_CONSTEXPR auto parse(ParseContext &ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatting_base
decltype	include/spdlog/fmt/bundled/ranges.h	/^  auto format(const TupleT &values, FormatContext &ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/time.h	/^  auto format(const std::tm &tm, FormatContext &ctx) -> decltype(ctx.out()) {$/;"	f	struct:formatter
decltype	include/spdlog/fmt/bundled/time.h	/^  auto parse(ParseContext &ctx) -> decltype(ctx.begin()) {$/;"	f	struct:formatter
default_async_q_size	include/spdlog/async.h	/^static const size_t default_async_q_size = 8192;$/;"	m	namespace:spdlog::details
default_eol	include/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const char *default_eol = SPDLOG_EOL;$/;"	m	namespace:spdlog::details::os
default_err_handler_	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::default_err_handler_(const std::string &msg)$/;"	f	class:spdlog::logger
default_level	include/spdlog/details/logger_impl.h	/^inline spdlog::level::level_enum spdlog::logger::default_level()$/;"	f	class:spdlog::logger
default_logger	include/spdlog/details/registry.h	/^    std::shared_ptr<logger> default_logger()$/;"	f	class:spdlog::details::registry
default_logger	include/spdlog/spdlog.h	/^inline std::shared_ptr<spdlog::logger> default_logger()$/;"	f	namespace:spdlog
default_logger_	include/spdlog/details/registry.h	/^    std::shared_ptr<logger> default_logger_;$/;"	m	class:spdlog::details::registry
default_logger_raw	include/spdlog/spdlog.h	/^inline spdlog::logger *default_logger_raw()$/;"	f	namespace:spdlog
delimiter	include/spdlog/fmt/bundled/ranges.h	/^  Char delimiter;$/;"	m	struct:formatting_range
delimiter	include/spdlog/fmt/bundled/ranges.h	/^  Char delimiter;$/;"	m	struct:formatting_tuple
dequeue_for	include/spdlog/details/mpmc_blocking_q.h	/^    bool dequeue_for(T &popped_item, std::chrono::milliseconds wait_duration)$/;"	f	class:spdlog::details::mpmc_blocking_queue
dest_	include/spdlog/details/pattern_formatter.h	/^    fmt::memory_buffer &dest_;$/;"	m	class:spdlog::details::scoped_pad
details	include/spdlog/async.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/async_logger.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/common.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/circular_q.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/console_globals.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/file_helper.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/fmt_helper.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/log_msg.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/mpmc_blocking_q.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/null_mutex.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/os.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/pattern_formatter.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/periodic_worker.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/registry.h	/^namespace details {$/;"	n	namespace:spdlog
details	include/spdlog/details/thread_pool.h	/^namespace details {$/;"	n	namespace:spdlog
difference_type	include/spdlog/fmt/bundled/format.h	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:internal::counting_iterator
difference_type	include/spdlog/fmt/bundled/format.h	/^  typedef void difference_type;$/;"	t	class:internal::truncating_iterator_base
difference_type	include/spdlog/fmt/bundled/printf.h	/^  typedef std::ptrdiff_t difference_type;$/;"	t	class:internal::null_terminating_iterator
digit_index_	include/spdlog/fmt/bundled/format.h	/^  unsigned digit_index_;$/;"	m	class:internal::add_thousands_sep
dist_sink	include/spdlog/sinks/dist_sink.h	/^class dist_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
do_check_format_string	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR bool do_check_format_string($/;"	f	namespace:internal
do_get_arg	include/spdlog/fmt/bundled/core.h	/^  format_arg do_get_arg(unsigned arg_id) {$/;"	f	class:internal::context_base
do_throw	include/spdlog/fmt/bundled/format.h	/^inline void do_throw(const Exception &x) {$/;"	f	namespace:internal
double_significand_size	include/spdlog/fmt/bundled/format-inl.h	/^  static FMT_CONSTEXPR_DECL const int double_significand_size =$/;"	m	class:internal::fp
double_type	include/spdlog/fmt/bundled/core.h	/^  double_type, long_double_type, last_numeric_type = long_double_type,$/;"	e	enum:internal::type
double_value	include/spdlog/fmt/bundled/core.h	/^    double double_value;$/;"	m	union:internal::value::__anon2
double_writer	include/spdlog/fmt/bundled/format.h	/^  struct double_writer {$/;"	s	class:basic_writer
drop	include/spdlog/details/registry.h	/^    void drop(const std::string &logger_name)$/;"	f	class:spdlog::details::registry
drop	include/spdlog/spdlog.h	/^inline void drop(const std::string &name)$/;"	f	namespace:spdlog
drop_all	include/spdlog/details/registry.h	/^    void drop_all()$/;"	f	class:spdlog::details::registry
drop_all	include/spdlog/spdlog.h	/^inline void drop_all()$/;"	f	namespace:spdlog
dummy_int	include/spdlog/fmt/bundled/format.h	/^struct dummy_int {$/;"	s	namespace:internal
dummy_string_view	include/spdlog/fmt/bundled/core.h	/^struct dummy_string_view { typedef void char_type; };$/;"	s	namespace:internal
duration	include/spdlog/fmt/bundled/chrono.h	/^  typedef std::chrono::duration<Rep, Period> duration;$/;"	t	struct:formatter
dynamic_format_specs	include/spdlog/fmt/bundled/format.h	/^struct dynamic_format_specs : basic_format_specs<Char> {$/;"	s	namespace:internal
dynamic_formatter	include/spdlog/fmt/bundled/format.h	/^class dynamic_formatter {$/;"	c
dynamic_specs_handler	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR dynamic_specs_handler($/;"	f	class:internal::dynamic_specs_handler
dynamic_specs_handler	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR dynamic_specs_handler(const dynamic_specs_handler &other)$/;"	f	class:internal::dynamic_specs_handler
dynamic_specs_handler	include/spdlog/fmt/bundled/format.h	/^class dynamic_specs_handler :$/;"	c	namespace:internal
e	include/spdlog/fmt/bundled/format-inl.h	/^  int e;$/;"	m	class:internal::fp
e_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit e_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
empty	include/spdlog/details/circular_q.h	/^    bool empty()$/;"	f	class:spdlog::details::circular_q
enabled	include/spdlog/details/pattern_formatter.h	/^    bool enabled() const$/;"	f	struct:spdlog::details::padding_info
end	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR iterator end() const { return data_ + size_; }$/;"	f	class:basic_string_view
end	include/spdlog/fmt/bundled/format.h	/^  It end;$/;"	m	struct:arg_join
end_	include/spdlog/fmt/bundled/printf.h	/^  const Char *end_;$/;"	m	class:internal::null_terminating_iterator
end_precision	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void end_precision() {$/;"	f	class:internal::specs_checker
end_precision	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void end_precision() {}$/;"	f	class:internal::specs_setter
enqueue	include/spdlog/details/mpmc_blocking_q.h	/^    void enqueue(T &&item)$/;"	f	class:spdlog::details::mpmc_blocking_queue
enqueue_nowait	include/spdlog/details/mpmc_blocking_q.h	/^    void enqueue_nowait(T &&item)$/;"	f	class:spdlog::details::mpmc_blocking_queue
entry	include/spdlog/fmt/bundled/core.h	/^  struct entry {$/;"	s	class:internal::arg_map
eol_	include/spdlog/details/pattern_formatter.h	/^    std::string eol_;$/;"	m	class:spdlog::final
err	include/spdlog/common.h	/^    err = SPDLOG_LEVEL_ERROR,$/;"	e	enum:spdlog::level::level_enum
err_handler_	include/spdlog/details/registry.h	/^    log_err_handler err_handler_;$/;"	m	class:spdlog::details::registry
error	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::error(const T &msg)$/;"	f	class:spdlog::logger
error	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::error(const char *fmt, const Args &... args)$/;"	f	class:spdlog::logger
error	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::error(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger
error	include/spdlog/spdlog.h	/^inline void error(const T &msg)$/;"	f	namespace:spdlog
error	include/spdlog/spdlog.h	/^inline void error(const char *fmt, const Args &... args)$/;"	f	namespace:spdlog
error	include/spdlog/spdlog.h	/^inline void error(const wchar_t *fmt, const Args &... args)$/;"	f	namespace:spdlog
error_code	include/spdlog/fmt/bundled/format.h	/^  int error_code() const { return error_code_; }$/;"	f	class:system_error
error_code	include/spdlog/fmt/bundled/posix.h	/^class error_code {$/;"	c
error_code_	include/spdlog/fmt/bundled/format.h	/^  int error_code_;$/;"	m	class:system_error
error_handler	include/spdlog/details/logger_impl.h	/^inline spdlog::log_err_handler spdlog::logger::error_handler() const$/;"	f	class:spdlog::logger
error_handler	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR ErrorHandler error_handler() const { return *this; }$/;"	f	class:basic_parse_context
error_handler	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR error_handler() {}$/;"	f	struct:internal::error_handler
error_handler	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR error_handler(const error_handler &) {}$/;"	f	struct:internal::error_handler
error_handler	include/spdlog/fmt/bundled/core.h	/^  internal::error_handler error_handler() {$/;"	f	class:internal::context_base
error_handler	include/spdlog/fmt/bundled/core.h	/^struct error_handler {$/;"	s	namespace:internal
exec	include/application.hpp	/^	int exec() {$/;"	f	class:Application
f	include/spdlog/fmt/bundled/chrono.h	/^    formatter &f;$/;"	m	struct:formatter::spec_handler
f	include/spdlog/fmt/bundled/format-inl.h	/^  significand_type f;$/;"	m	class:internal::fp
f	include/spdlog/fmt/bundled/format.h	/^    F f;$/;"	m	struct:basic_writer::padded_int_writer
f_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit f_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
fd_	include/spdlog/fmt/bundled/posix.h	/^  file(file &&other) FMT_NOEXCEPT : fd_(other.fd_) {$/;"	f	class:file
fd_	include/spdlog/fmt/bundled/posix.h	/^  int fd_;  \/\/ File descriptor.$/;"	m	class:file
file	include/spdlog/fmt/bundled/posix.h	/^  explicit file(int fd) : fd_(fd) {}$/;"	f	class:file
file	include/spdlog/fmt/bundled/posix.h	/^class file {$/;"	c
file_	include/spdlog/fmt/bundled/posix.h	/^  FILE *file_;$/;"	m	class:buffered_file
file_	include/spdlog/fmt/bundled/posix.h	/^  buffered_file() FMT_NOEXCEPT : file_(FMT_NULL) {}$/;"	f	class:buffered_file
file_	include/spdlog/fmt/bundled/posix.h	/^  buffered_file(buffered_file &&other) FMT_NOEXCEPT : file_(other.file_) {$/;"	f	class:buffered_file
file_	include/spdlog/sinks/stdout_sinks.h	/^    FILE *file_;$/;"	m	class:spdlog::sinks::final
file_exists	include/spdlog/details/file_helper.h	/^    static bool file_exists(const filename_t &fname)$/;"	f	class:spdlog::details::file_helper
file_helper	include/spdlog/details/file_helper.h	/^class file_helper$/;"	c	namespace:spdlog::details
file_helper_	include/spdlog/sinks/basic_file_sink.h	/^    details::file_helper file_helper_;$/;"	m	class:spdlog::sinks::final
file_helper_	include/spdlog/sinks/daily_file_sink.h	/^    details::file_helper file_helper_;$/;"	m	class:spdlog::sinks::final
file_helper_	include/spdlog/sinks/rotating_file_sink.h	/^    details::file_helper file_helper_;$/;"	m	class:spdlog::sinks::final
filename	include/spdlog/common.h	/^    const char *filename;$/;"	m	struct:spdlog::source_loc
filename	include/spdlog/details/file_helper.h	/^    const filename_t &filename() const$/;"	f	class:spdlog::details::file_helper
filename	include/spdlog/sinks/basic_file_sink.h	/^    const filename_t &filename() const$/;"	f	class:spdlog::sinks::final
filename	include/spdlog/sinks/daily_file_sink.h	/^    const filename_t &filename() const$/;"	f	class:spdlog::sinks::final
filename	include/spdlog/sinks/rotating_file_sink.h	/^    const filename_t &filename() const$/;"	f	class:spdlog::sinks::final
filename_to_str	include/spdlog/details/os.h	/^inline std::string filename_to_str(const filename_t &filename)$/;"	f	namespace:spdlog::details::os
filesize	include/spdlog/details/os.h	/^inline size_t filesize(FILE *f)$/;"	f	namespace:spdlog::details::os
fill	include/spdlog/fmt/bundled/format-inl.h	/^struct fill {$/;"	s	namespace:internal
fill	include/spdlog/fmt/bundled/format.h	/^    char_type fill;$/;"	m	struct:basic_writer::padded_int_writer
fill	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR wchar_t fill() const { return fill_; }$/;"	f	struct:align_spec
fill_	include/spdlog/fmt/bundled/format.h	/^  wchar_t fill_;$/;"	m	struct:align_spec
final	include/spdlog/async_logger.h	/^class async_logger final : public std::enable_shared_from_this<async_logger>, public logger$/;"	c	namespace:spdlog
final	include/spdlog/details/pattern_formatter.h	/^class C_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class D_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class E_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class F_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class H_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class I_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class M_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class R_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class S_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class T_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class Y_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class aggregate_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class c_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class ch_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class color_start_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class color_stop_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class d_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class e_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class f_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class full_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class i_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class m_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class p_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class pattern_formatter final : public formatter$/;"	c	namespace:spdlog
final	include/spdlog/details/pattern_formatter.h	/^class pid_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class r_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class source_filename_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class source_funcname_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class source_linenum_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class source_location_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class t_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class v_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/details/pattern_formatter.h	/^class z_formatter final : public flag_formatter$/;"	c	namespace:spdlog::details
final	include/spdlog/sinks/android_sink.h	/^class android_sink final : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
final	include/spdlog/sinks/ansicolor_sink.h	/^class ansicolor_sink final : public sink$/;"	c	namespace:spdlog::sinks
final	include/spdlog/sinks/basic_file_sink.h	/^class basic_file_sink final : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
final	include/spdlog/sinks/daily_file_sink.h	/^class daily_file_sink final : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
final	include/spdlog/sinks/ostream_sink.h	/^class ostream_sink final : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
final	include/spdlog/sinks/rotating_file_sink.h	/^class rotating_file_sink final : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
final	include/spdlog/sinks/stdout_sinks.h	/^class stdout_sink final : public sink$/;"	c	namespace:spdlog::sinks
find	include/spdlog/fmt/bundled/core.h	/^  basic_format_arg<Context> find(basic_string_view<char_type> name) const {$/;"	f	class:internal::arg_map
find	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR bool find(Ptr first, Ptr last, T value, Ptr &out) {$/;"	f	namespace:internal
find	include/spdlog/fmt/bundled/format.h	/^inline bool find<false, char>($/;"	f	namespace:internal
fits_in_int	include/spdlog/fmt/bundled/printf.h	/^  static bool fits_in_int(T value) {$/;"	f	struct:internal::int_checker
fits_in_int	include/spdlog/fmt/bundled/printf.h	/^  static bool fits_in_int(bool) { return true; }$/;"	f	struct:internal::int_checker
fits_in_int	include/spdlog/fmt/bundled/printf.h	/^  static bool fits_in_int(int) { return true; }$/;"	f	struct:internal::int_checker
fixed	include/spdlog/fmt/bundled/format-inl.h	/^  bool fixed;$/;"	m	struct:internal::gen_digits_params
flag_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit flag_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::flag_formatter
flag_formatter	include/spdlog/details/pattern_formatter.h	/^class flag_formatter$/;"	c	namespace:spdlog::details
flags	include/spdlog/fmt/bundled/format.h	/^  uint_least8_t flags;$/;"	m	struct:core_format_specs
float_spec_handler	include/spdlog/fmt/bundled/format.h	/^  explicit float_spec_handler(char t) : type(t), upper(false) {}$/;"	f	struct:float_spec_handler
float_spec_handler	include/spdlog/fmt/bundled/format.h	/^struct float_spec_handler {$/;"	s
float_type_checker	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR explicit float_type_checker(ErrorHandler eh)$/;"	f	class:internal::float_type_checker
float_type_checker	include/spdlog/fmt/bundled/format.h	/^class float_type_checker : private ErrorHandler {$/;"	c	namespace:internal
flush	include/spdlog/details/file_helper.h	/^    void flush()$/;"	f	class:spdlog::details::file_helper
flush	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::flush()$/;"	f	class:spdlog::logger
flush	include/spdlog/details/thread_pool.h	/^    flush,$/;"	m	class:spdlog::details::async_msg_type
flush_	include/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::flush_()$/;"	f	class:spdlog::async_logger
flush_	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::flush_()$/;"	f	class:spdlog::logger
flush_all	include/spdlog/details/registry.h	/^    void flush_all()$/;"	f	class:spdlog::details::registry
flush_every	include/spdlog/details/registry.h	/^    void flush_every(std::chrono::seconds interval)$/;"	f	class:spdlog::details::registry
flush_every	include/spdlog/spdlog.h	/^inline void flush_every(std::chrono::seconds interval)$/;"	f	namespace:spdlog
flush_level	include/spdlog/details/logger_impl.h	/^inline spdlog::level::level_enum spdlog::logger::flush_level() const$/;"	f	class:spdlog::logger
flush_level_	include/spdlog/details/registry.h	/^    level::level_enum flush_level_ = level::off;$/;"	m	class:spdlog::details::registry
flush_on	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::flush_on(level::level_enum log_level)$/;"	f	class:spdlog::logger
flush_on	include/spdlog/details/registry.h	/^    void flush_on(level::level_enum log_level)$/;"	f	class:spdlog::details::registry
flush_on	include/spdlog/spdlog.h	/^inline void flush_on(level::level_enum log_level)$/;"	f	namespace:spdlog
flusher_mutex_	include/spdlog/details/registry.h	/^    std::mutex logger_map_mutex_, flusher_mutex_;$/;"	m	class:spdlog::details::registry
fmt	include/spdlog/fmt/bundled/format.h	/^# define fmt(/;"	d
fmt_helper	include/spdlog/details/fmt_helper.h	/^namespace fmt_helper {$/;"	n	namespace:spdlog::details
folder_sep	include/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const char folder_sep = '\/';$/;"	m	namespace:spdlog::details::os
folder_sep	include/spdlog/details/os.h	/^SPDLOG_CONSTEXPR static const char folder_sep = '\\\\';$/;"	m	namespace:spdlog::details::os
fopen_s	include/spdlog/details/os.h	/^inline bool fopen_s(FILE **fp, const filename_t &filename, const filename_t &mode)$/;"	f	namespace:spdlog::details::os
for_each	include/spdlog/fmt/bundled/ranges.h	/^void for_each(Tuple &&tup, F &&f) {$/;"	f	namespace:internal
force_flush_	include/spdlog/sinks/ostream_sink.h	/^    bool force_flush_;$/;"	m	class:spdlog::sinks::final
format	include/spdlog/fmt/bundled/core.h	/^    void format(Context &ctx) const { custom_.format(custom_.value, ctx); }$/;"	f	class:basic_format_arg::handle
format	include/spdlog/fmt/bundled/core.h	/^  void (*format)(const void *arg, Context &ctx);$/;"	m	struct:internal::custom_value
format	include/spdlog/fmt/bundled/locale.h	/^inline std::basic_string<FMT_CHAR(S)> format($/;"	f
format	include/spdlog/fmt/bundled/printf.h	/^void basic_printf_context<OutputIt, Char, AF>::format() {$/;"	f	class:basic_printf_context
format	include/spdlog/fmt/bundled/ranges.h	/^  typename FormatContext::iterator format($/;"	f	struct:formatter
format_arg	include/spdlog/fmt/bundled/core.h	/^  typedef basic_format_arg<Context> format_arg;$/;"	t	class:internal::context_base
format_arg	include/spdlog/fmt/bundled/core.h	/^  typedef typename base::format_arg format_arg;$/;"	t	class:basic_format_context
format_arg	include/spdlog/fmt/bundled/printf.h	/^  typedef typename base::format_arg format_arg;$/;"	t	class:basic_printf_context
format_arg_store	include/spdlog/fmt/bundled/core.h	/^class format_arg_store {$/;"	c
format_args_t	include/spdlog/fmt/bundled/format.h	/^struct format_args_t {$/;"	s
format_context	include/spdlog/fmt/bundled/core.h	/^typedef buffer_context<char>::type format_context;$/;"	t
format_context_t	include/spdlog/fmt/bundled/format.h	/^struct format_context_t { typedef basic_format_context<OutputIt, Char> type; };$/;"	s
format_custom_arg	include/spdlog/fmt/bundled/core.h	/^  static void format_custom_arg(const void *arg, Context &ctx) {$/;"	f	class:internal::value
format_decimal	include/spdlog/fmt/bundled/format.h	/^  char *format_decimal(unsigned long long value) {$/;"	f	class:format_int
format_decimal	include/spdlog/fmt/bundled/format.h	/^inline Char *format_decimal(Char *buffer, UInt value, int num_digits,$/;"	f	namespace:internal
format_decimal	include/spdlog/fmt/bundled/format.h	/^inline It format_decimal(It out, UInt value, int num_digits) {$/;"	f	namespace:internal
format_decimal	include/spdlog/fmt/bundled/format.h	/^inline Iterator format_decimal($/;"	f	namespace:internal
format_decimal	include/spdlog/fmt/bundled/format.h	/^inline void format_decimal(char *&buffer, T value) {$/;"	f
format_each	include/spdlog/fmt/bundled/ranges.h	/^  struct format_each {$/;"	s	struct:formatter
format_error	include/spdlog/fmt/bundled/format.h	/^  explicit format_error(const char *message)$/;"	f	class:format_error
format_error	include/spdlog/fmt/bundled/format.h	/^  explicit format_error(const std::string &message)$/;"	f	class:format_error
format_error	include/spdlog/fmt/bundled/format.h	/^class format_error : public std::runtime_error {$/;"	c
format_float	include/spdlog/fmt/bundled/format-inl.h	/^int char_traits<char>::format_float($/;"	f	class:internal::char_traits
format_float	include/spdlog/fmt/bundled/format-inl.h	/^int char_traits<wchar_t>::format_float($/;"	f	class:internal::char_traits
format_handler	include/spdlog/fmt/bundled/format.h	/^  format_handler(range r, basic_string_view<Char> str,$/;"	f	struct:format_handler
format_handler	include/spdlog/fmt/bundled/format.h	/^struct format_handler : internal::error_handler {$/;"	s
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(int value) { format_signed(value); }$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(long long value) { format_signed(value); }$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(long value) { format_signed(value); }$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(unsigned long long value) : str_(format_decimal(value)) {}$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(unsigned long value) : str_(format_decimal(value)) {}$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^  explicit format_int(unsigned value) : str_(format_decimal(value)) {}$/;"	f	class:format_int
format_int	include/spdlog/fmt/bundled/format.h	/^class format_int {$/;"	c
format_localized	include/spdlog/fmt/bundled/chrono.h	/^  void format_localized(const tm &time, const char *format) {$/;"	f	struct:internal::chrono_formatter
format_parse_context	include/spdlog/fmt/bundled/core.h	/^typedef basic_parse_context<char> format_parse_context;$/;"	t
format_signed	include/spdlog/fmt/bundled/format.h	/^  void format_signed(long long value) {$/;"	f	class:format_int
format_specs	include/spdlog/fmt/bundled/format.h	/^  typedef basic_format_specs<char_type> format_specs;$/;"	t	class:basic_writer
format_specs	include/spdlog/fmt/bundled/format.h	/^  typedef basic_format_specs<char_type> format_specs;$/;"	t	class:internal::arg_formatter_base
format_specs	include/spdlog/fmt/bundled/format.h	/^  typedef typename base::format_specs format_specs;$/;"	t	class:arg_formatter
format_specs	include/spdlog/fmt/bundled/format.h	/^typedef basic_format_specs<char> format_specs;$/;"	t
format_specs	include/spdlog/fmt/bundled/printf.h	/^  typedef basic_format_specs<Char> format_specs;$/;"	t	class:internal::printf_width_handler
format_specs	include/spdlog/fmt/bundled/printf.h	/^  typedef basic_format_specs<char_type> format_specs;$/;"	t	class:basic_printf_context
format_specs	include/spdlog/fmt/bundled/printf.h	/^  typedef typename base::format_specs format_specs;$/;"	t	class:printf_arg_formatter
format_str	include/spdlog/fmt/bundled/chrono.h	/^  mutable basic_string_view<Char> format_str;$/;"	m	struct:formatter
format_str_	include/spdlog/fmt/bundled/core.h	/^  basic_string_view<Char> format_str_;$/;"	m	class:basic_parse_context
format_str_quoted	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const char* format_str_quoted(bool add_space, const Arg&, $/;"	f	namespace:internal
format_str_quoted	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const char* format_str_quoted(bool add_space, const char) {$/;"	f	namespace:internal
format_str_quoted	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const char* format_str_quoted(bool add_space, const char*) {$/;"	f	namespace:internal
format_str_quoted	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const wchar_t* format_str_quoted(bool add_space, const wchar_t) {$/;"	f	namespace:internal
format_str_quoted	include/spdlog/fmt/bundled/ranges.h	/^FMT_CONSTEXPR const wchar_t* format_str_quoted(bool add_space, const wchar_t*) {$/;"	f	namespace:internal
format_string_checker	include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR format_string_checker($/;"	f	class:internal::format_string_checker
format_string_checker	include/spdlog/fmt/bundled/format.h	/^class format_string_checker {$/;"	c	namespace:internal
format_to	include/spdlog/fmt/bundled/format.h	/^    format_to(OutputIt out, const S &format_str, const Args &... args) {$/;"	f
format_to	include/spdlog/fmt/bundled/format.h	/^inline typename buffer_context<Char>::type::iterator format_to($/;"	f
format_to	include/spdlog/fmt/bundled/locale.h	/^    format_to(OutputIt out, const std::locale &loc, const S &format_str,$/;"	f
format_to_n	include/spdlog/fmt/bundled/format.h	/^    format_to_n(OutputIt out, std::size_t n, const S &format_str,$/;"	f
format_to_n_args	include/spdlog/fmt/bundled/format.h	/^struct format_to_n_args {$/;"	s
format_to_n_context	include/spdlog/fmt/bundled/format.h	/^struct format_to_n_context :$/;"	s
format_to_n_result	include/spdlog/fmt/bundled/format.h	/^struct format_to_n_result {$/;"	s
format_type	include/spdlog/fmt/bundled/format.h	/^struct format_type :$/;"	s	namespace:internal
format_uint	include/spdlog/fmt/bundled/format.h	/^inline Char *format_uint(Char *buffer, UInt value, int num_digits,$/;"	f	namespace:internal
format_uint	include/spdlog/fmt/bundled/format.h	/^inline It format_uint(It out, UInt value, int num_digits,$/;"	f	namespace:internal
format_value	include/spdlog/fmt/bundled/ostream.h	/^void format_value(basic_buffer<Char> &buffer, const T &value) {$/;"	f	namespace:internal
formatbuf	include/spdlog/fmt/bundled/ostream.h	/^  formatbuf(basic_buffer<Char> &buffer) : buffer_(buffer) {}$/;"	f	class:internal::formatbuf
formatbuf	include/spdlog/fmt/bundled/ostream.h	/^class formatbuf : public std::basic_streambuf<Char> {$/;"	c	namespace:internal
formatted_size	include/spdlog/fmt/bundled/format.h	/^inline std::size_t formatted_size(string_view format_str,$/;"	f
formatter	include/spdlog/fmt/bundled/chrono.h	/^  formatter() : spec() {}$/;"	f	struct:formatter
formatter	include/spdlog/fmt/bundled/chrono.h	/^struct formatter<std::chrono::duration<Rep, Period>, Char> {$/;"	s
formatter	include/spdlog/fmt/bundled/core.h	/^struct formatter {$/;"	s
formatter	include/spdlog/fmt/bundled/format.h	/^    arg_formatter_base &formatter;$/;"	m	struct:internal::arg_formatter_base::char_spec_handler
formatter	include/spdlog/fmt/bundled/format.h	/^    arg_formatter_base &formatter;$/;"	m	struct:internal::arg_formatter_base::cstring_spec_handler
formatter	include/spdlog/fmt/bundled/format.h	/^struct formatter<$/;"	s
formatter	include/spdlog/fmt/bundled/format.h	/^struct formatter<arg_join<It, Char>, Char>:$/;"	s
formatter	include/spdlog/fmt/bundled/ostream.h	/^struct formatter<T, Char,$/;"	s
formatter	include/spdlog/fmt/bundled/ranges.h	/^struct formatter<RangeT, Char,$/;"	s
formatter	include/spdlog/fmt/bundled/ranges.h	/^struct formatter<TupleT, Char, $/;"	s
formatter	include/spdlog/fmt/bundled/time.h	/^struct formatter<std::tm, Char> {$/;"	s
formatter	include/spdlog/formatter.h	/^class formatter$/;"	c	namespace:spdlog
formatter_	include/spdlog/details/registry.h	/^    std::unique_ptr<formatter> formatter_;$/;"	m	class:spdlog::details::registry
formatter_type	include/spdlog/fmt/bundled/core.h	/^  struct formatter_type { typedef formatter<T, char_type> type; };$/;"	s	class:basic_format_context
formatter_type	include/spdlog/fmt/bundled/printf.h	/^  struct formatter_type { typedef printf_formatter<T> type; };$/;"	s	class:basic_printf_context
formatters_	include/spdlog/details/pattern_formatter.h	/^    std::vector<std::unique_ptr<details::flag_formatter>> formatters_;$/;"	m	class:spdlog::final
formatting	include/spdlog/fmt/bundled/ranges.h	/^    formatting_tuple<Char>& formatting;$/;"	m	struct:formatter::format_each
formatting	include/spdlog/fmt/bundled/ranges.h	/^  formatting_range<Char> formatting;$/;"	m	struct:formatter
formatting	include/spdlog/fmt/bundled/ranges.h	/^  formatting_tuple<Char> formatting;$/;"	m	struct:formatter
formatting_base	include/spdlog/fmt/bundled/ranges.h	/^struct formatting_base {$/;"	s
formatting_range	include/spdlog/fmt/bundled/ranges.h	/^  formatting_range() : prefix('{'), delimiter(','), postfix('}') {}$/;"	f	struct:formatting_range
formatting_range	include/spdlog/fmt/bundled/ranges.h	/^struct formatting_range : formatting_base<Char> {$/;"	s
formatting_tuple	include/spdlog/fmt/bundled/ranges.h	/^  formatting_tuple() : prefix('('), delimiter(','), postfix(')') {}$/;"	f	struct:formatting_tuple
formatting_tuple	include/spdlog/fmt/bundled/ranges.h	/^struct formatting_tuple : formatting_base<Char> {$/;"	s
fp	include/spdlog/fmt/bundled/format-inl.h	/^  explicit fp(Double d) {$/;"	f	class:internal::fp
fp	include/spdlog/fmt/bundled/format-inl.h	/^  fp(): f(0), e(0) {}$/;"	f	class:internal::fp
fp	include/spdlog/fmt/bundled/format-inl.h	/^  fp(uint64_t f_val, int e_val): f(f_val), e(e_val) {}$/;"	f	class:internal::fp
fp	include/spdlog/fmt/bundled/format-inl.h	/^class fp {$/;"	c	namespace:internal
fprintf	include/spdlog/fmt/bundled/printf.h	/^    fprintf(std::FILE *f, const S &format, const Args & ... args) {$/;"	f
fprintf	include/spdlog/fmt/bundled/printf.h	/^    fprintf(std::basic_ostream<FMT_CHAR(S)> &os,$/;"	f
fputil	include/spdlog/fmt/bundled/format.h	/^typedef std::numeric_limits<internal::dummy_int> fputil;$/;"	t	namespace:internal
frame_topic	include/cpu_temp_frame.hpp	/^namespace frame_topic {$/;"	n
freelocale	include/spdlog/fmt/bundled/posix.h	/^  static void freelocale(locale_t locale) {$/;"	f	class:Locale
full	include/spdlog/details/circular_q.h	/^    bool full()$/;"	f	class:spdlog::details::circular_q
full_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit full_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
funcname	include/spdlog/common.h	/^    const char *funcname;$/;"	m	struct:spdlog::source_loc
function	include/spdlog/fmt/bundled/format.h	/^struct function {$/;"	s	namespace:internal
gen_digits_params	include/spdlog/fmt/bundled/format-inl.h	/^struct gen_digits_params {$/;"	s	namespace:internal
get	include/spdlog/details/registry.h	/^    std::shared_ptr<logger> get(const std::string &logger_name)$/;"	f	class:spdlog::details::registry
get	include/spdlog/fmt/bundled/format-inl.h	/^Locale locale_ref::get() const {$/;"	f	class:internal::locale_ref
get	include/spdlog/fmt/bundled/posix.h	/^  Type get() const { return locale_; }$/;"	f	class:Locale
get	include/spdlog/spdlog.h	/^inline std::shared_ptr<logger> get(const std::string &name)$/;"	f	namespace:spdlog
get_allocator	include/spdlog/fmt/bundled/format.h	/^  Allocator get_allocator() const { return *this; }$/;"	f	class:basic_memory_buffer
get_arg	include/spdlog/fmt/bundled/core.h	/^  format_arg get_arg(unsigned arg_id) { return this->do_get_arg(arg_id); }$/;"	f	class:basic_format_context
get_arg	include/spdlog/fmt/bundled/core.h	/^  format_arg get_arg(unsigned arg_id) {$/;"	f	class:internal::context_base
get_arg	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR basic_format_arg<Context> get_arg(Id arg_id) {$/;"	f	class:internal::specs_handler
get_arg	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR basic_format_arg<Context> get_arg(auto_id) {$/;"	f	class:internal::specs_handler
get_arg	include/spdlog/fmt/bundled/format.h	/^  basic_format_context<Range, Char>::get_arg($/;"	f	class:basic_format_context
get_arg	include/spdlog/fmt/bundled/printf.h	/^  basic_printf_context<OutputIt, Char, AF>::get_arg($/;"	f	class:basic_printf_context
get_cached_offset	include/spdlog/details/pattern_formatter.h	/^    int get_cached_offset(const log_msg &msg, const std::tm &tm_time)$/;"	f	class:spdlog::details::final
get_cached_power	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC fp get_cached_power(int min_exponent, int &pow10_exponent) {$/;"	f	namespace:internal
get_container	include/spdlog/fmt/bundled/core.h	/^inline Container &get_container(std::back_insert_iterator<Container> it) {$/;"	f	namespace:internal
get_default_raw	include/spdlog/details/registry.h	/^    logger *get_default_raw()$/;"	f	class:spdlog::details::registry
get_indexes	include/spdlog/fmt/bundled/ranges.h	/^get_indexes(T const &) { return {}; }$/;"	f	namespace:internal
get_prefix	include/spdlog/fmt/bundled/format.h	/^    string_view get_prefix() const { return string_view(prefix, prefix_size); }$/;"	f	struct:basic_writer::int_writer
get_time_	include/spdlog/details/pattern_formatter.h	/^    std::tm get_time_(const details::log_msg &msg)$/;"	f	class:spdlog::final
get_tp	include/spdlog/details/registry.h	/^    std::shared_ptr<thread_pool> get_tp()$/;"	f	class:spdlog::details::registry
get_type	include/spdlog/fmt/bundled/core.h	/^struct get_type {$/;"	s	namespace:internal
get_types	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR11 unsigned long long get_types() { return 0; }$/;"	f	namespace:internal
get_types	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR11 unsigned long long get_types() {$/;"	f	namespace:internal
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::atto>() { return "as"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::centi>() { return "cs"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::deca>() { return "das"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::deci>() { return "ds"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::exa>() { return "Es"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::femto>() { return "fs"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::giga>() { return "Gs"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::hecto>() { return "hs"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::kilo>() { return "ks"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::mega>() { return "Ms"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::micro>() { return "µs"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::milli>() { return "ms"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::nano>() { return "ns"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::peta>() { return "Ps"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::pico>() { return "ps"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::ratio<1>>() { return "s"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::ratio<3600>>() {$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::ratio<60>>() {$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <> FMT_CONSTEXPR const char *get_units<std::tera>() { return "Ts"; }$/;"	f
get_units	include/spdlog/fmt/bundled/chrono.h	/^template <typename Period> FMT_CONSTEXPR const char *get_units() {$/;"	f
gmtime	include/spdlog/fmt/bundled/time.h	/^inline std::tm gmtime(std::time_t time) {$/;"	f
gmtime_r	include/spdlog/fmt/bundled/time.h	/^inline null<> gmtime_r(...) { return null<>(); }$/;"	f	namespace:internal
gmtime_s	include/spdlog/fmt/bundled/time.h	/^inline null<> gmtime_s(...) { return null<>(); }$/;"	f	namespace:internal
green	include/spdlog/fmt/bundled/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	e	enum:color
green	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string green = "\\033[32m";$/;"	m	class:spdlog::sinks::final
grisu2_format	include/spdlog/fmt/bundled/format-inl.h	/^    grisu2_format(Double value, buffer &buf, core_format_specs specs) {$/;"	f	namespace:internal
grisu2_format	include/spdlog/fmt/bundled/format.h	/^  grisu2_format(Double, buffer &, core_format_specs) { return false; }$/;"	f	namespace:internal
grisu2_gen_digits	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC bool grisu2_gen_digits($/;"	f	namespace:internal
grisu2_prettify	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void grisu2_prettify(const gen_digits_params &params,$/;"	f	namespace:internal
grisu2_round	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC bool grisu2_round($/;"	f	namespace:internal
grow	include/spdlog/fmt/bundled/format.h	/^void basic_memory_buffer<T, SIZE, Allocator>::grow(std::size_t size) {$/;"	f	class:basic_memory_buffer
handle	include/spdlog/details/console_globals.h	/^    static HANDLE handle()$/;"	f	struct:spdlog::details::console_stderr
handle	include/spdlog/details/console_globals.h	/^    static HANDLE handle()$/;"	f	struct:spdlog::details::console_stdout
handle	include/spdlog/fmt/bundled/core.h	/^    explicit handle(internal::custom_value<Context> custom): custom_(custom) {}$/;"	f	class:basic_format_arg::handle
handle	include/spdlog/fmt/bundled/core.h	/^  class handle {$/;"	c	class:basic_format_arg
handle_char_specs	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void handle_char_specs($/;"	f	namespace:internal
handle_cstring_type_spec	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void handle_cstring_type_spec(Char spec, Handler &&handler) {$/;"	f	namespace:internal
handle_dynamic_spec	include/spdlog/fmt/bundled/format.h	/^void handle_dynamic_spec($/;"	f	namespace:internal
handle_flag_	include/spdlog/details/pattern_formatter.h	/^    void handle_flag_(char flag, details::padding_info padding)$/;"	f	class:spdlog::final
handle_float_type_spec	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void handle_float_type_spec(char spec, Handler &&handler) {$/;"	f	namespace:internal
handle_int_type_spec	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void handle_int_type_spec(char spec, Handler &&handler) {$/;"	f	namespace:internal
handle_padspec_	include/spdlog/details/pattern_formatter.h	/^    details::padding_info handle_padspec_(std::string::const_iterator &it, std::string::const_iterator end)$/;"	f	class:spdlog::final
handle_specs	include/spdlog/fmt/bundled/format.h	/^  void handle_specs(Context &ctx) {$/;"	f	class:dynamic_formatter
handler	include/spdlog/fmt/bundled/format.h	/^  Handler &handler;$/;"	m	struct:internal::id_adapter
handler	include/spdlog/fmt/bundled/format.h	/^  SpecHandler &handler;$/;"	m	struct:internal::precision_adapter
handler	include/spdlog/fmt/bundled/format.h	/^  SpecHandler &handler;$/;"	m	struct:internal::width_adapter
handler_	include/spdlog/fmt/bundled/format.h	/^  ErrorHandler &handler_;$/;"	m	class:internal::precision_checker
handler_	include/spdlog/fmt/bundled/format.h	/^  ErrorHandler &handler_;$/;"	m	class:internal::width_checker
has	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR bool has(unsigned f) const { return (flags & f) != 0; }$/;"	f	struct:core_format_specs
head_	include/spdlog/details/circular_q.h	/^    typename std::vector<T>::size_type head_ = 0;$/;"	m	class:spdlog::details::circular_q
hex_writer	include/spdlog/fmt/bundled/format.h	/^    struct hex_writer {$/;"	s	struct:basic_writer::int_writer
hour	include/spdlog/fmt/bundled/chrono.h	/^  int hour() const { return to_int((s.count() \/ 3600) % 24); }$/;"	f	struct:internal::chrono_formatter
hour12	include/spdlog/fmt/bundled/chrono.h	/^  int hour12() const {$/;"	f	struct:internal::chrono_formatter
i	include/spdlog/fmt/bundled/ranges.h	/^    std::size_t& i;$/;"	m	struct:formatter::format_each
i_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit i_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
id_adapter	include/spdlog/fmt/bundled/format.h	/^struct id_adapter {$/;"	s	namespace:internal
ident_	include/spdlog/sinks/syslog_sink.h	/^    const std::string ident_;$/;"	m	class:spdlog::sinks::syslog_sink
implicit_bit	include/spdlog/fmt/bundled/format-inl.h	/^  static FMT_CONSTEXPR_DECL const uint64_t implicit_bit =$/;"	m	class:internal::fp
incr_msg_counter_	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::incr_msg_counter_(details::log_msg &msg)$/;"	f	class:spdlog::logger
index	include/spdlog/fmt/bundled/format.h	/^    unsigned index;$/;"	m	union:internal::arg_ref::__anon11
inf_or_nan_writer	include/spdlog/fmt/bundled/format.h	/^  struct inf_or_nan_writer {$/;"	s	class:basic_writer
info	include/spdlog/common.h	/^    info = SPDLOG_LEVEL_INFO,$/;"	e	enum:spdlog::level::level_enum
info	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::info(const T &msg)$/;"	f	class:spdlog::logger
info	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::info(const char *fmt, const Args &... args)$/;"	f	class:spdlog::logger
info	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::info(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger
info	include/spdlog/spdlog.h	/^inline void info(const T &msg)$/;"	f	namespace:spdlog
info	include/spdlog/spdlog.h	/^inline void info(const char *fmt, const Args &... args)$/;"	f	namespace:spdlog
info	include/spdlog/spdlog.h	/^inline void info(const wchar_t *fmt, const Args &... args)$/;"	f	namespace:spdlog
init	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR init(const T &v) : val(v) {}$/;"	f	struct:internal::init
init	include/spdlog/fmt/bundled/core.h	/^struct init {$/;"	s	namespace:internal
init	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void system_error::init($/;"	f	class:system_error
init	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void windows_error::init($/;"	f	class:windows_error
init	include/spdlog/fmt/bundled/format.h	/^void arg_map<Context>::init(const basic_format_args<Context> &args) {$/;"	f	class:internal::arg_map
init_log	include/application.hpp	/^	void init_log() {$/;"	f	class:Application
init_signals	include/application.hpp	/^	void init_signals() {$/;"	f	class:Application
init_thread_pool	include/spdlog/async.h	/^inline void init_thread_pool(size_t q_size, size_t thread_count)$/;"	f	namespace:spdlog
initialize_logger	include/spdlog/details/registry.h	/^    void initialize_logger(std::shared_ptr<logger> new_logger)$/;"	f	class:spdlog::details::registry
initialize_logger	include/spdlog/spdlog.h	/^inline void initialize_logger(std::shared_ptr<logger> logger)$/;"	f	namespace:spdlog
inline_buffer_size	include/spdlog/fmt/bundled/format.h	/^enum { inline_buffer_size = 500 };$/;"	e	enum:__anon6
insert	include/spdlog/fmt/bundled/format-inl.h	/^  void insert(ptrdiff_t pos, char c) {$/;"	f	struct:internal::prettify_handler
insert	include/spdlog/fmt/bundled/format-inl.h	/^  void insert(ptrdiff_t pos, ptrdiff_t n, F f) {$/;"	f	struct:internal::prettify_handler
insert	include/spdlog/fmt/bundled/format-inl.h	/^  void insert(ptrdiff_t, char) { ++size; }$/;"	f	struct:internal::char_counter
insert	include/spdlog/fmt/bundled/format-inl.h	/^  void insert(ptrdiff_t, ptrdiff_t n, F) { size += n; }$/;"	f	struct:internal::char_counter
instance	include/spdlog/details/registry.h	/^    static registry &instance()$/;"	f	class:spdlog::details::registry
int_checker	include/spdlog/fmt/bundled/printf.h	/^struct int_checker {$/;"	s	namespace:internal
int_checker	include/spdlog/fmt/bundled/printf.h	/^struct int_checker<true> {$/;"	s	namespace:internal
int_traits	include/spdlog/fmt/bundled/format.h	/^struct int_traits {$/;"	s	namespace:internal
int_type	include/spdlog/fmt/bundled/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
int_type	include/spdlog/fmt/bundled/ostream.h	/^  typedef typename std::basic_streambuf<Char>::int_type int_type;$/;"	t	class:internal::formatbuf
int_type_checker	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR explicit int_type_checker(ErrorHandler eh) : ErrorHandler(eh) {}$/;"	f	class:internal::int_type_checker
int_type_checker	include/spdlog/fmt/bundled/format.h	/^class int_type_checker : private ErrorHandler {$/;"	c	namespace:internal
int_value	include/spdlog/fmt/bundled/core.h	/^    int int_value;$/;"	m	union:internal::value::__anon2
int_writer	include/spdlog/fmt/bundled/format.h	/^    int_writer(basic_writer<Range> &w, Int value, const Spec &s)$/;"	f	struct:basic_writer::int_writer
int_writer	include/spdlog/fmt/bundled/format.h	/^  struct int_writer {$/;"	s	class:basic_writer
internal	include/spdlog/fmt/bundled/chrono.h	/^namespace internal{$/;"	n
internal	include/spdlog/fmt/bundled/core.h	/^namespace internal {$/;"	n
internal	include/spdlog/fmt/bundled/format-inl.h	/^namespace internal {$/;"	n
internal	include/spdlog/fmt/bundled/format.h	/^namespace internal {$/;"	n
internal	include/spdlog/fmt/bundled/locale.h	/^namespace internal {$/;"	n
internal	include/spdlog/fmt/bundled/ostream.h	/^namespace internal {$/;"	n
internal	include/spdlog/fmt/bundled/printf.h	/^namespace internal {$/;"	n
internal	include/spdlog/fmt/bundled/ranges.h	/^namespace internal {$/;"	n
internal	include/spdlog/fmt/bundled/time.h	/^namespace internal {$/;"	n
internal	include/spdlog/fmt/bundled/time.h	/^namespace internal{$/;"	n
is_arithmetic	include/spdlog/fmt/bundled/core.h	/^  bool is_arithmetic() const { return internal::is_arithmetic(type_); }$/;"	f	class:basic_format_arg
is_arithmetic	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR bool is_arithmetic(type t) {$/;"	f	namespace:internal
is_compile_string	include/spdlog/fmt/bundled/core.h	/^struct is_compile_string : std::is_base_of<compile_string, S> {};$/;"	s
is_constructible	include/spdlog/fmt/bundled/core.h	/^struct is_constructible: std::false_type {};$/;"	s
is_integer	include/spdlog/fmt/bundled/format.h	/^struct is_integer {$/;"	s	namespace:internal
is_integral	include/spdlog/fmt/bundled/core.h	/^  bool is_integral() const { return internal::is_integral(type_); }$/;"	f	class:basic_format_arg
is_integral	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR bool is_integral(type t) {$/;"	f	namespace:internal
is_like_std_string	include/spdlog/fmt/bundled/ranges.h	/^class is_like_std_string {$/;"	c	namespace:internal
is_like_std_string	include/spdlog/fmt/bundled/ranges.h	/^struct is_like_std_string<fmt::basic_string_view<Char>> : std::true_type {};$/;"	s	namespace:internal
is_name_start	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR bool is_name_start(Char c) {$/;"	f	namespace:internal
is_negative	include/spdlog/fmt/bundled/format.h	/^    !std::numeric_limits<T>::is_signed, bool>::type is_negative(T) {$/;"	f	namespace:internal
is_negative	include/spdlog/fmt/bundled/format.h	/^    std::numeric_limits<T>::is_signed, bool>::type is_negative(T value) {$/;"	f	namespace:internal
is_output_iterator	include/spdlog/fmt/bundled/format.h	/^class is_output_iterator {$/;"	c	namespace:internal
is_range	include/spdlog/fmt/bundled/ranges.h	/^struct is_range {$/;"	s
is_range_	include/spdlog/fmt/bundled/ranges.h	/^struct is_range_ : std::false_type {};$/;"	s	namespace:internal
is_range_	include/spdlog/fmt/bundled/ranges.h	/^struct is_range_<T, typename std::conditional<$/;"	s	namespace:internal
is_streamable	include/spdlog/fmt/bundled/ostream.h	/^class is_streamable {$/;"	c	namespace:internal
is_string	include/spdlog/fmt/bundled/core.h	/^struct is_string : std::integral_constant<bool, !std::is_same<$/;"	s	namespace:internal
is_tuple_like	include/spdlog/fmt/bundled/ranges.h	/^struct is_tuple_like {$/;"	s
is_tuple_like_	include/spdlog/fmt/bundled/ranges.h	/^class is_tuple_like_ {$/;"	c	namespace:internal
is_zero_int	include/spdlog/fmt/bundled/printf.h	/^class is_zero_int: public function<bool> {$/;"	c	namespace:internal
isinf	include/spdlog/fmt/bundled/format.h	/^inline dummy_int isinf(...) { return dummy_int(); }$/;"	f	namespace:internal
isinfinity	include/spdlog/fmt/bundled/format.h	/^  static bool isinfinity(T x) {$/;"	f	class:std::numeric_limits
isnan	include/spdlog/fmt/bundled/format.h	/^inline dummy_int isnan(...) { return dummy_int(); }$/;"	f	namespace:internal
isnotanumber	include/spdlog/fmt/bundled/format.h	/^  static bool isnotanumber(T x) {$/;"	f	class:std::numeric_limits
it_	include/spdlog/fmt/bundled/format.h	/^  OutputIt it_;$/;"	m	class:output_range
it_category	include/spdlog/fmt/bundled/format.h	/^struct it_category : std::false_type {};$/;"	s	namespace:internal
it_category	include/spdlog/fmt/bundled/format.h	/^struct it_category<T*> { typedef std::random_access_iterator_tag type; };$/;"	s	namespace:internal
it_category	include/spdlog/fmt/bundled/format.h	/^struct it_category<T, typename void_<typename T::iterator_category>::type> {$/;"	s	namespace:internal
iterator	include/spdlog/fmt/bundled/core.h	/^  typedef OutputIt iterator;$/;"	t	class:internal::context_base
iterator	include/spdlog/fmt/bundled/core.h	/^  typedef const Char *iterator;$/;"	t	class:basic_string_view
iterator	include/spdlog/fmt/bundled/core.h	/^  typedef typename basic_string_view<Char>::iterator iterator;$/;"	t	class:basic_parse_context
iterator	include/spdlog/fmt/bundled/format.h	/^  typedef OutputIt iterator;$/;"	t	class:output_range
iterator	include/spdlog/fmt/bundled/format.h	/^  typedef decltype(internal::declval<Range>().begin()) iterator;$/;"	t	class:basic_writer
iterator	include/spdlog/fmt/bundled/format.h	/^  typedef decltype(internal::declval<Range>().begin()) iterator;$/;"	t	class:internal::arg_formatter_base
iterator	include/spdlog/fmt/bundled/format.h	/^  typedef typename base::iterator iterator;$/;"	t	class:arg_formatter
iterator	include/spdlog/fmt/bundled/printf.h	/^  typedef decltype(internal::declval<Range>().begin()) iterator;$/;"	t	class:printf_arg_formatter
iterator	include/spdlog/fmt/bundled/printf.h	/^  typedef internal::null_terminating_iterator<char_type> iterator;$/;"	t	class:basic_printf_context
iterator_category	include/spdlog/fmt/bundled/format.h	/^  typedef std::output_iterator_tag iterator_category;$/;"	t	class:internal::counting_iterator
iterator_category	include/spdlog/fmt/bundled/format.h	/^  typedef std::output_iterator_tag iterator_category;$/;"	t	class:internal::truncating_iterator_base
iterator_category	include/spdlog/fmt/bundled/printf.h	/^  typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:internal::null_terminating_iterator
join	include/spdlog/fmt/bundled/format.h	/^arg_join<It, char> join(It begin, It end, string_view sep) {$/;"	f
join	include/spdlog/fmt/bundled/format.h	/^arg_join<It, wchar_t> join(It begin, It end, wstring_view sep) {$/;"	f
kind	include/spdlog/fmt/bundled/format.h	/^  Kind kind;$/;"	m	struct:internal::arg_ref
last_integer_type	include/spdlog/fmt/bundled/core.h	/^  last_integer_type = char_type,$/;"	e	enum:internal::type
last_log_secs_	include/spdlog/details/pattern_formatter.h	/^    std::chrono::seconds last_log_secs_;$/;"	m	class:spdlog::final
last_numeric_type	include/spdlog/fmt/bundled/core.h	/^  double_type, long_double_type, last_numeric_type = long_double_type,$/;"	e	enum:internal::type
left	include/spdlog/details/pattern_formatter.h	/^        left,$/;"	e	enum:spdlog::details::padding_info::pad_side
level	include/spdlog/common.h	/^namespace level {$/;"	n	namespace:spdlog
level	include/spdlog/details/logger_impl.h	/^inline spdlog::level::level_enum spdlog::logger::level() const$/;"	f	class:spdlog::logger
level	include/spdlog/details/thread_pool.h	/^    level::level_enum level;$/;"	m	struct:spdlog::details::async_msg
level	include/spdlog/sinks/sink.h	/^    level::level_enum level() const$/;"	f	class:spdlog::sinks::sink
level_	include/spdlog/details/registry.h	/^    level::level_enum level_ = spdlog::logger::default_level();$/;"	m	class:spdlog::details::registry
level_enum	include/spdlog/common.h	/^enum level_enum$/;"	g	namespace:spdlog::level
level_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit level_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::level_formatter
level_formatter	include/spdlog/details/pattern_formatter.h	/^class level_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
lg	include/spdlog/fmt/bundled/format.h	/^inline char *lg(uint32_t n, Handler h) {$/;"	f	namespace:internal
limit_	include/spdlog/fmt/bundled/format.h	/^  std::size_t limit_;$/;"	m	class:internal::truncating_iterator_base
line	include/spdlog/common.h	/^    uint32_t line;$/;"	m	struct:spdlog::source_loc
literals	include/spdlog/fmt/bundled/format.h	/^inline namespace literals {$/;"	n
load	include/spdlog/details/null_mutex.h	/^    int load(std::memory_order) const$/;"	f	struct:spdlog::details::null_atomic_int
loc_	include/spdlog/fmt/bundled/core.h	/^  locale_ref loc_;$/;"	m	class:internal::context_base
local	include/spdlog/common.h	/^    local, \/\/ log localtime$/;"	m	class:spdlog::pattern_time_type
locale	include/spdlog/fmt/bundled/core.h	/^  locale_ref locale() { return loc_; }$/;"	f	class:internal::context_base
locale_	include/spdlog/fmt/bundled/core.h	/^  const void *locale_;  \/\/ A type-erased pointer to std::locale.$/;"	m	class:internal::locale_ref
locale_	include/spdlog/fmt/bundled/format.h	/^  internal::locale_ref locale_;$/;"	m	class:basic_writer
locale_	include/spdlog/fmt/bundled/posix.h	/^  locale_t locale_;$/;"	m	class:Locale
locale_ref	include/spdlog/fmt/bundled/core.h	/^  locale_ref() : locale_(FMT_NULL) {}$/;"	f	class:internal::locale_ref
locale_ref	include/spdlog/fmt/bundled/core.h	/^class locale_ref {$/;"	c	namespace:internal
locale_ref	include/spdlog/fmt/bundled/format-inl.h	/^locale_ref::locale_ref(const Locale &loc) : locale_(&loc) {$/;"	f	class:internal::locale_ref
locale_t	include/spdlog/fmt/bundled/posix.h	/^  typedef _locale_t locale_t;$/;"	t	class:Locale
localtime	include/spdlog/fmt/bundled/time.h	/^inline std::tm localtime(std::time_t time) {$/;"	f
localtime_s	include/spdlog/fmt/bundled/time.h	/^inline null<> localtime_s(...) { return null<>(); }$/;"	f	namespace:internal
lock	include/spdlog/details/null_mutex.h	/^    void lock() {}$/;"	f	struct:spdlog::details::null_mutex
log	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const T &msg)$/;"	f	class:spdlog::logger
log	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const char *fmt, const Args &... args)$/;"	f	class:spdlog::logger
log	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const char *msg)$/;"	f	class:spdlog::logger
log	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(level::level_enum lvl, const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger
log	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(source_loc source, level::level_enum lvl, const T &msg)$/;"	f	class:spdlog::logger
log	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(source_loc source, level::level_enum lvl, const char *fmt, const Args &... args)$/;"	f	class:spdlog::logger
log	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(source_loc source, level::level_enum lvl, const char *msg)$/;"	f	class:spdlog::logger
log	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::log(source_loc source, level::level_enum lvl, const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger
log	include/spdlog/details/thread_pool.h	/^    log,$/;"	m	class:spdlog::details::async_msg_type
log	include/spdlog/spdlog.h	/^inline void log(level::level_enum lvl, const T &msg)$/;"	f	namespace:spdlog
log	include/spdlog/spdlog.h	/^inline void log(level::level_enum lvl, const char *fmt, const Args &... args)$/;"	f	namespace:spdlog
log	include/spdlog/spdlog.h	/^inline void log(level::level_enum lvl, const wchar_t *fmt, const Args &... args)$/;"	f	namespace:spdlog
log	include/spdlog/spdlog.h	/^inline void log(source_loc source, level::level_enum lvl, const char *fmt, const Args &... args)$/;"	f	namespace:spdlog
log_msg	include/spdlog/details/log_msg.h	/^    log_msg(const std::string *loggers_name, level::level_enum lvl, string_view_t view)$/;"	f	struct:spdlog::details::log_msg
log_msg	include/spdlog/details/log_msg.h	/^    log_msg(source_loc loc, const std::string *loggers_name, level::level_enum lvl, string_view_t view)$/;"	f	struct:spdlog::details::log_msg
log_msg	include/spdlog/details/log_msg.h	/^struct log_msg$/;"	s	namespace:spdlog::details
logger	include/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(std::string logger_name, It begin, It end)$/;"	f	class:spdlog::logger
logger	include/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(std::string logger_name, sinks_init_list sinks_list)$/;"	f	class:spdlog::logger
logger	include/spdlog/details/logger_impl.h	/^inline spdlog::logger::logger(std::string logger_name, spdlog::sink_ptr single_sink)$/;"	f	class:spdlog::logger
logger	include/spdlog/logger.h	/^class logger$/;"	c	namespace:spdlog
logger_map_mutex_	include/spdlog/details/registry.h	/^    std::mutex logger_map_mutex_, flusher_mutex_;$/;"	m	class:spdlog::details::registry
loggers_	include/spdlog/details/registry.h	/^    std::unordered_map<std::string, std::shared_ptr<logger>> loggers_;$/;"	m	class:spdlog::details::registry
long_double_type	include/spdlog/fmt/bundled/core.h	/^  double_type, long_double_type, last_numeric_type = long_double_type,$/;"	e	enum:internal::type
long_double_value	include/spdlog/fmt/bundled/core.h	/^    long double long_double_value;$/;"	m	union:internal::value::__anon2
long_long_type	include/spdlog/fmt/bundled/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
long_long_value	include/spdlog/fmt/bundled/core.h	/^    long long long_long_value;$/;"	m	union:internal::value::__anon2
long_type	include/spdlog/fmt/bundled/core.h	/^        long_type;$/;"	t	namespace:internal
m_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit m_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
magenta	include/spdlog/fmt/bundled/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	e	enum:color
magenta	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string magenta = "\\033[35m";$/;"	m	class:spdlog::sinks::final
main	src/main.cpp	/^int main() {$/;"	f
make_arg	include/spdlog/fmt/bundled/core.h	/^    make_arg(const T &value) {$/;"	f	namespace:internal
make_arg	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR basic_format_arg<Context> make_arg(const T &value) {$/;"	f	namespace:internal
make_arg_ref	include/spdlog/fmt/bundled/chrono.h	/^    FMT_CONSTEXPR arg_ref_type make_arg_ref(Id arg_id) {$/;"	f	struct:formatter::spec_handler
make_arg_ref	include/spdlog/fmt/bundled/chrono.h	/^    FMT_CONSTEXPR arg_ref_type make_arg_ref(internal::auto_id) {$/;"	f	struct:formatter::spec_handler
make_arg_ref	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR arg_ref_type make_arg_ref(Id arg_id) {$/;"	f	class:internal::dynamic_specs_handler
make_arg_ref	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR arg_ref_type make_arg_ref(auto_id) {$/;"	f	class:internal::dynamic_specs_handler
make_checked	include/spdlog/fmt/bundled/format.h	/^inline stdext::checked_array_iterator<T*> make_checked(T *p, std::size_t size) {$/;"	f	namespace:internal
make_format_to_n_args	include/spdlog/fmt/bundled/format.h	/^    make_format_to_n_args(const Args &... args) {$/;"	f
make_printf_args	include/spdlog/fmt/bundled/printf.h	/^  make_printf_args(const Args &... args) { return {args...}; }$/;"	f
make_unsigned_or_bool	include/spdlog/fmt/bundled/printf.h	/^struct make_unsigned_or_bool : std::make_unsigned<T> {};$/;"	s	namespace:internal
make_unsigned_or_bool	include/spdlog/fmt/bundled/printf.h	/^struct make_unsigned_or_bool<bool> {$/;"	s	namespace:internal
make_value	include/spdlog/fmt/bundled/core.h	/^    make_value(const S &val) {$/;"	f	namespace:internal
make_value	include/spdlog/fmt/bundled/core.h	/^    make_value(const T *) {$/;"	f	namespace:internal
make_value	include/spdlog/fmt/bundled/core.h	/^    make_value(const named_arg<T, typename C::char_type> &val) {$/;"	f	namespace:internal
make_value	include/spdlog/fmt/bundled/core.h	/^  init<C, int, char_type>>::type make_value(Char val) { return val; }$/;"	f	namespace:internal
make_value	include/spdlog/fmt/bundled/core.h	/^  init<C, int, char_type>>::type make_value(char val) { return val; }$/;"	f	namespace:internal
make_value	include/spdlog/fmt/bundled/core.h	/^  make_value(const T &val) { return basic_string_view<Char>(val); }$/;"	f	namespace:internal
make_value	include/spdlog/fmt/bundled/core.h	/^  make_value(const T &val) { return static_cast<int>(val); }$/;"	f	namespace:internal
make_value	include/spdlog/fmt/bundled/core.h	/^  make_value(const T &val) { return val; }$/;"	f	namespace:internal
make_wprintf_args	include/spdlog/fmt/bundled/printf.h	/^  make_wprintf_args(const Args &... args) { return {args...}; }$/;"	f
map_	include/spdlog/fmt/bundled/core.h	/^  entry *map_;$/;"	m	class:internal::arg_map
map_	include/spdlog/fmt/bundled/core.h	/^  internal::arg_map<basic_format_context> map_;$/;"	m	class:basic_format_context
max_files_	include/spdlog/sinks/rotating_file_sink.h	/^    std::size_t max_files_;$/;"	m	class:spdlog::sinks::final
max_items_	include/spdlog/details/circular_q.h	/^    size_t max_items_;$/;"	m	class:spdlog::details::circular_q
max_packed_args	include/spdlog/fmt/bundled/core.h	/^enum { max_packed_args = 15 };$/;"	e	enum:internal::__anon3
max_size_	include/spdlog/sinks/rotating_file_sink.h	/^    std::size_t max_size_;$/;"	m	class:spdlog::sinks::final
memory_buffer	include/spdlog/fmt/bundled/format.h	/^typedef basic_memory_buffer<char> memory_buffer;$/;"	t
minute	include/spdlog/fmt/bundled/chrono.h	/^  int minute() const { return to_int((s.count() \/ 60) % 60); }$/;"	f	struct:internal::chrono_formatter
monostate	include/spdlog/fmt/bundled/core.h	/^struct monostate {};$/;"	s
move	include/spdlog/details/thread_pool.h	/^                                                   worker_ptr(std::move(other.worker_ptr))$/;"	f	struct:spdlog::details::async_msg
move	include/spdlog/fmt/bundled/format.h	/^  void move(basic_memory_buffer &other) {$/;"	f	class:basic_memory_buffer
mpmc_blocking_queue	include/spdlog/details/mpmc_blocking_q.h	/^    explicit mpmc_blocking_queue(size_t max_items)$/;"	f	class:spdlog::details::mpmc_blocking_queue
mpmc_blocking_queue	include/spdlog/details/mpmc_blocking_q.h	/^class mpmc_blocking_queue$/;"	c	namespace:spdlog::details
ms	include/spdlog/fmt/bundled/chrono.h	/^  std::chrono::milliseconds ms;$/;"	m	struct:internal::chrono_formatter
msg_	include/spdlog/common.h	/^    std::string msg_;$/;"	m	class:spdlog::spdlog_ex
msg_id	include/spdlog/details/thread_pool.h	/^    size_t msg_id;$/;"	m	struct:spdlog::details::async_msg
msg_type	include/spdlog/details/thread_pool.h	/^    async_msg_type msg_type;$/;"	m	struct:spdlog::details::async_msg
msvc_sink	include/spdlog/sinks/msvc_sink.h	/^    explicit msvc_sink() {}$/;"	f	class:spdlog::sinks::msvc_sink
msvc_sink	include/spdlog/sinks/msvc_sink.h	/^class msvc_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
mutex	include/spdlog/details/console_globals.h	/^    static mutex_t &mutex()$/;"	f	struct:spdlog::details::console_mutex
mutex	include/spdlog/details/console_globals.h	/^    static mutex_t &mutex()$/;"	f	struct:spdlog::details::console_nullmutex
mutex_	include/spdlog/details/periodic_worker.h	/^    std::mutex mutex_;$/;"	m	class:spdlog::details::periodic_worker
mutex_	include/spdlog/sinks/ansicolor_sink.h	/^    mutex_t &mutex_;$/;"	m	class:spdlog::sinks::final
mutex_	include/spdlog/sinks/base_sink.h	/^    Mutex mutex_;$/;"	m	class:spdlog::sinks::base_sink
mutex_	include/spdlog/sinks/stdout_sinks.h	/^    mutex_t &mutex_;$/;"	m	class:spdlog::sinks::final
mutex_	include/spdlog/sinks/wincolor_sink.h	/^    mutex_t &mutex_;$/;"	m	class:spdlog::sinks::wincolor_sink
n	include/spdlog/fmt/bundled/format-inl.h	/^  size_t n;$/;"	m	struct:internal::fill
n	include/spdlog/fmt/bundled/format.h	/^    size_t n;$/;"	m	struct:basic_writer::double_writer
name	include/spdlog/details/logger_impl.h	/^inline const std::string &spdlog::logger::name() const$/;"	f	class:spdlog::logger
name	include/spdlog/fmt/bundled/core.h	/^    basic_string_view<char_type> name;$/;"	m	struct:internal::arg_map::entry
name	include/spdlog/fmt/bundled/format.h	/^    string_value<Char> name;  \/\/ This is not string_view because of gcc 4.4.$/;"	m	union:internal::arg_ref::__anon11
name_	include/spdlog/logger.h	/^    const std::string name_;$/;"	m	class:spdlog::logger
name_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit name_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::name_formatter
name_formatter	include/spdlog/details/pattern_formatter.h	/^class name_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
named_arg_type	include/spdlog/fmt/bundled/core.h	/^  none_type, named_arg_type,$/;"	e	enum:internal::type
needs_conversion	include/spdlog/fmt/bundled/format.h	/^struct needs_conversion: std::integral_constant<bool,$/;"	s	namespace:internal
network_error	include/socket_handler.hpp	/^		network_error(const char* what_arg) : std::runtime_error(what_arg) {}$/;"	f	class:network_error
network_error	include/socket_handler.hpp	/^class network_error : public std::runtime_error {$/;"	c
newlocale	include/spdlog/fmt/bundled/posix.h	/^  static locale_t newlocale(int category_mask, const char *locale, locale_t) {$/;"	f	class:Locale
next_arg	include/spdlog/fmt/bundled/core.h	/^  format_arg next_arg() {$/;"	f	class:basic_format_context
next_arg_id	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR unsigned basic_parse_context<Char, ErrorHandler>::next_arg_id() {$/;"	f	class:basic_parse_context
next_arg_id_	include/spdlog/fmt/bundled/core.h	/^  int next_arg_id_;$/;"	m	class:basic_parse_context
next_rotation_tp_	include/spdlog/sinks/daily_file_sink.h	/^    log_clock::time_point next_rotation_tp_()$/;"	f	class:spdlog::sinks::final
no_formatter_error	include/spdlog/fmt/bundled/core.h	/^struct no_formatter_error : std::false_type {};$/;"	s	namespace:internal
no_thousands_sep	include/spdlog/fmt/bundled/format.h	/^struct no_thousands_sep {$/;"	s	namespace:internal
none_type	include/spdlog/fmt/bundled/core.h	/^  none_type, named_arg_type,$/;"	e	enum:internal::type
normalize	include/spdlog/fmt/bundled/format-inl.h	/^  void normalize() {$/;"	f	class:internal::fp
now_tm	include/spdlog/sinks/daily_file_sink.h	/^    tm now_tm(log_clock::time_point tp)$/;"	f	class:spdlog::sinks::final
null	include/spdlog/fmt/bundled/format.h	/^struct null {};$/;"	s	namespace:internal
null_atomic_int	include/spdlog/details/null_mutex.h	/^    explicit null_atomic_int(int val)$/;"	f	struct:spdlog::details::null_atomic_int
null_atomic_int	include/spdlog/details/null_mutex.h	/^struct null_atomic_int$/;"	s	namespace:spdlog::details
null_handler	include/spdlog/fmt/bundled/format.h	/^  struct null_handler: internal::error_handler {$/;"	s	class:dynamic_formatter
null_logger_mt	include/spdlog/sinks/null_sink.h	/^inline std::shared_ptr<logger> null_logger_mt(const std::string &logger_name)$/;"	f	namespace:spdlog
null_logger_st	include/spdlog/sinks/null_sink.h	/^inline std::shared_ptr<logger> null_logger_st(const std::string &logger_name)$/;"	f	namespace:spdlog
null_mutex	include/spdlog/details/null_mutex.h	/^struct null_mutex$/;"	s	namespace:spdlog::details
null_sink	include/spdlog/sinks/null_sink.h	/^class null_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
null_terminating_iterator	include/spdlog/fmt/bundled/printf.h	/^  FMT_CONSTEXPR explicit null_terminating_iterator(const Range &r)$/;"	f	class:internal::null_terminating_iterator
null_terminating_iterator	include/spdlog/fmt/bundled/printf.h	/^  FMT_CONSTEXPR null_terminating_iterator(const Char *ptr, const Char *end)$/;"	f	class:internal::null_terminating_iterator
null_terminating_iterator	include/spdlog/fmt/bundled/printf.h	/^  null_terminating_iterator() : ptr_(0), end_(0) {}$/;"	f	class:internal::null_terminating_iterator
null_terminating_iterator	include/spdlog/fmt/bundled/printf.h	/^class null_terminating_iterator {$/;"	c	namespace:internal
num_digits	include/spdlog/fmt/bundled/format-inl.h	/^  int num_digits;$/;"	m	struct:internal::gen_digits_params
num_digits	include/spdlog/fmt/bundled/format.h	/^      int num_digits;$/;"	m	struct:basic_writer::int_writer::bin_writer
num_digits	include/spdlog/fmt/bundled/format.h	/^      int num_digits;$/;"	m	struct:basic_writer::int_writer::dec_writer
num_digits	include/spdlog/fmt/bundled/format.h	/^      int num_digits;$/;"	m	struct:basic_writer::int_writer::hex_writer
num_writer	include/spdlog/fmt/bundled/format.h	/^    struct num_writer {$/;"	s	struct:basic_writer::int_writer
numeric_limits	include/spdlog/fmt/bundled/format.h	/^class numeric_limits<fmt::internal::dummy_int> :$/;"	c	namespace:std
numeric_system	include/spdlog/fmt/bundled/chrono.h	/^enum class numeric_system {$/;"	c	namespace:internal
off	include/spdlog/common.h	/^    off = SPDLOG_LEVEL_OFF,$/;"	e	enum:spdlog::level::level_enum
on	include/spdlog/fmt/bundled/format.h	/^  template <unsigned N> char *on(uint32_t u) {$/;"	f	class:internal::decimal_formatter
on	include/spdlog/fmt/bundled/format.h	/^  template <unsigned N> char *on(uint32_t u) {$/;"	f	class:internal::decimal_formatter_null
on_12_hour	include/spdlog/fmt/bundled/chrono.h	/^  void on_12_hour(numeric_system ns) {$/;"	f	struct:internal::chrono_formatter
on_12_hour	include/spdlog/fmt/bundled/chrono.h	/^  void on_12_hour(numeric_system) {}$/;"	f	struct:internal::chrono_format_checker
on_12_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_12_hour_time() { format_localized(time(), "%r"); }$/;"	f	struct:internal::chrono_formatter
on_12_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_12_hour_time() {}$/;"	f	struct:internal::chrono_format_checker
on_24_hour	include/spdlog/fmt/bundled/chrono.h	/^  void on_24_hour(numeric_system ns) {$/;"	f	struct:internal::chrono_formatter
on_24_hour	include/spdlog/fmt/bundled/chrono.h	/^  void on_24_hour(numeric_system) {}$/;"	f	struct:internal::chrono_format_checker
on_24_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_24_hour_time() {$/;"	f	struct:internal::chrono_formatter
on_24_hour_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_24_hour_time() {}$/;"	f	struct:internal::chrono_format_checker
on_abbr_month	include/spdlog/fmt/bundled/chrono.h	/^  void on_abbr_month() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_abbr_month	include/spdlog/fmt/bundled/chrono.h	/^  void on_abbr_month() {}$/;"	f	struct:internal::chrono_formatter
on_abbr_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_abbr_weekday() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_abbr_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_abbr_weekday() {}$/;"	f	struct:internal::chrono_formatter
on_align	include/spdlog/fmt/bundled/chrono.h	/^    void on_align(alignment align) { f.spec.align_ = align; }$/;"	f	struct:formatter::spec_handler
on_align	include/spdlog/fmt/bundled/format.h	/^    void on_align(alignment) {}$/;"	f	struct:dynamic_formatter::null_handler
on_align	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_align(alignment align) { specs_.align_ = align; }$/;"	f	class:internal::specs_setter
on_align	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_align(alignment align) {$/;"	f	class:internal::specs_checker
on_am_pm	include/spdlog/fmt/bundled/chrono.h	/^  void on_am_pm() { format_localized(time(), "%p"); }$/;"	f	struct:internal::chrono_formatter
on_am_pm	include/spdlog/fmt/bundled/chrono.h	/^  void on_am_pm() {}$/;"	f	struct:internal::chrono_format_checker
on_arg_id	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_arg_id() {$/;"	f	class:internal::format_string_checker
on_arg_id	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_arg_id(basic_string_view<Char>) {}$/;"	f	class:internal::format_string_checker
on_arg_id	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_arg_id(unsigned id) {$/;"	f	class:internal::format_string_checker
on_arg_id	include/spdlog/fmt/bundled/format.h	/^  void on_arg_id() { arg = context.next_arg(); }$/;"	f	struct:format_handler
on_arg_id	include/spdlog/fmt/bundled/format.h	/^  void on_arg_id(basic_string_view<Char> id) {$/;"	f	struct:format_handler
on_arg_id	include/spdlog/fmt/bundled/format.h	/^  void on_arg_id(unsigned id) {$/;"	f	struct:format_handler
on_bin	include/spdlog/fmt/bundled/format.h	/^    void on_bin() {$/;"	f	struct:basic_writer::int_writer
on_bin	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_bin() {}$/;"	f	class:internal::int_type_checker
on_black	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_black = "\\033[40m";$/;"	m	class:spdlog::sinks::final
on_blue	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_blue = "\\033[44m";$/;"	m	class:spdlog::sinks::final
on_char	include/spdlog/fmt/bundled/format.h	/^    void on_char() { formatter.write_char(value); }$/;"	f	struct:internal::arg_formatter_base::char_spec_handler
on_char	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_char() {}$/;"	f	class:internal::char_specs_checker
on_cyan	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_cyan = "\\033[46m";$/;"	m	class:spdlog::sinks::final
on_datetime	include/spdlog/fmt/bundled/chrono.h	/^  void on_datetime(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_datetime	include/spdlog/fmt/bundled/chrono.h	/^  void on_datetime(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_dec	include/spdlog/fmt/bundled/format.h	/^    void on_dec() {$/;"	f	struct:basic_writer::int_writer
on_dec	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_dec() {}$/;"	f	class:internal::int_type_checker
on_dec0_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_dec0_weekday(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_dec0_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_dec0_weekday(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_dec1_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_dec1_weekday(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_dec1_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_dec1_weekday(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_dynamic_precision	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_dynamic_precision(Id arg_id) {$/;"	f	class:internal::dynamic_specs_handler
on_dynamic_precision	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_dynamic_precision(Id arg_id) {$/;"	f	class:internal::specs_handler
on_dynamic_width	include/spdlog/fmt/bundled/chrono.h	/^    void on_dynamic_width(Id arg_id) {$/;"	f	struct:formatter::spec_handler
on_dynamic_width	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_dynamic_width(Id arg_id) {$/;"	f	class:internal::dynamic_specs_handler
on_dynamic_width	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_dynamic_width(Id arg_id) {$/;"	f	class:internal::specs_handler
on_error	include/spdlog/fmt/bundled/chrono.h	/^    void on_error(const char *msg) { throw format_error(msg); }$/;"	f	struct:formatter::spec_handler
on_error	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void on_error(const char *message) {$/;"	f	class:basic_parse_context
on_error	include/spdlog/fmt/bundled/core.h	/^  void on_error(const char *message) { parse_context_.on_error(message); }$/;"	f	class:internal::context_base
on_error	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void internal::error_handler::on_error(const char *message) {$/;"	f	class:internal::error_handler
on_error	include/spdlog/fmt/bundled/format.h	/^    void on_error() {$/;"	f	struct:basic_writer::int_writer
on_error	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error() {$/;"	f	class:internal::float_type_checker
on_error	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error() {$/;"	f	class:internal::int_type_checker
on_error	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error(const char *message) { handler.on_error(message); }$/;"	f	struct:internal::precision_adapter
on_error	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error(const char *message) {$/;"	f	class:internal::dynamic_specs_handler
on_error	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error(const char *message) {$/;"	f	class:internal::format_string_checker
on_error	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error(const char *message) {$/;"	f	struct:internal::id_adapter
on_error	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_error(const char *message) {$/;"	f	struct:internal::width_adapter
on_error	include/spdlog/fmt/bundled/format.h	/^  void on_error() {$/;"	f	struct:float_spec_handler
on_error	include/spdlog/fmt/bundled/format.h	/^  void on_error(const char *message) {$/;"	f	class:internal::specs_handler
on_exp	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_exp() {}$/;"	f	class:internal::float_type_checker
on_exp	include/spdlog/fmt/bundled/format.h	/^  void on_exp() {$/;"	f	struct:float_spec_handler
on_fill	include/spdlog/fmt/bundled/chrono.h	/^    void on_fill(Char fill) { f.spec.fill_ = fill; }$/;"	f	struct:formatter::spec_handler
on_fill	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_fill(Char fill) { specs_.fill_ = fill; }$/;"	f	class:internal::specs_setter
on_fixed	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_fixed() {}$/;"	f	class:internal::float_type_checker
on_fixed	include/spdlog/fmt/bundled/format.h	/^  void on_fixed() {$/;"	f	struct:float_spec_handler
on_format_specs	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR const Char *on_format_specs(const Char *begin, const Char *) {$/;"	f	class:internal::format_string_checker
on_format_specs	include/spdlog/fmt/bundled/format.h	/^  const Char *on_format_specs(const Char *begin, const Char *end) {$/;"	f	struct:format_handler
on_full_month	include/spdlog/fmt/bundled/chrono.h	/^  void on_full_month() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_full_month	include/spdlog/fmt/bundled/chrono.h	/^  void on_full_month() {}$/;"	f	struct:internal::chrono_formatter
on_full_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_full_weekday() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_full_weekday	include/spdlog/fmt/bundled/chrono.h	/^  void on_full_weekday() {}$/;"	f	struct:internal::chrono_formatter
on_general	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_general() {}$/;"	f	class:internal::float_type_checker
on_general	include/spdlog/fmt/bundled/format.h	/^  void on_general() {$/;"	f	struct:float_spec_handler
on_green	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_green = "\\033[42m";$/;"	m	class:spdlog::sinks::final
on_hash	include/spdlog/fmt/bundled/format.h	/^    void on_hash() {}$/;"	f	struct:dynamic_formatter::null_handler
on_hash	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_hash() { specs_.flags |= HASH_FLAG; }$/;"	f	class:internal::specs_setter
on_hash	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_hash() {$/;"	f	class:internal::specs_checker
on_hex	include/spdlog/fmt/bundled/format.h	/^    void on_hex() {$/;"	f	struct:basic_writer::int_writer
on_hex	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_hex() {}$/;"	f	class:internal::float_type_checker
on_hex	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_hex() {}$/;"	f	class:internal::int_type_checker
on_hex	include/spdlog/fmt/bundled/format.h	/^  void on_hex() {$/;"	f	struct:float_spec_handler
on_int	include/spdlog/fmt/bundled/format.h	/^    void on_int() {$/;"	f	struct:internal::arg_formatter_base::char_spec_handler
on_int	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_int() {$/;"	f	class:internal::char_specs_checker
on_iso_date	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_date() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_iso_date	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_date() {}$/;"	f	struct:internal::chrono_formatter
on_iso_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_time() {$/;"	f	struct:internal::chrono_formatter
on_iso_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_iso_time() {}$/;"	f	struct:internal::chrono_format_checker
on_loc_date	include/spdlog/fmt/bundled/chrono.h	/^  void on_loc_date(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_loc_date	include/spdlog/fmt/bundled/chrono.h	/^  void on_loc_date(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_loc_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_loc_time(numeric_system) { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_loc_time	include/spdlog/fmt/bundled/chrono.h	/^  void on_loc_time(numeric_system) {}$/;"	f	struct:internal::chrono_formatter
on_magenta	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_magenta = "\\033[45m";$/;"	m	class:spdlog::sinks::final
on_minus	include/spdlog/fmt/bundled/format.h	/^    void on_minus() {}$/;"	f	struct:dynamic_formatter::null_handler
on_minus	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_minus() { specs_.flags |= MINUS_FLAG; }$/;"	f	class:internal::specs_setter
on_minus	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_minus() {$/;"	f	class:internal::specs_checker
on_minute	include/spdlog/fmt/bundled/chrono.h	/^  void on_minute(numeric_system ns) {$/;"	f	struct:internal::chrono_formatter
on_minute	include/spdlog/fmt/bundled/chrono.h	/^  void on_minute(numeric_system) {}$/;"	f	struct:internal::chrono_format_checker
on_num	include/spdlog/fmt/bundled/format.h	/^    void on_num() {$/;"	f	struct:basic_writer::int_writer
on_num	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_num() {}$/;"	f	class:internal::int_type_checker
on_oct	include/spdlog/fmt/bundled/format.h	/^    void on_oct() {$/;"	f	struct:basic_writer::int_writer
on_oct	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_oct() {}$/;"	f	class:internal::int_type_checker
on_plus	include/spdlog/fmt/bundled/format.h	/^    void on_plus() {}$/;"	f	struct:dynamic_formatter::null_handler
on_plus	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_plus() { specs_.flags |= SIGN_FLAG | PLUS_FLAG; }$/;"	f	class:internal::specs_setter
on_plus	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_plus() {$/;"	f	class:internal::specs_checker
on_pointer	include/spdlog/fmt/bundled/format.h	/^    void on_pointer() { formatter.write_pointer(value); }$/;"	f	struct:internal::arg_formatter_base::cstring_spec_handler
on_pointer	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_pointer() {}$/;"	f	class:internal::cstring_type_checker
on_precision	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_precision(unsigned precision) {$/;"	f	class:internal::specs_setter
on_red	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_red = "\\033[41m";$/;"	m	class:spdlog::sinks::final
on_replacement_field	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_replacement_field(const Char *) {}$/;"	f	class:internal::format_string_checker
on_replacement_field	include/spdlog/fmt/bundled/format.h	/^  void on_replacement_field(const Char *p) {$/;"	f	struct:format_handler
on_second	include/spdlog/fmt/bundled/chrono.h	/^  void on_second(numeric_system ns) {$/;"	f	struct:internal::chrono_formatter
on_second	include/spdlog/fmt/bundled/chrono.h	/^  void on_second(numeric_system) {}$/;"	f	struct:internal::chrono_format_checker
on_space	include/spdlog/fmt/bundled/format.h	/^    void on_space() {}$/;"	f	struct:dynamic_formatter::null_handler
on_space	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_space() { specs_.flags |= SIGN_FLAG; }$/;"	f	class:internal::specs_setter
on_space	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_space() {$/;"	f	class:internal::specs_checker
on_string	include/spdlog/fmt/bundled/format.h	/^    void on_string() { formatter.write(value); }$/;"	f	struct:internal::arg_formatter_base::cstring_spec_handler
on_string	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_string() {}$/;"	f	class:internal::cstring_type_checker
on_text	include/spdlog/fmt/bundled/chrono.h	/^  void on_text(const Char *, const Char *) {}$/;"	f	struct:internal::chrono_format_checker
on_text	include/spdlog/fmt/bundled/chrono.h	/^  void on_text(const char_type *begin, const char_type *end) {$/;"	f	struct:internal::chrono_formatter
on_text	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_text(const Char *, const Char *) {}$/;"	f	class:internal::format_string_checker
on_text	include/spdlog/fmt/bundled/format.h	/^  void on_text(const Char *begin, const Char *end) {$/;"	f	struct:format_handler
on_type	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_type(Char type) {$/;"	f	class:internal::specs_setter
on_tz_name	include/spdlog/fmt/bundled/chrono.h	/^  void on_tz_name() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_tz_name	include/spdlog/fmt/bundled/chrono.h	/^  void on_tz_name() {}$/;"	f	struct:internal::chrono_formatter
on_us_date	include/spdlog/fmt/bundled/chrono.h	/^  void on_us_date() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_us_date	include/spdlog/fmt/bundled/chrono.h	/^  void on_us_date() {}$/;"	f	struct:internal::chrono_formatter
on_utc_offset	include/spdlog/fmt/bundled/chrono.h	/^  void on_utc_offset() { report_no_date(); }$/;"	f	struct:internal::chrono_format_checker
on_utc_offset	include/spdlog/fmt/bundled/chrono.h	/^  void on_utc_offset() {}$/;"	f	struct:internal::chrono_formatter
on_white	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_white = "\\033[47m";$/;"	m	class:spdlog::sinks::final
on_width	include/spdlog/fmt/bundled/chrono.h	/^    void on_width(unsigned width) { f.spec.width_ = width; }$/;"	f	struct:formatter::spec_handler
on_width	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_width(unsigned width) { specs_.width_ = width; }$/;"	f	class:internal::specs_setter
on_yellow	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string on_yellow = "\\033[43m";$/;"	m	class:spdlog::sinks::final
on_zero	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_zero() {$/;"	f	class:internal::specs_checker
on_zero	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void on_zero() {$/;"	f	class:internal::specs_setter
open	include/spdlog/details/file_helper.h	/^    void open(const filename_t &fname, bool truncate = false)$/;"	f	class:spdlog::details::file_helper
open_interval	include/spdlog/details/file_helper.h	/^    const int open_interval = 10;$/;"	m	class:spdlog::details::file_helper
open_tries	include/spdlog/details/file_helper.h	/^    const int open_tries = 5;$/;"	m	class:spdlog::details::file_helper
operator !=	include/spdlog/fmt/bundled/core.h	/^  friend bool operator!=(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator !=	include/spdlog/fmt/bundled/printf.h	/^  FMT_CONSTEXPR bool operator!=(null_terminating_iterator other) const {$/;"	f	class:internal::null_terminating_iterator
operator ()	include/spdlog/fmt/bundled/format-inl.h	/^  void operator()(char *buf) const {$/;"	f	struct:internal::fill
operator ()	include/spdlog/fmt/bundled/format.h	/^      !is_integer<T>::value, unsigned long long>::type operator()(T) {$/;"	f	class:internal::precision_checker
operator ()	include/spdlog/fmt/bundled/format.h	/^      !is_integer<T>::value, unsigned long long>::type operator()(T) {$/;"	f	class:internal::width_checker
operator ()	include/spdlog/fmt/bundled/format.h	/^      is_integer<T>::value, unsigned long long>::type operator()(T value) {$/;"	f	class:internal::precision_checker
operator ()	include/spdlog/fmt/bundled/format.h	/^      is_integer<T>::value, unsigned long long>::type operator()(T value) {$/;"	f	class:internal::width_checker
operator ()	include/spdlog/fmt/bundled/format.h	/^      operator()(T value) {$/;"	f	class:internal::arg_formatter_base
operator ()	include/spdlog/fmt/bundled/format.h	/^      void operator()(It &&it) const {$/;"	f	struct:basic_writer::int_writer::bin_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^      void operator()(It &&it) const {$/;"	f	struct:basic_writer::int_writer::dec_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^      void operator()(It &&it) const {$/;"	f	struct:basic_writer::int_writer::hex_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^      void operator()(It &&it) const {$/;"	f	struct:basic_writer::int_writer::num_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^    iterator>::type operator()(T value) {$/;"	f	class:internal::arg_formatter_base
operator ()	include/spdlog/fmt/bundled/format.h	/^    void operator()(It &&it) const { *it++ = value; }$/;"	f	struct:internal::arg_formatter_base::char_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^    void operator()(It &&it) const {$/;"	f	struct:basic_writer::inf_or_nan_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^    void operator()(It &&it) const {$/;"	f	struct:basic_writer::padded_int_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^    void operator()(It &&it) const {$/;"	f	struct:basic_writer::str_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^    void operator()(It &&it) {$/;"	f	struct:basic_writer::double_writer
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()() { handler.on_arg_id(); }$/;"	f	struct:internal::id_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()() { handler.on_dynamic_precision(auto_id()); }$/;"	f	struct:internal::precision_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()() { handler.on_dynamic_width(auto_id()); }$/;"	f	struct:internal::width_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(basic_string_view<Char> id) {$/;"	f	struct:internal::id_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(basic_string_view<Char> id) {$/;"	f	struct:internal::precision_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(basic_string_view<Char> id) {$/;"	f	struct:internal::width_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(unsigned id) { handler.on_arg_id(id); }$/;"	f	struct:internal::id_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(unsigned id) { handler.on_dynamic_width(id); }$/;"	f	struct:internal::width_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void operator()(unsigned id) {$/;"	f	struct:internal::precision_adapter
operator ()	include/spdlog/fmt/bundled/format.h	/^  bool operator()(T) const { return false; }$/;"	f	class:internal::custom_formatter
operator ()	include/spdlog/fmt/bundled/format.h	/^  bool operator()(typename basic_format_arg<Context>::handle h) const {$/;"	f	class:internal::custom_formatter
operator ()	include/spdlog/fmt/bundled/format.h	/^  iterator operator()(basic_string_view<char_type> value) {$/;"	f	class:internal::arg_formatter_base
operator ()	include/spdlog/fmt/bundled/format.h	/^  iterator operator()(const char_type *value) {$/;"	f	class:internal::arg_formatter_base
operator ()	include/spdlog/fmt/bundled/format.h	/^  iterator operator()(const void *value) {$/;"	f	class:internal::arg_formatter_base
operator ()	include/spdlog/fmt/bundled/format.h	/^  iterator operator()(monostate) {$/;"	f	class:internal::arg_formatter_base
operator ()	include/spdlog/fmt/bundled/format.h	/^  iterator operator()(typename basic_format_arg<context_type>::handle handle) {$/;"	f	class:arg_formatter
operator ()	include/spdlog/fmt/bundled/format.h	/^  std::basic_string<Char> operator()(const Args &... args) const {$/;"	f	class:internal::udl_formatter
operator ()	include/spdlog/fmt/bundled/format.h	/^  void operator()(Char *&buffer) {$/;"	f	class:internal::add_thousands_sep
operator ()	include/spdlog/fmt/bundled/format.h	/^  void operator()(Char *) {}$/;"	f	struct:internal::no_thousands_sep
operator ()	include/spdlog/fmt/bundled/printf.h	/^      operator()(T value) { return value == 0; }$/;"	f	class:internal::is_zero_int
operator ()	include/spdlog/fmt/bundled/printf.h	/^      operator()(T value) {$/;"	f	class:internal::char_converter
operator ()	include/spdlog/fmt/bundled/printf.h	/^      operator()(T value) {$/;"	f	class:internal::printf_precision_handler
operator ()	include/spdlog/fmt/bundled/printf.h	/^      operator()(T value) {$/;"	f	class:internal::printf_width_handler
operator ()	include/spdlog/fmt/bundled/printf.h	/^      operator()(T value) {$/;"	f	class:printf_arg_formatter
operator ()	include/spdlog/fmt/bundled/printf.h	/^      operator()(T) { return false; }$/;"	f	class:internal::is_zero_int
operator ()	include/spdlog/fmt/bundled/printf.h	/^      operator()(T) {$/;"	f	class:internal::printf_width_handler
operator ()	include/spdlog/fmt/bundled/printf.h	/^      operator()(U value) {$/;"	f	class:internal::arg_converter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(basic_string_view<char_type> value) {$/;"	f	class:printf_arg_formatter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(const char *value) {$/;"	f	class:printf_arg_formatter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(const void *value) {$/;"	f	class:printf_arg_formatter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(const wchar_t *value) {$/;"	f	class:printf_arg_formatter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(monostate value) {$/;"	f	class:printf_arg_formatter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  iterator operator()(typename basic_format_arg<context_type>::handle handle) {$/;"	f	class:printf_arg_formatter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  typename std::enable_if<!std::is_integral<T>::value, int>::type operator()(T) {$/;"	f	class:internal::printf_precision_handler
operator ()	include/spdlog/fmt/bundled/printf.h	/^  typename std::enable_if<!std::is_integral<T>::value>::type operator()(T) {$/;"	f	class:internal::char_converter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  typename std::enable_if<!std::is_integral<U>::value>::type operator()(U) {$/;"	f	class:internal::arg_converter
operator ()	include/spdlog/fmt/bundled/printf.h	/^  void operator()(bool value) {$/;"	f	class:internal::arg_converter
operator ()	include/spdlog/fmt/bundled/ranges.h	/^    void operator()(const T& v) {$/;"	f	struct:formatter::format_each
operator *	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC fp operator*(fp x, fp y) {$/;"	f	namespace:internal
operator *	include/spdlog/fmt/bundled/format.h	/^  T &operator*() const { return blackhole_; }$/;"	f	class:internal::counting_iterator
operator *	include/spdlog/fmt/bundled/format.h	/^  truncating_iterator& operator*() { return *this; }$/;"	f	class:internal::truncating_iterator
operator *	include/spdlog/fmt/bundled/format.h	/^  value_type& operator*() const {$/;"	f	class:internal::truncating_iterator
operator *	include/spdlog/fmt/bundled/printf.h	/^  FMT_CONSTEXPR Char operator*() const {$/;"	f	class:internal::null_terminating_iterator
operator +	include/spdlog/fmt/bundled/printf.h	/^  FMT_CONSTEXPR null_terminating_iterator operator+(difference_type n) {$/;"	f	class:internal::null_terminating_iterator
operator ++	include/spdlog/fmt/bundled/format.h	/^  counting_iterator operator++(int) {$/;"	f	class:internal::counting_iterator
operator ++	include/spdlog/fmt/bundled/format.h	/^  counting_iterator& operator++() {$/;"	f	class:internal::counting_iterator
operator ++	include/spdlog/fmt/bundled/format.h	/^  truncating_iterator operator++(int) {$/;"	f	class:internal::truncating_iterator
operator ++	include/spdlog/fmt/bundled/format.h	/^  truncating_iterator& operator++() { return *this; }$/;"	f	class:internal::truncating_iterator
operator ++	include/spdlog/fmt/bundled/format.h	/^  truncating_iterator& operator++() {$/;"	f	class:internal::truncating_iterator
operator ++	include/spdlog/fmt/bundled/format.h	/^  truncating_iterator& operator++(int) { return *this; }$/;"	f	class:internal::truncating_iterator
operator ++	include/spdlog/fmt/bundled/printf.h	/^  FMT_CONSTEXPR null_terminating_iterator operator++() {$/;"	f	class:internal::null_terminating_iterator
operator ++	include/spdlog/fmt/bundled/printf.h	/^  FMT_CONSTEXPR null_terminating_iterator operator++(int) {$/;"	f	class:internal::null_terminating_iterator
operator +=	include/spdlog/fmt/bundled/printf.h	/^  FMT_CONSTEXPR null_terminating_iterator operator+=(difference_type n) {$/;"	f	class:internal::null_terminating_iterator
operator -	include/spdlog/fmt/bundled/format-inl.h	/^inline fp operator-(fp x, fp y) {$/;"	f	namespace:internal
operator -	include/spdlog/fmt/bundled/printf.h	/^  FMT_CONSTEXPR difference_type operator-($/;"	f	class:internal::null_terminating_iterator
operator -	include/spdlog/fmt/bundled/printf.h	/^  FMT_CONSTEXPR null_terminating_iterator operator-(difference_type n) {$/;"	f	class:internal::null_terminating_iterator
operator --	include/spdlog/fmt/bundled/printf.h	/^  FMT_CONSTEXPR null_terminating_iterator operator--() {$/;"	f	class:internal::null_terminating_iterator
operator <	include/spdlog/fmt/bundled/core.h	/^  friend bool operator<(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator <=	include/spdlog/fmt/bundled/core.h	/^  friend bool operator<=(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator =	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR arg_ref &operator=(unsigned idx) {$/;"	f	struct:internal::arg_ref
operator =	include/spdlog/fmt/bundled/format.h	/^  basic_memory_buffer &operator=(basic_memory_buffer &&other) {$/;"	f	class:basic_memory_buffer
operator =	include/spdlog/fmt/bundled/format.h	/^  named_arg<T, Char> operator=(T &&value) const {$/;"	f	struct:internal::udl_arg
operator =	include/spdlog/fmt/bundled/format.h	/^  truncating_iterator& operator=(value_type val) {$/;"	f	class:internal::truncating_iterator
operator =	include/spdlog/fmt/bundled/posix.h	/^  buffered_file& operator=(buffered_file &&other) {$/;"	f	class:buffered_file
operator =	include/spdlog/fmt/bundled/posix.h	/^  file& operator=(file &&other) {$/;"	f	class:file
operator =	include/spdlog/fmt/bundled/printf.h	/^  FMT_CONSTEXPR null_terminating_iterator &operator=(const Char *ptr) {$/;"	f	class:internal::null_terminating_iterator
operator ==	include/spdlog/fmt/bundled/core.h	/^  friend bool operator==(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator >	include/spdlog/fmt/bundled/core.h	/^  friend bool operator>(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator >=	include/spdlog/fmt/bundled/core.h	/^  friend bool operator>=(basic_string_view lhs, basic_string_view rhs) {$/;"	f	class:basic_string_view
operator >=	include/spdlog/fmt/bundled/printf.h	/^  bool operator>=(null_terminating_iterator other) const {$/;"	f	class:internal::null_terminating_iterator
operator []	include/spdlog/fmt/bundled/core.h	/^  T &operator[](std::size_t index) { return ptr_[index]; }$/;"	f	class:internal::basic_buffer
operator []	include/spdlog/fmt/bundled/core.h	/^  const T &operator[](std::size_t index) const { return ptr_[index]; }$/;"	f	class:internal::basic_buffer
operator int	include/spdlog/fmt/bundled/format.h	/^  operator int() const { return 0; }$/;"	f	struct:internal::dummy_int
operator string_view	include/spdlog/fmt/bundled/format.h	/^  operator string_view() const { return string_view(&buffer_[0], size()); }$/;"	f	class:internal::utf16_to_utf8
operator value<Context>	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR operator value<Context>() const { return value<Context>(val); }$/;"	f	struct:internal::init
operator wstring_view	include/spdlog/fmt/bundled/format.h	/^  operator wstring_view() const { return wstring_view(&buffer_[0], size()); }$/;"	f	class:internal::utf8_to_utf16
os	include/spdlog/details/os.h	/^namespace os {$/;"	n	namespace:spdlog::details
ostream_	include/spdlog/sinks/ostream_sink.h	/^    std::ostream &ostream_;$/;"	m	class:spdlog::sinks::final
ostream_sink	include/spdlog/sinks/ostream_sink.h	/^    explicit ostream_sink(std::ostream &os, bool force_flush = false)$/;"	f	class:spdlog::sinks::final
other	include/spdlog/details/log_msg.h	/^    log_msg(const log_msg &other) = default;$/;"	m	struct:spdlog::details::log_msg
other	include/spdlog/details/pattern_formatter.h	/^    pattern_formatter &operator=(const pattern_formatter &other) = delete;$/;"	m	class:spdlog::final
other	include/spdlog/details/pattern_formatter.h	/^    pattern_formatter(const pattern_formatter &other) = delete;$/;"	m	class:spdlog::final
other	include/spdlog/sinks/ansicolor_sink.h	/^    ansicolor_sink &operator=(const ansicolor_sink &other) = delete;$/;"	m	class:spdlog::sinks::final
other	include/spdlog/sinks/ansicolor_sink.h	/^    ansicolor_sink(const ansicolor_sink &other) = delete;$/;"	m	class:spdlog::sinks::final
other	include/spdlog/sinks/stdout_sinks.h	/^    stdout_sink &operator=(const stdout_sink &other) = delete;$/;"	m	class:spdlog::sinks::final
other	include/spdlog/sinks/stdout_sinks.h	/^    stdout_sink(const stdout_sink &other) = delete;$/;"	m	class:spdlog::sinks::final
other	include/spdlog/sinks/wincolor_sink.h	/^    wincolor_sink &operator=(const wincolor_sink &other) = delete;$/;"	m	class:spdlog::sinks::wincolor_sink
other	include/spdlog/sinks/wincolor_sink.h	/^    wincolor_sink(const wincolor_sink &other) = delete;$/;"	m	class:spdlog::sinks::wincolor_sink
out	include/spdlog/fmt/bundled/chrono.h	/^  OutputIt out;$/;"	m	struct:internal::chrono_formatter
out	include/spdlog/fmt/bundled/core.h	/^  iterator out() { return out_; }$/;"	f	class:internal::context_base
out	include/spdlog/fmt/bundled/format.h	/^  OutputIt out;$/;"	m	struct:format_to_n_result
out	include/spdlog/fmt/bundled/format.h	/^  iterator out() const { return out_; }$/;"	f	class:basic_writer
out	include/spdlog/fmt/bundled/format.h	/^  iterator out() { return writer_.out(); }$/;"	f	class:internal::arg_formatter_base
out	include/spdlog/fmt/bundled/ranges.h	/^    typename std::add_lvalue_reference<decltype(std::declval<FormatContext>().out())>::type out;$/;"	m	struct:formatter::format_each
out_	include/spdlog/fmt/bundled/core.h	/^  iterator out_;$/;"	m	class:internal::context_base
out_	include/spdlog/fmt/bundled/format.h	/^  OutputIt out_;$/;"	m	class:internal::truncating_iterator_base
out_	include/spdlog/fmt/bundled/format.h	/^  iterator out_;  \/\/ Output iterator.$/;"	m	class:basic_writer
out_handle_	include/spdlog/sinks/wincolor_sink.h	/^    HANDLE out_handle_;$/;"	m	class:spdlog::sinks::wincolor_sink
output_range	include/spdlog/fmt/bundled/format.h	/^  explicit output_range(OutputIt it): it_(it) {}$/;"	f	class:output_range
output_range	include/spdlog/fmt/bundled/format.h	/^class output_range {$/;"	c
overflow_policy_	include/spdlog/async_logger.h	/^    async_overflow_policy overflow_policy_;$/;"	m	class:spdlog::final
override	include/spdlog/async_logger.h	/^    std::shared_ptr<logger> clone(std::string new_name) override;$/;"	m	class:spdlog::final
override	include/spdlog/async_logger.h	/^    void flush_() override;$/;"	m	class:spdlog::final
override	include/spdlog/async_logger.h	/^    void sink_it_(details::log_msg &msg) override;$/;"	m	class:spdlog::final
override	include/spdlog/sinks/ansicolor_sink.h	/^    ~ansicolor_sink() override = default;$/;"	m	class:spdlog::sinks::final
override	include/spdlog/sinks/stdout_sinks.h	/^    ~stdout_sink() override = default;$/;"	m	class:spdlog::sinks::final
overrun_counter	include/spdlog/details/circular_q.h	/^    size_t overrun_counter() const$/;"	f	class:spdlog::details::circular_q
overrun_counter	include/spdlog/details/mpmc_blocking_q.h	/^    size_t overrun_counter()$/;"	f	class:spdlog::details::mpmc_blocking_queue
overrun_counter	include/spdlog/details/thread_pool.h	/^    size_t overrun_counter()$/;"	f	class:spdlog::details::thread_pool
overrun_counter_	include/spdlog/details/circular_q.h	/^    size_t overrun_counter_ = 0;$/;"	m	class:spdlog::details::circular_q
p_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit p_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
pad2	include/spdlog/details/fmt_helper.h	/^inline void pad2(int n, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper
pad3	include/spdlog/details/fmt_helper.h	/^inline void pad3(T n, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper
pad6	include/spdlog/details/fmt_helper.h	/^inline void pad6(T n, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper
pad9	include/spdlog/details/fmt_helper.h	/^inline void pad9(T n, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper
pad_it	include/spdlog/details/pattern_formatter.h	/^    void pad_it(size_t count)$/;"	f	class:spdlog::details::scoped_pad
pad_side	include/spdlog/details/pattern_formatter.h	/^    enum pad_side$/;"	g	struct:spdlog::details::padding_info
pad_uint	include/spdlog/details/fmt_helper.h	/^inline void pad_uint(T n, unsigned int width, fmt::basic_memory_buffer<char, Buffer_Size> &dest)$/;"	f	namespace:spdlog::details::fmt_helper
padded_int_writer	include/spdlog/fmt/bundled/format.h	/^  struct padded_int_writer {$/;"	s	class:basic_writer
padding	include/spdlog/fmt/bundled/format.h	/^    std::size_t padding;$/;"	m	struct:basic_writer::padded_int_writer
padding_info	include/spdlog/details/pattern_formatter.h	/^    padding_info(size_t width, padding_info::pad_side side)$/;"	f	struct:spdlog::details::padding_info
padding_info	include/spdlog/details/pattern_formatter.h	/^struct padding_info$/;"	s	namespace:spdlog::details
padinfo_	include/spdlog/details/pattern_formatter.h	/^    const padding_info &padinfo_;$/;"	m	class:spdlog::details::scoped_pad
padinfo_	include/spdlog/details/pattern_formatter.h	/^    padding_info padinfo_;$/;"	m	class:spdlog::details::flag_formatter
parse	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR typename ParseContext::iterator parse(ParseContext &ctx) {$/;"	f	struct:formatter
parse_align	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR const Char *parse_align($/;"	f	namespace:internal
parse_arg_id	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR const Char *parse_arg_id($/;"	f	namespace:internal
parse_chrono_format	include/spdlog/fmt/bundled/chrono.h	/^FMT_CONSTEXPR const Char *parse_chrono_format($/;"	f	namespace:internal
parse_context	include/spdlog/fmt/bundled/core.h	/^  basic_parse_context<char_type> &parse_context() { return parse_context_; }$/;"	f	class:internal::context_base
parse_context	include/spdlog/fmt/bundled/core.h	/^typedef basic_parse_context<char> parse_context;$/;"	t
parse_context_	include/spdlog/fmt/bundled/core.h	/^  basic_parse_context<Char> parse_context_;$/;"	m	class:internal::context_base
parse_context_type	include/spdlog/fmt/bundled/format.h	/^  typedef basic_parse_context<Char, ErrorHandler> parse_context_type;$/;"	t	class:internal::format_string_checker
parse_flags	include/spdlog/fmt/bundled/printf.h	/^void basic_printf_context<OutputIt, Char, AF>::parse_flags($/;"	f	class:basic_printf_context
parse_format_specs	include/spdlog/fmt/bundled/format.h	/^    parse_format_specs(ParseContext &ctx) {$/;"	f	namespace:internal
parse_format_specs	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR const Char *parse_format_specs($/;"	f	namespace:internal
parse_format_string	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void parse_format_string($/;"	f	namespace:internal
parse_func	include/spdlog/fmt/bundled/format.h	/^  typedef const Char *(*parse_func)(parse_context_type &);$/;"	t	class:internal::format_string_checker
parse_funcs_	include/spdlog/fmt/bundled/format.h	/^  parse_func parse_funcs_[NUM_ARGS > 0 ? NUM_ARGS : 1];$/;"	m	class:internal::format_string_checker
parse_header	include/spdlog/fmt/bundled/printf.h	/^unsigned basic_printf_context<OutputIt, Char, AF>::parse_header($/;"	f	class:basic_printf_context
parse_nonnegative_int	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR unsigned parse_nonnegative_int($/;"	f	namespace:internal
parse_nonnegative_int	include/spdlog/fmt/bundled/printf.h	/^FMT_CONSTEXPR unsigned parse_nonnegative_int(Iterator &it, ErrorHandler &&eh) {$/;"	f	namespace:internal
parse_width	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR const Char *parse_width($/;"	f	namespace:internal
pattern_	include/spdlog/details/pattern_formatter.h	/^    std::string pattern_;$/;"	m	class:spdlog::final
pattern_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit pattern_formatter($/;"	f	class:spdlog::final
pattern_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit pattern_formatter(pattern_time_type time_type = pattern_time_type::local, std::string eol = spdlog::details::os::default_eol)$/;"	f	class:spdlog::final
pattern_time_type	include/spdlog/common.h	/^enum class pattern_time_type$/;"	c	namespace:spdlog
pattern_time_type_	include/spdlog/details/pattern_formatter.h	/^    pattern_time_type pattern_time_type_;$/;"	m	class:spdlog::final
payload	include/spdlog/details/log_msg.h	/^    const string_view_t payload;$/;"	m	struct:spdlog::details::log_msg
periodic_flusher_	include/spdlog/details/registry.h	/^    std::unique_ptr<periodic_worker> periodic_flusher_;$/;"	m	class:spdlog::details::registry
periodic_worker	include/spdlog/details/periodic_worker.h	/^    periodic_worker(const std::function<void()> &callback_fun, std::chrono::seconds interval)$/;"	f	class:spdlog::details::periodic_worker
periodic_worker	include/spdlog/details/periodic_worker.h	/^class periodic_worker$/;"	c	namespace:spdlog::details
pid	include/spdlog/details/os.h	/^inline int pid()$/;"	f	namespace:spdlog::details::os
pid_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit pid_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
pointer	include/spdlog/fmt/bundled/core.h	/^    const void *pointer;$/;"	m	union:internal::value::__anon2
pointer	include/spdlog/fmt/bundled/format.h	/^  typedef T* pointer;$/;"	t	class:internal::counting_iterator
pointer	include/spdlog/fmt/bundled/format.h	/^  typedef void pointer;$/;"	t	class:internal::truncating_iterator_base
pointer	include/spdlog/fmt/bundled/printf.h	/^  typedef const Char* pointer;$/;"	t	class:internal::null_terminating_iterator
pointer_from	include/spdlog/fmt/bundled/printf.h	/^FMT_CONSTEXPR const Char *pointer_from(null_terminating_iterator<Char> it) {$/;"	f	namespace:internal
pointer_from	include/spdlog/fmt/bundled/printf.h	/^FMT_CONSTEXPR const T *pointer_from(const T *p) { return p; }$/;"	f	namespace:internal
pointer_type	include/spdlog/fmt/bundled/core.h	/^  cstring_type, string_type, pointer_type, custom_type$/;"	e	enum:internal::type
pop_cv_	include/spdlog/details/mpmc_blocking_q.h	/^    std::condition_variable pop_cv_;$/;"	m	class:spdlog::details::mpmc_blocking_queue
pop_front	include/spdlog/details/circular_q.h	/^    void pop_front(T &popped_item)$/;"	f	class:spdlog::details::circular_q
post_async_msg_	include/spdlog/details/thread_pool.h	/^    void post_async_msg_(async_msg &&new_msg, async_overflow_policy overflow_policy)$/;"	f	class:spdlog::details::thread_pool
post_flush	include/spdlog/details/thread_pool.h	/^    void post_flush(async_logger_ptr &&worker_ptr, async_overflow_policy overflow_policy)$/;"	f	class:spdlog::details::thread_pool
post_log	include/spdlog/details/thread_pool.h	/^    void post_log(async_logger_ptr &&worker_ptr, details::log_msg &msg, async_overflow_policy overflow_policy)$/;"	f	class:spdlog::details::thread_pool
postfix	include/spdlog/fmt/bundled/ranges.h	/^  Char postfix;$/;"	m	struct:formatting_range
postfix	include/spdlog/fmt/bundled/ranges.h	/^  Char postfix;$/;"	m	struct:formatting_tuple
precision	include/spdlog/fmt/bundled/format.h	/^  int precision;$/;"	m	struct:core_format_specs
precision_adapter	include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR precision_adapter(SpecHandler &h) : handler(h) {}$/;"	f	struct:internal::precision_adapter
precision_adapter	include/spdlog/fmt/bundled/format.h	/^struct precision_adapter {$/;"	s	namespace:internal
precision_checker	include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR precision_checker(ErrorHandler &eh) : handler_(eh) {}$/;"	f	class:internal::precision_checker
precision_checker	include/spdlog/fmt/bundled/format.h	/^class precision_checker: public function<unsigned long long> {$/;"	c	namespace:internal
precision_ref	include/spdlog/fmt/bundled/format.h	/^  arg_ref<Char> precision_ref;$/;"	m	struct:internal::dynamic_format_specs
prefix	include/spdlog/fmt/bundled/format.h	/^    char prefix[4];$/;"	m	struct:basic_writer::int_writer
prefix	include/spdlog/fmt/bundled/format.h	/^    string_view prefix;$/;"	m	struct:basic_writer::padded_int_writer
prefix	include/spdlog/fmt/bundled/ranges.h	/^  Char prefix;$/;"	m	struct:formatting_range
prefix	include/spdlog/fmt/bundled/ranges.h	/^  Char prefix;$/;"	m	struct:formatting_tuple
prefix_size	include/spdlog/fmt/bundled/format.h	/^    unsigned prefix_size;$/;"	m	struct:basic_writer::int_writer
prettify_handler	include/spdlog/fmt/bundled/format-inl.h	/^  explicit prettify_handler(buffer &b, ptrdiff_t n)$/;"	f	struct:internal::prettify_handler
prettify_handler	include/spdlog/fmt/bundled/format-inl.h	/^struct prettify_handler {$/;"	s	namespace:internal
prevent_child_fd	include/spdlog/details/os.h	/^inline void prevent_child_fd(FILE *f)$/;"	f	namespace:spdlog::details::os
print	include/spdlog/fmt/bundled/ostream.h	/^print(std::basic_ostream<FMT_CHAR(S)> &os, const S &format_str,$/;"	f
print	include/spdlog/fmt/bundled/posix.h	/^  inline void print(string_view format_str, const Args & ... args) {$/;"	f	class:buffered_file
print_ccode_	include/spdlog/sinks/ansicolor_sink.h	/^    void print_ccode_(const std::string &color_code)$/;"	f	class:spdlog::sinks::final
print_colored	include/spdlog/fmt/bundled/color.h	/^inline void print_colored(color c, string_view format_str,$/;"	f
print_colored	include/spdlog/fmt/bundled/color.h	/^inline void print_colored(color c, wstring_view format_str,$/;"	f
print_range_	include/spdlog/sinks/ansicolor_sink.h	/^    void print_range_(const fmt::memory_buffer &formatted, size_t start, size_t end)$/;"	f	class:spdlog::sinks::final
print_range_	include/spdlog/sinks/wincolor_sink.h	/^    void print_range_(const fmt::memory_buffer &formatted, size_t start, size_t end)$/;"	f	class:spdlog::sinks::wincolor_sink
printf	include/spdlog/fmt/bundled/printf.h	/^    printf(const S &format_str, const Args & ... args) {$/;"	f
printf	include/spdlog/fmt/bundled/printf.h	/^void printf(basic_buffer<Char> &buf, basic_string_view<Char> format,$/;"	f	namespace:internal
printf_arg_formatter	include/spdlog/fmt/bundled/printf.h	/^  printf_arg_formatter(internal::basic_buffer<char_type> &buffer,$/;"	f	class:printf_arg_formatter
printf_arg_formatter	include/spdlog/fmt/bundled/printf.h	/^class printf_arg_formatter:$/;"	c
printf_args	include/spdlog/fmt/bundled/printf.h	/^typedef basic_format_args<printf_context> printf_args;$/;"	t
printf_context	include/spdlog/fmt/bundled/printf.h	/^typedef basic_printf_context_t<internal::buffer>::type printf_context;$/;"	t
printf_formatter	include/spdlog/fmt/bundled/printf.h	/^struct printf_formatter {$/;"	s
printf_precision_handler	include/spdlog/fmt/bundled/printf.h	/^class printf_precision_handler: public function<int> {$/;"	c	namespace:internal
printf_width_handler	include/spdlog/fmt/bundled/printf.h	/^  explicit printf_width_handler(format_specs &spec) : spec_(spec) {}$/;"	f	class:internal::printf_width_handler
printf_width_handler	include/spdlog/fmt/bundled/printf.h	/^class printf_width_handler: public function<unsigned> {$/;"	c	namespace:internal
priorities_	include/spdlog/sinks/syslog_sink.h	/^    std::array<int, 7> priorities_;$/;"	m	class:spdlog::sinks::syslog_sink
process_next_msg_	include/spdlog/details/thread_pool.h	/^    bool process_next_msg_()$/;"	f	class:spdlog::details::thread_pool
process_specs	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC gen_digits_params process_specs(const core_format_specs &specs,$/;"	f	namespace:internal
ptr	include/spdlog/fmt/bundled/format.h	/^inline const void *ptr(const T *p) { return p; }$/;"	f
ptr_	include/spdlog/fmt/bundled/core.h	/^  T *ptr_;$/;"	m	class:internal::basic_buffer
ptr_	include/spdlog/fmt/bundled/printf.h	/^  const Char *ptr_;$/;"	m	class:internal::null_terminating_iterator
publish	src/socket_handler.cpp	/^void Socket_handler::publish(frame_type& frame) {$/;"	f	class:Socket_handler
push_back	include/spdlog/details/circular_q.h	/^    void push_back(T &&item)$/;"	f	class:spdlog::details::circular_q
push_back	include/spdlog/fmt/bundled/core.h	/^  void push_back(const T &value) {$/;"	f	class:internal::basic_buffer
push_back	include/spdlog/fmt/bundled/core.h	/^  void push_back(value<Context> val) {$/;"	f	class:internal::arg_map
push_cv_	include/spdlog/details/mpmc_blocking_q.h	/^    std::condition_variable push_cv_;$/;"	m	class:spdlog::details::mpmc_blocking_queue
q_	include/spdlog/details/mpmc_blocking_q.h	/^    spdlog::details::circular_q<T> q_;$/;"	m	class:spdlog::details::mpmc_blocking_queue
q_	include/spdlog/details/thread_pool.h	/^    q_type q_;$/;"	m	class:spdlog::details::thread_pool
queue_mutex_	include/spdlog/details/mpmc_blocking_q.h	/^    std::mutex queue_mutex_;$/;"	m	class:spdlog::details::mpmc_blocking_queue
r_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit r_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
range	include/spdlog/fmt/bundled/format.h	/^  typedef Range range;$/;"	t	class:arg_formatter
range	include/spdlog/fmt/bundled/format.h	/^  typedef typename ArgFormatter::range range;$/;"	t	struct:format_handler
range_length_limit	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const std::size_t range_length_limit =$/;"	m	struct:formatting_range
raw	include/spdlog/details/thread_pool.h	/^    fmt::basic_memory_buffer<char, 176> raw;$/;"	m	struct:spdlog::details::async_msg
read	src/cpu_temp_reader.cpp	/^cpu_temp_frame_t Cpu_temp_reader::read() {$/;"	f	class:Cpu_temp_reader
red	include/spdlog/fmt/bundled/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	e	enum:color
red	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string red = "\\033[31m";$/;"	m	class:spdlog::sinks::final
reference	include/spdlog/fmt/bundled/format.h	/^  typedef T& reference;$/;"	t	class:internal::counting_iterator
reference	include/spdlog/fmt/bundled/format.h	/^  typedef void reference;$/;"	t	class:internal::truncating_iterator_base
reference	include/spdlog/fmt/bundled/printf.h	/^  typedef const Char& reference;$/;"	t	class:internal::null_terminating_iterator
register_logger	include/spdlog/details/registry.h	/^    void register_logger(std::shared_ptr<logger> new_logger)$/;"	f	class:spdlog::details::registry
register_logger	include/spdlog/spdlog.h	/^inline void register_logger(std::shared_ptr<logger> logger)$/;"	f	namespace:spdlog
register_logger_	include/spdlog/details/registry.h	/^    void register_logger_(std::shared_ptr<logger> new_logger)$/;"	f	class:spdlog::details::registry
registry	include/spdlog/details/registry.h	/^    registry()$/;"	f	class:spdlog::details::registry
registry	include/spdlog/details/registry.h	/^class registry$/;"	c	namespace:spdlog::details
remove_prefix	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR void remove_prefix(size_t n) {$/;"	f	class:basic_string_view
remove_sink	include/spdlog/sinks/dist_sink.h	/^    void remove_sink(std::shared_ptr<sink> sink)$/;"	f	class:spdlog::sinks::dist_sink
remove_trailing	include/spdlog/fmt/bundled/format-inl.h	/^  void remove_trailing(char c) {$/;"	f	struct:internal::prettify_handler
remove_trailing	include/spdlog/fmt/bundled/format-inl.h	/^  void remove_trailing(char) {}$/;"	f	struct:internal::char_counter
rename_file	include/spdlog/sinks/rotating_file_sink.h	/^    bool rename_file(const filename_t &src_filename, const filename_t &target_filename)$/;"	f	class:spdlog::sinks::final
reopen	include/spdlog/details/file_helper.h	/^    void reopen(bool truncate)$/;"	f	class:spdlog::details::file_helper
report_no_date	include/spdlog/fmt/bundled/chrono.h	/^  void report_no_date() { throw format_error("no date"); }$/;"	f	struct:internal::chrono_format_checker
require_numeric_argument	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR void require_numeric_argument() {$/;"	f	class:internal::specs_checker
reserve	include/spdlog/fmt/bundled/core.h	/^  void reserve(std::size_t new_capacity) {$/;"	f	class:internal::basic_buffer
reserve	include/spdlog/fmt/bundled/format.h	/^    reserve(std::back_insert_iterator<Container> &it, std::size_t n) {$/;"	f	namespace:internal
reserve	include/spdlog/fmt/bundled/format.h	/^  auto reserve(std::size_t n) -> decltype(internal::reserve(out_, n)) {$/;"	f	class:basic_writer
reserve	include/spdlog/fmt/bundled/format.h	/^inline Iterator &reserve(Iterator &it, std::size_t) { return it; }$/;"	f	namespace:internal
reset	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string reset = "\\033[m";$/;"	m	class:spdlog::sinks::final
resize	include/spdlog/fmt/bundled/core.h	/^  void resize(std::size_t new_size) {$/;"	f	class:internal::basic_buffer
result	include/spdlog/fmt/bundled/core.h	/^  typedef decltype(to_string_view(declval<S>())) result;$/;"	t	struct:internal::char_t
result	include/spdlog/fmt/bundled/format.h	/^  struct result { typedef Result type; };$/;"	s	struct:internal::function
result	include/spdlog/fmt/bundled/format.h	/^  typedef typename std::remove_reference<type>::type result;$/;"	t	class:internal::is_output_iterator
result	include/spdlog/fmt/bundled/ostream.h	/^  typedef decltype(test<T>(0)) result;$/;"	m	class:internal::is_streamable
result_of	include/spdlog/fmt/bundled/core.h	/^struct result_of<F(Args...)> {$/;"	s	namespace:internal
reverse	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string reverse = "\\033[7m";$/;"	m	class:spdlog::sinks::final
right	include/spdlog/details/pattern_formatter.h	/^        right,$/;"	e	enum:spdlog::details::padding_info::pad_side
rotate_	include/spdlog/sinks/rotating_file_sink.h	/^    void rotate_()$/;"	f	class:spdlog::sinks::final
rotating_file_sink	include/spdlog/sinks/rotating_file_sink.h	/^    rotating_file_sink(filename_t base_filename, std::size_t max_size, std::size_t max_files, bool rotate_on_open=false)$/;"	f	class:spdlog::sinks::final
rotating_logger_mt	include/spdlog/sinks/rotating_file_sink.h	/^inline std::shared_ptr<logger> rotating_logger_mt($/;"	f	namespace:spdlog
rotating_logger_st	include/spdlog/sinks/rotating_file_sink.h	/^inline std::shared_ptr<logger> rotating_logger_st($/;"	f	namespace:spdlog
rotation_h_	include/spdlog/sinks/daily_file_sink.h	/^    int rotation_h_;$/;"	m	class:spdlog::sinks::final
rotation_m_	include/spdlog/sinks/daily_file_sink.h	/^    int rotation_m_;$/;"	m	class:spdlog::sinks::final
rotation_tp_	include/spdlog/sinks/daily_file_sink.h	/^    log_clock::time_point rotation_tp_;$/;"	m	class:spdlog::sinks::final
running	include/application.hpp	/^	inline static bool running = false;$/;"	m	class:Application
s	include/spdlog/fmt/bundled/chrono.h	/^  std::chrono::seconds s;$/;"	m	struct:internal::chrono_formatter
s	include/spdlog/fmt/bundled/format.h	/^    const Char *s;$/;"	m	struct:basic_writer::str_writer
scoped_pad	include/spdlog/details/pattern_formatter.h	/^    scoped_pad(size_t wrapped_size, padding_info &padinfo, fmt::memory_buffer &dest)$/;"	f	class:spdlog::details::scoped_pad
scoped_pad	include/spdlog/details/pattern_formatter.h	/^    scoped_pad(spdlog::string_view_t txt, padding_info &padinfo, fmt::memory_buffer &dest)$/;"	f	class:spdlog::details::scoped_pad
scoped_pad	include/spdlog/details/pattern_formatter.h	/^class scoped_pad$/;"	c	namespace:spdlog::details
second	include/spdlog/fmt/bundled/chrono.h	/^  int second() const { return to_int(s.count() % 60); }$/;"	f	struct:internal::chrono_formatter
self	include/spdlog/fmt/bundled/format.h	/^      int_writer &self;$/;"	m	struct:basic_writer::int_writer::hex_writer
send_data	src/socket_handler.cpp	/^void Socket_handler::send_data(frame_type& frame) {$/;"	f	class:Socket_handler
sentinel	include/spdlog/fmt/bundled/format.h	/^  typedef void sentinel;$/;"	t	class:output_range
sep	include/spdlog/fmt/bundled/format.h	/^      char_type sep;$/;"	m	struct:basic_writer::int_writer::num_writer
sep	include/spdlog/fmt/bundled/format.h	/^  basic_string_view<Char> sep;$/;"	m	struct:arg_join
sep_	include/spdlog/fmt/bundled/format.h	/^  basic_string_view<Char> sep_;$/;"	m	class:internal::add_thousands_sep
set_automatic_registration	include/spdlog/details/registry.h	/^    void set_automatic_registration(bool automatic_regsistration)$/;"	f	class:spdlog::details::registry
set_automatic_registration	include/spdlog/spdlog.h	/^inline void set_automatic_registration(bool automatic_registation)$/;"	f	namespace:spdlog
set_color	include/spdlog/sinks/ansicolor_sink.h	/^    void set_color(level::level_enum color_level, const std::string &color)$/;"	f	class:spdlog::sinks::final
set_color	include/spdlog/sinks/wincolor_sink.h	/^    void set_color(level::level_enum level, WORD color)$/;"	f	class:spdlog::sinks::wincolor_sink
set_console_attribs	include/spdlog/sinks/wincolor_sink.h	/^    WORD set_console_attribs(WORD attribs)$/;"	f	class:spdlog::sinks::wincolor_sink
set_default_logger	include/spdlog/details/registry.h	/^    void set_default_logger(std::shared_ptr<logger> new_default_logger)$/;"	f	class:spdlog::details::registry
set_default_logger	include/spdlog/spdlog.h	/^inline void set_default_logger(std::shared_ptr<spdlog::logger> default_logger)$/;"	f	namespace:spdlog
set_dynamic_spec	include/spdlog/fmt/bundled/format.h	/^FMT_CONSTEXPR void set_dynamic_spec($/;"	f	namespace:internal
set_error_handler	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_error_handler(spdlog::log_err_handler err_handler)$/;"	f	class:spdlog::logger
set_error_handler	include/spdlog/details/registry.h	/^    void set_error_handler(log_err_handler handler)$/;"	f	class:spdlog::details::registry
set_error_handler	include/spdlog/spdlog.h	/^inline void set_error_handler(log_err_handler handler)$/;"	f	namespace:spdlog
set_formatter	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_formatter(std::unique_ptr<spdlog::formatter> f)$/;"	f	class:spdlog::logger
set_formatter	include/spdlog/details/registry.h	/^    void set_formatter(std::unique_ptr<formatter> formatter)$/;"	f	class:spdlog::details::registry
set_formatter	include/spdlog/spdlog.h	/^inline void set_formatter(std::unique_ptr<spdlog::formatter> formatter)$/;"	f	namespace:spdlog
set_formatter_	include/spdlog/sinks/base_sink.h	/^    virtual void set_formatter_(std::unique_ptr<spdlog::formatter> sink_formatter)$/;"	f	class:spdlog::sinks::base_sink
set_level	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_level(spdlog::level::level_enum log_level)$/;"	f	class:spdlog::logger
set_level	include/spdlog/details/registry.h	/^    void set_level(level::level_enum log_level)$/;"	f	class:spdlog::details::registry
set_level	include/spdlog/sinks/sink.h	/^    void set_level(level::level_enum log_level)$/;"	f	class:spdlog::sinks::sink
set_level	include/spdlog/spdlog.h	/^inline void set_level(level::level_enum log_level)$/;"	f	namespace:spdlog
set_pattern	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::set_pattern(std::string pattern, pattern_time_type time_type)$/;"	f	class:spdlog::logger
set_pattern	include/spdlog/spdlog.h	/^inline void set_pattern(std::string pattern, pattern_time_type time_type = pattern_time_type::local)$/;"	f	namespace:spdlog
set_pattern_	include/spdlog/sinks/base_sink.h	/^    virtual void set_pattern_(const std::string &pattern)$/;"	f	class:spdlog::sinks::base_sink
set_sinks	include/spdlog/sinks/dist_sink.h	/^    void set_sinks(std::vector<std::shared_ptr<sink>> sinks)$/;"	f	class:spdlog::sinks::dist_sink
set_tp	include/spdlog/details/registry.h	/^    void set_tp(std::shared_ptr<thread_pool> tp)$/;"	f	class:spdlog::details::registry
short_level_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit short_level_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::short_level_formatter
short_level_formatter	include/spdlog/details/pattern_formatter.h	/^class short_level_formatter : public flag_formatter$/;"	c	namespace:spdlog::details
should_color	include/spdlog/sinks/ansicolor_sink.h	/^    bool should_color()$/;"	f	class:spdlog::sinks::final
should_do_colors_	include/spdlog/sinks/ansicolor_sink.h	/^    bool should_do_colors_;$/;"	m	class:spdlog::sinks::final
should_flush_	include/spdlog/details/logger_impl.h	/^inline bool spdlog::logger::should_flush_(const details::log_msg &msg)$/;"	f	class:spdlog::logger
should_log	include/spdlog/details/logger_impl.h	/^inline bool spdlog::logger::should_log(spdlog::level::level_enum msg_level) const$/;"	f	class:spdlog::logger
should_log	include/spdlog/sinks/sink.h	/^    bool should_log(level::level_enum msg_level) const$/;"	f	class:spdlog::sinks::sink
shutdown	include/spdlog/details/registry.h	/^    void shutdown()$/;"	f	class:spdlog::details::registry
shutdown	include/spdlog/spdlog.h	/^inline void shutdown()$/;"	f	namespace:spdlog
side_	include/spdlog/details/pattern_formatter.h	/^    const pad_side side_ = left;$/;"	m	struct:spdlog::details::padding_info
sign	include/spdlog/fmt/bundled/format.h	/^    char sign;$/;"	m	struct:basic_writer::double_writer
sign	include/spdlog/fmt/bundled/format.h	/^    char sign;$/;"	m	struct:basic_writer::inf_or_nan_writer
significand_size	include/spdlog/fmt/bundled/format-inl.h	/^  static FMT_CONSTEXPR_DECL const int significand_size =$/;"	m	class:internal::fp
significand_type	include/spdlog/fmt/bundled/format-inl.h	/^  typedef uint64_t significand_type;$/;"	t	class:internal::fp
sink	include/spdlog/sinks/sink.h	/^    explicit sink(std::unique_ptr<spdlog::formatter> formatter)$/;"	f	class:spdlog::sinks::sink
sink	include/spdlog/sinks/sink.h	/^class sink$/;"	c	namespace:spdlog::sinks
sink_it_	include/spdlog/details/async_logger_impl.h	/^inline void spdlog::async_logger::sink_it_(details::log_msg &msg)$/;"	f	class:spdlog::async_logger
sink_it_	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::sink_it_(details::log_msg &msg)$/;"	f	class:spdlog::logger
sinks	include/spdlog/common.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/details/logger_impl.h	/^inline const std::vector<spdlog::sink_ptr> &spdlog::logger::sinks() const$/;"	f	class:spdlog::logger
sinks	include/spdlog/details/logger_impl.h	/^inline std::vector<spdlog::sink_ptr> &spdlog::logger::sinks()$/;"	f	class:spdlog::logger
sinks	include/spdlog/sinks/android_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/ansicolor_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/base_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/basic_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/daily_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/dist_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/msvc_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/null_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/ostream_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/rotating_file_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/stdout_color_sinks.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/stdout_sinks.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/syslog_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/systemd_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks	include/spdlog/sinks/wincolor_sink.h	/^namespace sinks {$/;"	n	namespace:spdlog
sinks_	include/spdlog/logger.h	/^    std::vector<sink_ptr> sinks_;$/;"	m	class:spdlog::logger
sinks_	include/spdlog/sinks/dist_sink.h	/^    std::vector<std::shared_ptr<sink>> sinks_;$/;"	m	class:spdlog::sinks::dist_sink
size	include/spdlog/details/file_helper.h	/^    size_t size() const$/;"	f	class:spdlog::details::file_helper
size	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR size_t size() const { return size_; }$/;"	f	class:basic_string_view
size	include/spdlog/fmt/bundled/core.h	/^  std::size_t size;$/;"	m	struct:internal::string_value
size	include/spdlog/fmt/bundled/format-inl.h	/^  ptrdiff_t size;$/;"	m	struct:internal::char_counter
size	include/spdlog/fmt/bundled/format-inl.h	/^  ptrdiff_t size;$/;"	m	struct:internal::prettify_handler
size	include/spdlog/fmt/bundled/format.h	/^      int size;$/;"	m	struct:basic_writer::int_writer::num_writer
size	include/spdlog/fmt/bundled/format.h	/^    size_t size() const { return 1; }$/;"	f	struct:internal::arg_formatter_base::char_writer
size	include/spdlog/fmt/bundled/format.h	/^    size_t size() const { return buffer.size() + (sign ? 1 : 0); }$/;"	f	struct:basic_writer::double_writer
size	include/spdlog/fmt/bundled/format.h	/^    size_t size() const { return size_; }$/;"	f	struct:basic_writer::padded_int_writer
size	include/spdlog/fmt/bundled/format.h	/^    size_t size() const { return size_; }$/;"	f	struct:basic_writer::str_writer
size	include/spdlog/fmt/bundled/format.h	/^    size_t size() const {$/;"	f	struct:basic_writer::inf_or_nan_writer
size	include/spdlog/fmt/bundled/format.h	/^  enum { size = 0 };$/;"	e	enum:internal::no_thousands_sep::__anon7
size	include/spdlog/fmt/bundled/format.h	/^  enum { size = 1 };$/;"	e	enum:internal::add_thousands_sep::__anon8
size	include/spdlog/fmt/bundled/format.h	/^  size_t size() const { return buffer_.size() - 1; }$/;"	f	class:internal::utf16_to_utf8
size	include/spdlog/fmt/bundled/format.h	/^  size_t size() const { return buffer_.size() - 1; }$/;"	f	class:internal::utf8_to_utf16
size	include/spdlog/fmt/bundled/format.h	/^  std::size_t size() const {$/;"	f	class:format_int
size	include/spdlog/fmt/bundled/format.h	/^  std::size_t size;$/;"	m	struct:format_to_n_result
size_	include/spdlog/fmt/bundled/core.h	/^    : data_(s), size_(count) {}$/;"	f	class:basic_string_view
size_	include/spdlog/fmt/bundled/core.h	/^  : data_(s.data()), size_(s.size()) {}$/;"	f	class:basic_string_view
size_	include/spdlog/fmt/bundled/core.h	/^  size_t size_;$/;"	m	class:basic_string_view
size_	include/spdlog/fmt/bundled/core.h	/^  std::size_t size_;$/;"	m	class:internal::basic_buffer
size_	include/spdlog/fmt/bundled/core.h	/^  unsigned size_;$/;"	m	class:internal::arg_map
size_	include/spdlog/fmt/bundled/format.h	/^    size_t size_;$/;"	m	struct:basic_writer::padded_int_writer
size_	include/spdlog/fmt/bundled/format.h	/^    size_t size_;$/;"	m	struct:basic_writer::str_writer
socket	include/socket_handler.hpp	/^		zmq::socket_t* socket;$/;"	m	class:Socket_handler
socket_handler	include/application.hpp	/^	Socket_handler* socket_handler;$/;"	m	class:Application
source	include/spdlog/details/log_msg.h	/^    source_loc source;$/;"	m	struct:spdlog::details::log_msg
source	include/spdlog/details/thread_pool.h	/^    source_loc source;$/;"	m	struct:spdlog::details::async_msg
source_filename_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit source_filename_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
source_funcname_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit source_funcname_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
source_linenum_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit source_linenum_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
source_loc	include/spdlog/common.h	/^    SPDLOG_CONSTEXPR source_loc()$/;"	f	struct:spdlog::source_loc
source_loc	include/spdlog/common.h	/^    SPDLOG_CONSTEXPR source_loc(const char *filename_in, int line_in, const char *funcname_in)$/;"	f	struct:spdlog::source_loc
source_loc	include/spdlog/common.h	/^struct source_loc$/;"	s	namespace:spdlog
source_location_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit source_location_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
spdlog	include/spdlog/async.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/async_logger.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/common.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/circular_q.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/console_globals.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/file_helper.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/fmt_helper.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/log_msg.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/mpmc_blocking_q.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/null_mutex.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/os.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/pattern_formatter.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/periodic_worker.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/registry.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/details/thread_pool.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/formatter.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/logger.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/android_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/ansicolor_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/base_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/basic_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/daily_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/dist_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/msvc_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/null_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/ostream_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/rotating_file_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/stdout_color_sinks.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/stdout_sinks.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/syslog_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/systemd_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/sinks/wincolor_sink.h	/^namespace spdlog {$/;"	n
spdlog	include/spdlog/spdlog.h	/^namespace spdlog {$/;"	n
spdlog_ex	include/spdlog/common.h	/^    explicit spdlog_ex(std::string msg)$/;"	f	class:spdlog::spdlog_ex
spdlog_ex	include/spdlog/common.h	/^    spdlog_ex(const std::string &msg, int last_errno)$/;"	f	class:spdlog::spdlog_ex
spdlog_ex	include/spdlog/common.h	/^class spdlog_ex : public std::exception$/;"	c	namespace:spdlog
spec	include/spdlog/fmt/bundled/chrono.h	/^  align_spec spec;$/;"	m	struct:formatter
spec	include/spdlog/fmt/bundled/format.h	/^    const Spec &spec;$/;"	m	struct:basic_writer::int_writer
spec	include/spdlog/fmt/bundled/format.h	/^  format_specs *spec() { return specs_; }$/;"	f	class:internal::arg_formatter_base
spec_	include/spdlog/fmt/bundled/printf.h	/^  format_specs &spec_;$/;"	m	class:internal::printf_width_handler
spec_handler	include/spdlog/fmt/bundled/chrono.h	/^  struct spec_handler {$/;"	s	struct:formatter
specs_	include/spdlog/fmt/bundled/format.h	/^  basic_format_specs<Char> &specs_;$/;"	m	class:internal::specs_setter
specs_	include/spdlog/fmt/bundled/format.h	/^  dynamic_format_specs<char_type> &specs_;$/;"	m	class:internal::dynamic_specs_handler
specs_	include/spdlog/fmt/bundled/format.h	/^  format_specs *specs_;$/;"	m	class:internal::arg_formatter_base
specs_	include/spdlog/fmt/bundled/format.h	/^  internal::dynamic_format_specs<Char> specs_;$/;"	m	class:dynamic_formatter
specs_	include/spdlog/fmt/bundled/format.h	/^  internal::dynamic_format_specs<Char> specs_;$/;"	m	struct:formatter
specs_checker	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR specs_checker(const Handler& handler, internal::type arg_type)$/;"	f	class:internal::specs_checker
specs_checker	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR specs_checker(const specs_checker &other)$/;"	f	class:internal::specs_checker
specs_checker	include/spdlog/fmt/bundled/format.h	/^class specs_checker : public Handler {$/;"	c	namespace:internal
specs_handler	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR specs_handler($/;"	f	class:internal::specs_handler
specs_handler	include/spdlog/fmt/bundled/format.h	/^class specs_handler: public specs_setter<typename Context::char_type> {$/;"	c	namespace:internal
specs_setter	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR specs_setter(const specs_setter &other): specs_(other.specs_) {}$/;"	f	class:internal::specs_setter
specs_setter	include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR specs_setter(basic_format_specs<Char> &specs):$/;"	f	class:internal::specs_setter
specs_setter	include/spdlog/fmt/bundled/format.h	/^class specs_setter {$/;"	c	namespace:internal
split_by_extension	include/spdlog/details/file_helper.h	/^    static std::tuple<filename_t, filename_t> split_by_extension(const spdlog::filename_t &fname)$/;"	f	class:spdlog::details::file_helper
sprintf	include/spdlog/fmt/bundled/printf.h	/^    sprintf(const S &format, const Args & ... args) {$/;"	f
sprintf_format	include/spdlog/fmt/bundled/format-inl.h	/^void sprintf_format(Double value, internal::buffer &buf,$/;"	f	namespace:internal
sstring	include/spdlog/fmt/bundled/core.h	/^    string_value<signed char> sstring;$/;"	m	union:internal::value::__anon2
standard	include/spdlog/fmt/bundled/chrono.h	/^  standard,$/;"	m	class:internal::numeric_system
std	include/spdlog/fmt/bundled/format.h	/^namespace std {$/;"	n
stderr_color_mt	include/spdlog/sinks/stdout_color_sinks.h	/^inline std::shared_ptr<logger> stderr_color_mt(const std::string &logger_name)$/;"	f	namespace:spdlog
stderr_color_st	include/spdlog/sinks/stdout_color_sinks.h	/^inline std::shared_ptr<logger> stderr_color_st(const std::string &logger_name)$/;"	f	namespace:spdlog
stderr_logger_mt	include/spdlog/sinks/stdout_sinks.h	/^inline std::shared_ptr<logger> stderr_logger_mt(const std::string &logger_name)$/;"	f	namespace:spdlog
stderr_logger_st	include/spdlog/sinks/stdout_sinks.h	/^inline std::shared_ptr<logger> stderr_logger_st(const std::string &logger_name)$/;"	f	namespace:spdlog
stdout_color_mt	include/spdlog/sinks/stdout_color_sinks.h	/^inline std::shared_ptr<logger> stdout_color_mt(const std::string &logger_name)$/;"	f	namespace:spdlog
stdout_color_st	include/spdlog/sinks/stdout_color_sinks.h	/^inline std::shared_ptr<logger> stdout_color_st(const std::string &logger_name)$/;"	f	namespace:spdlog
stdout_logger_mt	include/spdlog/sinks/stdout_sinks.h	/^inline std::shared_ptr<logger> stdout_logger_mt(const std::string &logger_name)$/;"	f	namespace:spdlog
stdout_logger_st	include/spdlog/sinks/stdout_sinks.h	/^inline std::shared_ptr<logger> stdout_logger_st(const std::string &logger_name)$/;"	f	namespace:spdlog
stdout_sink	include/spdlog/sinks/stdout_sinks.h	/^    stdout_sink()$/;"	f	class:spdlog::sinks::final
store	include/spdlog/details/null_mutex.h	/^    void store(int val)$/;"	f	struct:spdlog::details::null_atomic_int
store_	include/spdlog/fmt/bundled/format.h	/^  T store_[SIZE];$/;"	m	class:basic_memory_buffer
str	include/spdlog/fmt/bundled/format.h	/^    const char *str;$/;"	m	struct:basic_writer::inf_or_nan_writer
str	include/spdlog/fmt/bundled/format.h	/^  const Char *str;$/;"	m	struct:internal::udl_arg
str	include/spdlog/fmt/bundled/format.h	/^  std::string str() const { return std::string(&buffer_[0], size()); }$/;"	f	class:internal::utf16_to_utf8
str	include/spdlog/fmt/bundled/format.h	/^  std::string str() const { return std::string(str_, size()); }$/;"	f	class:format_int
str	include/spdlog/fmt/bundled/format.h	/^  std::wstring str() const { return std::wstring(&buffer_[0], size()); }$/;"	f	class:internal::utf8_to_utf16
str_	include/spdlog/details/pattern_formatter.h	/^    std::string str_;$/;"	m	class:spdlog::details::final
str_	include/spdlog/fmt/bundled/format.h	/^  char *str_;$/;"	m	class:format_int
str_writer	include/spdlog/fmt/bundled/format.h	/^  struct str_writer {$/;"	s	class:basic_writer
stream	include/spdlog/details/console_globals.h	/^    static std::FILE *stream()$/;"	f	struct:spdlog::details::console_stderr
stream	include/spdlog/details/console_globals.h	/^    static std::FILE *stream()$/;"	f	struct:spdlog::details::console_stdout
strerror_r	include/spdlog/fmt/bundled/format-inl.h	/^inline fmt::internal::null<> strerror_r(int, char *, ...) {$/;"	f
strerror_s	include/spdlog/fmt/bundled/format-inl.h	/^inline fmt::internal::null<> strerror_s(char *, std::size_t, ...) {$/;"	f
strftime	include/spdlog/fmt/bundled/time.h	/^inline std::size_t strftime(char *str, std::size_t count, const char *format,$/;"	f	namespace:internal
strftime	include/spdlog/fmt/bundled/time.h	/^inline std::size_t strftime(wchar_t *str, std::size_t count,$/;"	f	namespace:internal
string	include/spdlog/fmt/bundled/core.h	/^    string_value<char_type> string;$/;"	m	union:internal::value::__anon2
string_type	include/spdlog/fmt/bundled/core.h	/^  cstring_type, string_type, pointer_type, custom_type$/;"	e	enum:internal::type
string_value	include/spdlog/fmt/bundled/core.h	/^struct string_value {$/;"	s	namespace:internal
string_view	include/spdlog/fmt/bundled/core.h	/^typedef basic_string_view<char> string_view;$/;"	t
strtod	include/spdlog/fmt/bundled/posix.h	/^  double strtod(const char *&str) const {$/;"	f	class:Locale
strtod_l	include/spdlog/fmt/bundled/posix.h	/^  static double strtod_l(const char *nptr, char **endptr, _locale_t locale) {$/;"	f	class:Locale
synchronous_factory	include/spdlog/spdlog.h	/^struct synchronous_factory$/;"	s	namespace:spdlog
syslog_level	include/spdlog/sinks/systemd_sink.h	/^inline int syslog_level(level::level_enum l) {$/;"	f	namespace:spdlog::sinks
syslog_logger_mt	include/spdlog/sinks/syslog_sink.h	/^inline std::shared_ptr<logger> syslog_logger_mt($/;"	f	namespace:spdlog
syslog_logger_st	include/spdlog/sinks/syslog_sink.h	/^inline std::shared_ptr<logger> syslog_logger_st($/;"	f	namespace:spdlog
syslog_prio_from_level	include/spdlog/sinks/syslog_sink.h	/^    int syslog_prio_from_level(const details::log_msg &msg) const$/;"	f	class:spdlog::sinks::syslog_sink
syslog_sink	include/spdlog/sinks/syslog_sink.h	/^    explicit syslog_sink(std::string ident = "", int syslog_option = 0, int syslog_facility = LOG_USER)$/;"	f	class:spdlog::sinks::syslog_sink
syslog_sink	include/spdlog/sinks/syslog_sink.h	/^class syslog_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
system_error	include/spdlog/fmt/bundled/format.h	/^  system_error() : std::runtime_error("") {}$/;"	f	class:system_error
system_error	include/spdlog/fmt/bundled/format.h	/^  system_error(int error_code, string_view message, const Args &... args)$/;"	f	class:system_error
system_error	include/spdlog/fmt/bundled/format.h	/^class system_error : public std::runtime_error {$/;"	c
systemd_logger_mt	include/spdlog/sinks/systemd_sink.h	/^inline std::shared_ptr<logger> systemd_logger_mt($/;"	f	namespace:spdlog
systemd_logger_st	include/spdlog/sinks/systemd_sink.h	/^inline std::shared_ptr<logger> systemd_logger_st($/;"	f	namespace:spdlog
systemd_sink	include/spdlog/sinks/systemd_sink.h	/^    explicit systemd_sink(void) {}$/;"	f	class:spdlog::sinks::systemd_sink
systemd_sink	include/spdlog/sinks/systemd_sink.h	/^class systemd_sink : public base_sink<Mutex>$/;"	c	namespace:spdlog::sinks
t_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit t_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
tag_	include/spdlog/sinks/android_sink.h	/^    std::string tag_;$/;"	m	class:spdlog::sinks::final
tail_	include/spdlog/details/circular_q.h	/^    typename std::vector<T>::size_type tail_ = 0;$/;"	m	class:spdlog::details::circular_q
target_file_	include/spdlog/sinks/ansicolor_sink.h	/^    FILE *target_file_;$/;"	m	class:spdlog::sinks::final
temperature	include/cpu_temp_frame.hpp	/^  float temperature;$/;"	m	struct:cpu_temp_frame_t
termination_handler	include/application.hpp	/^	static void termination_handler(int) {$/;"	f	class:Application
test_stream	include/spdlog/fmt/bundled/ostream.h	/^struct test_stream : std::basic_ostream<Char> {$/;"	s	namespace:internal
thousands_sep	include/spdlog/fmt/bundled/format.h	/^inline Char thousands_sep(locale_ref loc) {$/;"	f	namespace:internal
thousands_sep	include/spdlog/fmt/bundled/format.h	/^inline wchar_t thousands_sep(locale_ref loc) {$/;"	f	namespace:internal
thousands_sep_impl	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC Char thousands_sep_impl(locale_ref loc) {$/;"	f	namespace:internal
thread_id	include/spdlog/details/thread_pool.h	/^    size_t thread_id;$/;"	m	struct:spdlog::details::async_msg
thread_pool	include/spdlog/async.h	/^inline std::shared_ptr<spdlog::details::thread_pool> thread_pool()$/;"	f	namespace:spdlog
thread_pool	include/spdlog/details/thread_pool.h	/^    thread_pool(size_t q_max_items, size_t threads_n)$/;"	f	class:spdlog::details::thread_pool
thread_pool	include/spdlog/details/thread_pool.h	/^class thread_pool$/;"	c	namespace:spdlog::details
thread_pool_	include/spdlog/async_logger.h	/^    std::weak_ptr<details::thread_pool> thread_pool_;$/;"	m	class:spdlog::final
threads_	include/spdlog/details/thread_pool.h	/^    std::vector<std::thread> threads_;$/;"	m	class:spdlog::details::thread_pool
throw_if_exists_	include/spdlog/details/registry.h	/^    void throw_if_exists_(const std::string &logger_name)$/;"	f	class:spdlog::details::registry
time	include/spdlog/details/log_msg.h	/^    log_clock::time_point time;$/;"	m	struct:spdlog::details::log_msg
time	include/spdlog/details/thread_pool.h	/^    log_clock::time_point time;$/;"	m	struct:spdlog::details::async_msg
time	include/spdlog/fmt/bundled/chrono.h	/^  std::tm time() const {$/;"	f	struct:internal::chrono_formatter
time_fraction	include/spdlog/details/fmt_helper.h	/^inline ToDuration time_fraction(const log_clock::time_point &tp)$/;"	f	namespace:spdlog::details::fmt_helper
tm_format	include/spdlog/fmt/bundled/time.h	/^  basic_memory_buffer<Char> tm_format;$/;"	m	struct:formatter
to12h	include/spdlog/details/pattern_formatter.h	/^static int to12h(const tm &t)$/;"	f	namespace:spdlog::details
to_char8_t	include/spdlog/fmt/bundled/format.h	/^inline char8_t to_char8_t(char c) { return static_cast<char8_t>(c); }$/;"	f	namespace:internal
to_int	include/spdlog/fmt/bundled/chrono.h	/^inline int to_int(Int value) {$/;"	f	namespace:internal
to_log_msg	include/spdlog/details/thread_pool.h	/^    log_msg to_log_msg()$/;"	f	struct:spdlog::details::async_msg
to_string	include/spdlog/fmt/bundled/format.h	/^std::basic_string<Char> to_string(const basic_memory_buffer<Char, SIZE> &buf) {$/;"	f
to_string	include/spdlog/fmt/bundled/format.h	/^std::string to_string(const T &value) {$/;"	f
to_string_view	include/spdlog/fmt/bundled/core.h	/^  to_string_view(FMT_STRING_VIEW<Char> s) { return s; }$/;"	f
to_string_view	include/spdlog/fmt/bundled/core.h	/^  to_string_view(basic_string_view<Char> s) { return s; }$/;"	f
to_string_view	include/spdlog/fmt/bundled/core.h	/^  to_string_view(const S &s) { return s; }$/;"	f
to_string_view	include/spdlog/fmt/bundled/core.h	/^  to_string_view(const std::basic_string<Char> &s) { return s; }$/;"	f
to_string_view	include/spdlog/fmt/bundled/core.h	/^inline basic_string_view<Char> to_string_view(const Char *s) { return s; }$/;"	f
to_unsigned	include/spdlog/fmt/bundled/core.h	/^FMT_CONSTEXPR typename std::make_unsigned<Int>::type to_unsigned(Int value) {$/;"	f	namespace:internal
to_wstring	include/spdlog/fmt/bundled/format.h	/^std::wstring to_wstring(const T &value) {$/;"	f
total_pad_	include/spdlog/details/pattern_formatter.h	/^    size_t total_pad_;$/;"	m	class:spdlog::details::scoped_pad
tp_	include/spdlog/details/registry.h	/^    std::shared_ptr<thread_pool> tp_;$/;"	m	class:spdlog::details::registry
tp_mutex	include/spdlog/details/registry.h	/^    std::recursive_mutex &tp_mutex()$/;"	f	class:spdlog::details::registry
tp_mutex_	include/spdlog/details/registry.h	/^    std::recursive_mutex tp_mutex_;$/;"	m	class:spdlog::details::registry
trace	include/spdlog/common.h	/^    trace = SPDLOG_LEVEL_TRACE,$/;"	e	enum:spdlog::level::level_enum
trace	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace(const T &msg)$/;"	f	class:spdlog::logger
trace	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace(const char *fmt, const Args &... args)$/;"	f	class:spdlog::logger
trace	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::trace(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger
trace	include/spdlog/spdlog.h	/^inline void trace(const T &msg)$/;"	f	namespace:spdlog
trace	include/spdlog/spdlog.h	/^inline void trace(const char *fmt, const Args &... args)$/;"	f	namespace:spdlog
trace	include/spdlog/spdlog.h	/^inline void trace(const wchar_t *fmt, const Args &... args)$/;"	f	namespace:spdlog
trailing_zeros	include/spdlog/fmt/bundled/format-inl.h	/^  bool trailing_zeros;$/;"	m	struct:internal::gen_digits_params
traits	include/spdlog/fmt/bundled/format.h	/^  typedef std::iterator_traits<OutputIt> traits;$/;"	t	class:internal::truncating_iterator
traits_type	include/spdlog/fmt/bundled/ostream.h	/^  typedef typename std::basic_streambuf<Char>::traits_type traits_type;$/;"	t	class:internal::formatbuf
truncate_	include/spdlog/sinks/daily_file_sink.h	/^    bool truncate_;$/;"	m	class:spdlog::sinks::final
truncating_iterator	include/spdlog/fmt/bundled/format.h	/^  truncating_iterator(OutputIt out, std::size_t limit)$/;"	f	class:internal::truncating_iterator
truncating_iterator	include/spdlog/fmt/bundled/format.h	/^class truncating_iterator<OutputIt, std::false_type>:$/;"	c	namespace:internal
truncating_iterator	include/spdlog/fmt/bundled/format.h	/^class truncating_iterator<OutputIt, std::true_type>:$/;"	c	namespace:internal
truncating_iterator_base	include/spdlog/fmt/bundled/format.h	/^  truncating_iterator_base(OutputIt out, std::size_t limit)$/;"	f	class:internal::truncating_iterator_base
truncating_iterator_base	include/spdlog/fmt/bundled/format.h	/^class truncating_iterator_base {$/;"	c	namespace:internal
try_lock	include/spdlog/details/null_mutex.h	/^    bool try_lock()$/;"	f	struct:spdlog::details::null_mutex
type	include/spdlog/fmt/bundled/core.h	/^    std::back_insert_iterator<internal::basic_buffer<Char>>, Char> type;$/;"	t	struct:buffer_context
type	include/spdlog/fmt/bundled/core.h	/^    typename std::remove_reference<F>::type(Args...)>::type type;$/;"	t	struct:internal::result_of
type	include/spdlog/fmt/bundled/core.h	/^  internal::type type() const { return type_; }$/;"	f	class:basic_format_arg
type	include/spdlog/fmt/bundled/core.h	/^  struct formatter_type { typedef formatter<T, char_type> type; };$/;"	t	struct:basic_format_context::formatter_type
type	include/spdlog/fmt/bundled/core.h	/^  typedef typename result::char_type type;$/;"	t	struct:internal::char_t
type	include/spdlog/fmt/bundled/core.h	/^enum type {$/;"	g	namespace:internal
type	include/spdlog/fmt/bundled/format.h	/^    typename format_context_t<OutputIt, Char>::type> type;$/;"	t	struct:format_args_t
type	include/spdlog/fmt/bundled/format.h	/^    typename format_to_n_context<OutputIt, Char>::type> type;$/;"	t	struct:format_to_n_args
type	include/spdlog/fmt/bundled/format.h	/^  char type;$/;"	m	struct:core_format_specs
type	include/spdlog/fmt/bundled/format.h	/^  char type;$/;"	m	struct:float_spec_handler
type	include/spdlog/fmt/bundled/format.h	/^  struct result { typedef Result type; };$/;"	t	struct:internal::function::result
type	include/spdlog/fmt/bundled/format.h	/^  typedef decltype(test<It>(typename it_category<It>::type{})) type;$/;"	t	class:internal::is_output_iterator
type	include/spdlog/fmt/bundled/format.h	/^  typedef typename T::iterator_category type;$/;"	t	struct:internal::it_category
type	include/spdlog/fmt/bundled/format.h	/^struct checked { typedef stdext::checked_array_iterator<T*> type; };$/;"	t	struct:internal::checked
type	include/spdlog/fmt/bundled/format.h	/^struct format_context_t { typedef basic_format_context<OutputIt, Char> type; };$/;"	t	struct:format_context_t
type	include/spdlog/fmt/bundled/format.h	/^struct it_category<T*> { typedef std::random_access_iterator_tag type; };$/;"	t	struct:internal::it_category
type	include/spdlog/fmt/bundled/format.h	/^struct void_ { typedef void type; };$/;"	t	struct:internal::void_
type	include/spdlog/fmt/bundled/printf.h	/^    std::back_insert_iterator<Buffer>, typename Buffer::value_type> type;$/;"	t	struct:basic_printf_context_t
type	include/spdlog/fmt/bundled/printf.h	/^  struct formatter_type { typedef printf_formatter<T> type; };$/;"	t	struct:basic_printf_context::formatter_type
type	include/spdlog/fmt/bundled/printf.h	/^  typedef bool type;$/;"	t	struct:internal::make_unsigned_or_bool
type_	include/spdlog/fmt/bundled/core.h	/^  internal::type type_;$/;"	m	class:basic_format_arg
type_	include/spdlog/fmt/bundled/format.h	/^  char type_;$/;"	m	class:internal::char_specs_checker
type_	include/spdlog/fmt/bundled/printf.h	/^  typename Context::char_type type_;$/;"	m	class:internal::arg_converter
type_tag	include/spdlog/fmt/bundled/core.h	/^  static const type type_tag = TYPE;$/;"	m	struct:internal::init
u8string_view	include/spdlog/fmt/bundled/format.h	/^  u8string_view(const char *s):$/;"	f	class:u8string_view
u8string_view	include/spdlog/fmt/bundled/format.h	/^class u8string_view : public basic_string_view<char8_t> {$/;"	c
udl_arg	include/spdlog/fmt/bundled/format.h	/^struct udl_arg {$/;"	s	namespace:internal
udl_formatter	include/spdlog/fmt/bundled/format.h	/^class udl_formatter {$/;"	c	namespace:internal
uint_type	include/spdlog/fmt/bundled/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
uint_value	include/spdlog/fmt/bundled/core.h	/^    unsigned uint_value;$/;"	m	union:internal::value::__anon2
ulong_long_type	include/spdlog/fmt/bundled/core.h	/^  int_type, uint_type, long_long_type, ulong_long_type, bool_type, char_type,$/;"	e	enum:internal::type
ulong_long_value	include/spdlog/fmt/bundled/core.h	/^    unsigned long long ulong_long_value;$/;"	m	union:internal::value::__anon2
ulong_type	include/spdlog/fmt/bundled/core.h	/^                         unsigned, unsigned long long>::type ulong_type;$/;"	t	namespace:internal
underline	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string underline = "\\033[4m";$/;"	m	class:spdlog::sinks::final
unlock	include/spdlog/details/null_mutex.h	/^    void unlock() {}$/;"	f	struct:spdlog::details::null_mutex
unsigned_type	include/spdlog/fmt/bundled/format.h	/^    typedef typename internal::int_traits<Int>::main_type unsigned_type;$/;"	t	struct:basic_writer::int_writer
upper	include/spdlog/fmt/bundled/format-inl.h	/^  bool upper;$/;"	m	struct:internal::gen_digits_params
upper	include/spdlog/fmt/bundled/format.h	/^  bool upper;$/;"	m	struct:float_spec_handler
use_raw_msg_	include/spdlog/sinks/android_sink.h	/^    bool use_raw_msg_;$/;"	m	class:spdlog::sinks::final
ustring	include/spdlog/fmt/bundled/core.h	/^    string_value<unsigned char> ustring;$/;"	m	union:internal::value::__anon2
utc_minutes_offset	include/spdlog/details/os.h	/^inline int utc_minutes_offset(const std::tm &tm = details::os::localtime())$/;"	f	namespace:spdlog::details::os
utf16_to_utf8	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC internal::utf16_to_utf8::utf16_to_utf8(wstring_view s) {$/;"	f	class:internal::utf16_to_utf8
utf16_to_utf8	include/spdlog/fmt/bundled/format.h	/^  utf16_to_utf8() {}$/;"	f	class:internal::utf16_to_utf8
utf16_to_utf8	include/spdlog/fmt/bundled/format.h	/^class utf16_to_utf8 {$/;"	c	namespace:internal
utf8_to_utf16	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC internal::utf8_to_utf16::utf8_to_utf16(string_view s) {$/;"	f	class:internal::utf8_to_utf16
utf8_to_utf16	include/spdlog/fmt/bundled/format.h	/^class utf8_to_utf16 {$/;"	c	namespace:internal
v_	include/spdlog/details/circular_q.h	/^    std::vector<T> v_;$/;"	m	class:spdlog::details::circular_q
v_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit v_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
val	include/spdlog/fmt/bundled/core.h	/^  T val;$/;"	m	struct:internal::init
value	include/spdlog/details/null_mutex.h	/^    int value;$/;"	m	struct:spdlog::details::null_atomic_int
value	include/spdlog/fmt/bundled/core.h	/^  FMT_CONSTEXPR value(int val = 0) : int_value(val) {}$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  const Char *value;$/;"	m	struct:internal::string_value
value	include/spdlog/fmt/bundled/core.h	/^  const void *value;$/;"	m	struct:internal::custom_value
value	include/spdlog/fmt/bundled/core.h	/^  explicit value(const T &val) {$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  static const type value = value_type::type_tag;$/;"	m	struct:internal::get_type
value	include/spdlog/fmt/bundled/core.h	/^  value(basic_string_view<char_type> val) {$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(const char_type *val) { string.value = val; }$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(const signed char *val) {$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(const unsigned char *val) {$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(const void *val) { pointer = val; }$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(double val) { double_value = val; }$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(long double val) { long_double_value = val; }$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(long long val) { long_long_value = val; }$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(unsigned long long val) { ulong_long_value = val; }$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^  value(unsigned val) { uint_value = val; }$/;"	f	class:internal::value
value	include/spdlog/fmt/bundled/core.h	/^class value {$/;"	c	namespace:internal
value	include/spdlog/fmt/bundled/format.h	/^    char_type value;$/;"	m	struct:internal::arg_formatter_base::char_spec_handler
value	include/spdlog/fmt/bundled/format.h	/^    char_type value;$/;"	m	struct:internal::arg_formatter_base::char_writer
value	include/spdlog/fmt/bundled/format.h	/^    const char_type *value;$/;"	m	struct:internal::arg_formatter_base::cstring_spec_handler
value	include/spdlog/fmt/bundled/format.h	/^    value = std::is_integral<T>::value && !std::is_same<T, bool>::value &&$/;"	e	enum:internal::is_integer::__anon10
value	include/spdlog/fmt/bundled/format.h	/^  static const bool value = !std::is_const<result>::value;$/;"	m	class:internal::is_output_iterator
value	include/spdlog/fmt/bundled/ostream.h	/^  static const bool value = result::value;$/;"	m	class:internal::is_streamable
value	include/spdlog/fmt/bundled/ostream.h	/^  static const bool value =$/;"	m	struct:convert_to_int
value	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	class:internal::is_like_std_string
value	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	class:internal::is_tuple_like_
value	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	struct:is_range
value	include/spdlog/fmt/bundled/ranges.h	/^  static FMT_CONSTEXPR_DECL const bool value =$/;"	m	struct:is_tuple_like
value_	include/spdlog/fmt/bundled/core.h	/^  internal::value<Context> value_;$/;"	m	class:basic_format_arg
value_	include/spdlog/fmt/bundled/posix.h	/^  explicit error_code(int value = 0) FMT_NOEXCEPT : value_(value) {}$/;"	f	class:error_code
value_	include/spdlog/fmt/bundled/posix.h	/^  int value_;$/;"	m	class:error_code
value_type	include/spdlog/fmt/bundled/core.h	/^        declval<typename std::decay<T>::type&>())) value_type;$/;"	t	struct:internal::get_type
value_type	include/spdlog/fmt/bundled/core.h	/^  typedef T value_type;$/;"	t	class:internal::basic_buffer
value_type	include/spdlog/fmt/bundled/format.h	/^  typedef T value_type;$/;"	t	class:basic_memory_buffer
value_type	include/spdlog/fmt/bundled/format.h	/^  typedef T value_type;$/;"	t	class:internal::counting_iterator
value_type	include/spdlog/fmt/bundled/format.h	/^  typedef T value_type;$/;"	t	class:output_range
value_type	include/spdlog/fmt/bundled/format.h	/^  typedef typename Container::value_type value_type;$/;"	t	class:back_insert_range
value_type	include/spdlog/fmt/bundled/format.h	/^  typedef typename OutputIt::container_type::value_type value_type;$/;"	t	class:internal::truncating_iterator
value_type	include/spdlog/fmt/bundled/format.h	/^  typedef typename traits::value_type value_type;$/;"	t	class:internal::truncating_iterator
value_type	include/spdlog/fmt/bundled/printf.h	/^  typedef Char value_type;$/;"	t	class:internal::null_terminating_iterator
vformat	include/spdlog/fmt/bundled/format.h	/^inline std::basic_string<Char> internal::vformat($/;"	f	class:internal
vformat	include/spdlog/fmt/bundled/locale.h	/^inline std::basic_string<Char> vformat($/;"	f
vformat	include/spdlog/fmt/bundled/locale.h	/^std::basic_string<Char> vformat($/;"	f	namespace:internal
vformat_to	include/spdlog/fmt/bundled/format.h	/^    vformat_to(OutputIt out, const String &format_str,$/;"	f
vformat_to	include/spdlog/fmt/bundled/format.h	/^inline typename buffer_context<Char>::type::iterator vformat_to($/;"	f
vformat_to	include/spdlog/fmt/bundled/format.h	/^typename Context::iterator vformat_to($/;"	f
vformat_to	include/spdlog/fmt/bundled/format.h	/^typename buffer_context<Char>::type::iterator internal::vformat_to($/;"	f	class:internal
vformat_to	include/spdlog/fmt/bundled/locale.h	/^    vformat_to(OutputIt out, const std::locale &loc, const String &format_str,$/;"	f
vformat_to	include/spdlog/fmt/bundled/locale.h	/^typename buffer_context<Char>::type::iterator vformat_to($/;"	f	namespace:internal
vformat_to_n	include/spdlog/fmt/bundled/format.h	/^    format_to_n_result<OutputIt>>::type vformat_to_n($/;"	f
vfprintf	include/spdlog/fmt/bundled/printf.h	/^inline int vfprintf(std::FILE *f, const S &format,$/;"	f
vfprintf	include/spdlog/fmt/bundled/printf.h	/^inline int vfprintf(std::basic_ostream<Char> &os,$/;"	f
visit	include/spdlog/fmt/bundled/core.h	/^    visit(Visitor &&vis, const basic_format_arg<Context> &arg) {$/;"	f
visit_format_arg	include/spdlog/fmt/bundled/core.h	/^    visit_format_arg(Visitor &&vis, const basic_format_arg<Context> &arg) {$/;"	f
void_	include/spdlog/fmt/bundled/format.h	/^struct void_ { typedef void type; };$/;"	s	namespace:internal
vprint	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(std::FILE *f, string_view format_str, format_args args) {$/;"	f
vprint	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(std::FILE *f, wstring_view format_str, wformat_args args) {$/;"	f
vprint	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(string_view format_str, format_args args) {$/;"	f
vprint	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void vprint(wstring_view format_str, wformat_args args) {$/;"	f
vprint	include/spdlog/fmt/bundled/ostream.h	/^inline void vprint(std::basic_ostream<Char> &os,$/;"	f
vprint	include/spdlog/fmt/bundled/posix.h	/^  void vprint(string_view format_str, format_args args) {$/;"	f	class:buffered_file
vprint_colored	include/spdlog/fmt/bundled/color.h	/^inline void vprint_colored(color c, string_view format, format_args args) {$/;"	f
vprint_colored	include/spdlog/fmt/bundled/color.h	/^inline void vprint_colored(color c, wstring_view format, wformat_args args) {$/;"	f
vprintf	include/spdlog/fmt/bundled/printf.h	/^inline int vprintf(const S &format,$/;"	f
vsprintf	include/spdlog/fmt/bundled/printf.h	/^vsprintf(const S &format,$/;"	f
warn	include/spdlog/common.h	/^    warn = SPDLOG_LEVEL_WARN,$/;"	e	enum:spdlog::level::level_enum
warn	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn(const T &msg)$/;"	f	class:spdlog::logger
warn	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn(const char *fmt, const Args &... args)$/;"	f	class:spdlog::logger
warn	include/spdlog/details/logger_impl.h	/^inline void spdlog::logger::warn(const wchar_t *fmt, const Args &... args)$/;"	f	class:spdlog::logger
warn	include/spdlog/spdlog.h	/^inline void warn(const T &msg)$/;"	f	namespace:spdlog
warn	include/spdlog/spdlog.h	/^inline void warn(const char *fmt, const Args &... args)$/;"	f	namespace:spdlog
warn	include/spdlog/spdlog.h	/^inline void warn(const wchar_t *fmt, const Args &... args)$/;"	f	namespace:spdlog
wbuf_to_utf8buf	include/spdlog/details/logger_impl.h	/^inline void wbuf_to_utf8buf(const fmt::wmemory_buffer &wbuf, fmt::memory_buffer &target)$/;"	f
wbuffer	include/spdlog/fmt/bundled/core.h	/^typedef basic_buffer<wchar_t> wbuffer;$/;"	t	namespace:internal
wcstring_view	include/spdlog/fmt/bundled/posix.h	/^typedef basic_cstring_view<wchar_t> wcstring_view;$/;"	t
wformat_context	include/spdlog/fmt/bundled/core.h	/^typedef buffer_context<wchar_t>::type wformat_context;$/;"	t
wformat_parse_context	include/spdlog/fmt/bundled/core.h	/^typedef basic_parse_context<wchar_t> wformat_parse_context;$/;"	t
white	include/spdlog/fmt/bundled/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	e	enum:color
white	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string white = "\\033[37m";$/;"	m	class:spdlog::sinks::final
width	include/spdlog/fmt/bundled/format.h	/^    size_t width() const { return 1; }$/;"	f	struct:internal::arg_formatter_base::char_writer
width	include/spdlog/fmt/bundled/format.h	/^    size_t width() const { return size(); }$/;"	f	struct:basic_writer::double_writer
width	include/spdlog/fmt/bundled/format.h	/^    size_t width() const { return size(); }$/;"	f	struct:basic_writer::inf_or_nan_writer
width	include/spdlog/fmt/bundled/format.h	/^    size_t width() const { return size_; }$/;"	f	struct:basic_writer::padded_int_writer
width	include/spdlog/fmt/bundled/format.h	/^    size_t width() const {$/;"	f	struct:basic_writer::str_writer
width	include/spdlog/fmt/bundled/format.h	/^  FMT_CONSTEXPR unsigned width() const { return width_; }$/;"	f	struct:align_spec
width_	include/spdlog/details/pattern_formatter.h	/^    const size_t width_ = 0;$/;"	m	struct:spdlog::details::padding_info
width_	include/spdlog/fmt/bundled/format.h	/^  unsigned width_;$/;"	m	struct:align_spec
width_adapter	include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR width_adapter(SpecHandler &h) : handler(h) {}$/;"	f	struct:internal::width_adapter
width_adapter	include/spdlog/fmt/bundled/format.h	/^struct width_adapter {$/;"	s	namespace:internal
width_checker	include/spdlog/fmt/bundled/format.h	/^  explicit FMT_CONSTEXPR width_checker(ErrorHandler &eh) : handler_(eh) {}$/;"	f	class:internal::width_checker
width_checker	include/spdlog/fmt/bundled/format.h	/^class width_checker: public function<unsigned long long> {$/;"	c	namespace:internal
width_ref	include/spdlog/fmt/bundled/chrono.h	/^  internal::arg_ref<Char> width_ref;$/;"	m	struct:formatter
width_ref	include/spdlog/fmt/bundled/format.h	/^  arg_ref<Char> width_ref;$/;"	m	struct:internal::dynamic_format_specs
wincolor_sink	include/spdlog/sinks/wincolor_sink.h	/^    wincolor_sink()$/;"	f	class:spdlog::sinks::wincolor_sink
wincolor_sink	include/spdlog/sinks/wincolor_sink.h	/^class wincolor_sink : public sink$/;"	c	namespace:spdlog::sinks
windows_error	include/spdlog/fmt/bundled/format.h	/^  windows_error(int error_code, string_view message, const Args &... args) {$/;"	f	class:windows_error
windows_error	include/spdlog/fmt/bundled/format.h	/^class windows_error : public system_error {$/;"	c
wmemory_buffer	include/spdlog/fmt/bundled/format.h	/^typedef basic_memory_buffer<wchar_t> wmemory_buffer;$/;"	t
worker_loop_	include/spdlog/details/thread_pool.h	/^    void worker_loop_()$/;"	f	class:spdlog::details::thread_pool
worker_ptr	include/spdlog/details/thread_pool.h	/^    async_logger_ptr worker_ptr;$/;"	m	struct:spdlog::details::async_msg
worker_thread_	include/spdlog/details/periodic_worker.h	/^    std::thread worker_thread_;$/;"	m	class:spdlog::details::periodic_worker
wparse_context	include/spdlog/fmt/bundled/core.h	/^typedef basic_parse_context<wchar_t> wparse_context;$/;"	t
wprintf_args	include/spdlog/fmt/bundled/printf.h	/^typedef basic_format_args<wprintf_context> wprintf_args;$/;"	t
wprintf_context	include/spdlog/fmt/bundled/printf.h	/^typedef basic_printf_context_t<internal::wbuffer>::type wprintf_context;$/;"	t
write	include/spdlog/details/file_helper.h	/^    void write(const fmt::memory_buffer &buf)$/;"	f	class:spdlog::details::file_helper
write	include/spdlog/fmt/bundled/chrono.h	/^  void write(int value, int width) {$/;"	f	struct:internal::chrono_formatter
write	include/spdlog/fmt/bundled/format.h	/^      write(T value, FormatSpec spec, FormatSpecs... specs) {$/;"	f	class:basic_writer
write	include/spdlog/fmt/bundled/format.h	/^      write(const T *p) {$/;"	f	class:basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(basic_string_view<Char> s,$/;"	f	class:basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(bool value) {$/;"	f	class:internal::arg_formatter_base
write	include/spdlog/fmt/bundled/format.h	/^  void write(char value) {$/;"	f	class:basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(const Char *s, std::size_t size, const align_spec &spec) {$/;"	f	class:basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(const char_type *value) {$/;"	f	class:internal::arg_formatter_base
write	include/spdlog/fmt/bundled/format.h	/^  void write(double value) {$/;"	f	class:basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(int value) { write_decimal(value); }$/;"	f	class:basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(long double value) {$/;"	f	class:basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(long long value) { write_decimal(value); }$/;"	f	class:basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(long value) { write_decimal(value); }$/;"	f	class:basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(string_view value) {$/;"	f	class:basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(unsigned long long value) { write_decimal(value); }$/;"	f	class:basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(unsigned long value) { write_decimal(value); }$/;"	f	class:basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(unsigned value) { write_decimal(value); }$/;"	f	class:basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(wchar_t value) {$/;"	f	class:basic_writer
write	include/spdlog/fmt/bundled/format.h	/^  void write(wstring_view value) {$/;"	f	class:basic_writer
write	include/spdlog/fmt/bundled/ostream.h	/^void write(std::basic_ostream<Char> &os, basic_buffer<Char> &buf) {$/;"	f	namespace:internal
write_char	include/spdlog/fmt/bundled/format.h	/^  void write_char(char_type value) {$/;"	f	class:internal::arg_formatter_base
write_decimal	include/spdlog/fmt/bundled/format.h	/^  void write_decimal(Int value) {$/;"	f	class:basic_writer
write_double	include/spdlog/fmt/bundled/format.h	/^void basic_writer<Range>::write_double(T value, const format_specs &spec) {$/;"	f	class:basic_writer
write_exponent	include/spdlog/fmt/bundled/format-inl.h	/^FMT_FUNC void write_exponent(int exp, Handler &&h) {$/;"	f	namespace:internal
write_int	include/spdlog/fmt/bundled/format.h	/^  void write_int(T value, const Spec &spec) {$/;"	f	class:basic_writer
write_int	include/spdlog/fmt/bundled/format.h	/^  void write_int(int num_digits, string_view prefix,$/;"	f	class:basic_writer
write_null_pointer	include/spdlog/fmt/bundled/printf.h	/^  void write_null_pointer(char) {$/;"	f	class:printf_arg_formatter
write_null_pointer	include/spdlog/fmt/bundled/printf.h	/^  void write_null_pointer(wchar_t) {$/;"	f	class:printf_arg_formatter
write_padded	include/spdlog/fmt/bundled/format.h	/^  void write_padded(const align_spec &spec, F &&f) {$/;"	f	class:basic_writer
write_pair	include/spdlog/fmt/bundled/format.h	/^  void write_pair(unsigned N, uint32_t index) {$/;"	f	class:internal::decimal_formatter
write_pointer	include/spdlog/fmt/bundled/format.h	/^  void write_pointer(const void *p) {$/;"	f	class:internal::arg_formatter_base
writer	include/spdlog/fmt/bundled/format.h	/^    basic_writer<Range> &writer;$/;"	m	struct:basic_writer::int_writer
writer	include/spdlog/fmt/bundled/format.h	/^  writer_type &writer() { return writer_; }$/;"	f	class:internal::arg_formatter_base
writer	include/spdlog/fmt/bundled/format.h	/^typedef basic_writer<back_insert_range<internal::buffer>> writer;$/;"	t
writer_	include/spdlog/fmt/bundled/format.h	/^  writer_type writer_;$/;"	m	class:internal::arg_formatter_base
writer_type	include/spdlog/fmt/bundled/format.h	/^  typedef basic_writer<Range> writer_type;$/;"	t	class:internal::arg_formatter_base
wstring_view	include/spdlog/fmt/bundled/core.h	/^typedef basic_string_view<wchar_t> wstring_view;$/;"	t
wwriter	include/spdlog/fmt/bundled/format.h	/^typedef basic_writer<back_insert_range<internal::wbuffer>> wwriter;$/;"	t
yellow	include/spdlog/fmt/bundled/color.h	/^enum color { black, red, green, yellow, blue, magenta, cyan, white };$/;"	e	enum:color
yellow	include/spdlog/sinks/ansicolor_sink.h	/^    const std::string yellow = "\\033[33m";$/;"	m	class:spdlog::sinks::final
z_formatter	include/spdlog/details/pattern_formatter.h	/^    explicit z_formatter(padding_info padinfo)$/;"	f	class:spdlog::details::final
~Cpu_temp_reader	src/cpu_temp_reader.cpp	/^Cpu_temp_reader::~Cpu_temp_reader() {$/;"	f	class:Cpu_temp_reader
~Locale	include/spdlog/fmt/bundled/posix.h	/^  ~Locale() { freelocale(locale_); }$/;"	f	class:Locale
~Socket_handler	src/socket_handler.cpp	/^Socket_handler::~Socket_handler() {$/;"	f	class:Socket_handler
~arg_map	include/spdlog/fmt/bundled/core.h	/^  ~arg_map() { delete [] map_; }$/;"	f	class:internal::arg_map
~basic_buffer	include/spdlog/fmt/bundled/core.h	/^  virtual ~basic_buffer() {}$/;"	f	class:internal::basic_buffer
~basic_memory_buffer	include/spdlog/fmt/bundled/format.h	/^  ~basic_memory_buffer() { deallocate(); }$/;"	f	class:basic_memory_buffer
~file_helper	include/spdlog/details/file_helper.h	/^    ~file_helper()$/;"	f	class:spdlog::details::file_helper
~periodic_worker	include/spdlog/details/periodic_worker.h	/^    ~periodic_worker()$/;"	f	class:spdlog::details::periodic_worker
~prettify_handler	include/spdlog/fmt/bundled/format-inl.h	/^  ~prettify_handler() {$/;"	f	struct:internal::prettify_handler
~scoped_pad	include/spdlog/details/pattern_formatter.h	/^    ~scoped_pad()$/;"	f	class:spdlog::details::scoped_pad
~thread_pool	include/spdlog/details/thread_pool.h	/^    ~thread_pool()$/;"	f	class:spdlog::details::thread_pool
